Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CASE
    COMMA
    COMMENT
    COMMENT2
    CONSOLE
    DEFAULT
    FUNCTION
    INDEXOF
    JOIN
    KEYS
    LBRACKET
    LENGTH
    LOG
    NULL
    OBJECT
    PARSEFLOAT
    PARSEINT
    POP
    PUSH
    RBRACKET
    SWITCH
    TOLOWERCASE
    TOSTRING
    TOUPPERCASE
    TYPEOF
    VALUES

Grammar

Rule 0     S' -> init
Rule 1     init -> init instruction
Rule 2     init -> empty
Rule 3     init -> instruction
Rule 4     instruction -> assignation SEMICOLON
Rule 5     instruction -> assignation_const SEMICOLON
Rule 6     instruction -> interface
Rule 7     instruction -> if
Rule 8     instruction -> while
Rule 9     instruction -> for
Rule 10    instruction -> foreach
Rule 11    instruction -> break
Rule 12    instruction -> continue
Rule 13    instruction -> return
Rule 14    if -> IF LPAREN exp RPAREN block
Rule 15    if -> IF LPAREN exp RPAREN block ELSE block
Rule 16    if -> IF LPAREN exp RPAREN block ELSE if
Rule 17    while -> WHILE LPAREN exp RPAREN block
Rule 18    for -> FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block
Rule 19    foreach -> FOR LPAREN VAR ID OF ID RPAREN block
Rule 20    break -> BREAK SEMICOLON
Rule 21    continue -> CONTINUE SEMICOLON
Rule 22    return -> RETURN exp SEMICOLON
Rule 23    return -> RETURN SEMICOLON
Rule 24    block -> LBRACE init RBRACE
Rule 25    assignation_const -> CONST ID COLON type EQUAL exp
Rule 26    assignation_const -> CONST ID EQUAL exp
Rule 27    interface -> INTERFACE ID LBRACE interface_body RBRACE
Rule 28    interface_body -> interface_body SEMICOLON ID COLON type
Rule 29    interface_body -> ID COLON type
Rule 30    assignation -> VAR ID COLON type EQUAL exp
Rule 31    assignation -> VAR ID EQUAL exp
Rule 32    assignation -> VAR ID COLON type
Rule 33    assignation -> ID EQUAL exp
Rule 34    assignation -> ID PLUS_EQUAL exp
Rule 35    assignation -> ID MINUS_EQUAL exp
Rule 36    type -> NUMBER
Rule 37    type -> FLOAT
Rule 38    type -> STRING
Rule 39    type -> CHAR
Rule 40    type -> BOOL
Rule 41    exp -> exp PLUS exp
Rule 42    exp -> exp MINUS exp
Rule 43    exp -> exp TIMES exp
Rule 44    exp -> exp DIVIDE exp
Rule 45    exp -> exp MOD exp
Rule 46    exp -> MINUS exp
Rule 47    exp -> NOT exp
Rule 48    exp -> exp COMPARASION exp
Rule 49    exp -> exp DIFFERENT exp
Rule 50    exp -> exp GREATER exp
Rule 51    exp -> exp LESS exp
Rule 52    exp -> exp GREATER_EQUAL exp
Rule 53    exp -> exp LESS_EQUAL exp
Rule 54    exp -> exp AND exp
Rule 55    exp -> exp OR exp
Rule 56    exp -> NUMBER_LEX
Rule 57    exp -> FLOAT_LEX
Rule 58    exp -> STRING_LEX
Rule 59    exp -> CHAR_LEX
Rule 60    exp -> TRUE
Rule 61    exp -> FALSE
Rule 62    exp -> ID
Rule 63    exp -> LPAREN exp RPAREN
Rule 64    exp -> exp QUESTION exp COLON exp
Rule 65    exp -> ID DOT ID
Rule 66    empty -> <empty>

Terminals, with rules where they appear

AND                  : 54
BOOL                 : 40
BREAK                : 20
CASE                 : 
CHAR                 : 39
CHAR_LEX             : 59
COLON                : 25 28 29 30 32 64
COMMA                : 
COMMENT              : 
COMMENT2             : 
COMPARASION          : 48
CONSOLE              : 
CONST                : 25 26
CONTINUE             : 21
DEFAULT              : 
DIFFERENT            : 49
DIVIDE               : 44
DOT                  : 65
ELSE                 : 15 16
EQUAL                : 25 26 30 31 33
FALSE                : 61
FLOAT                : 37
FLOAT_LEX            : 57
FOR                  : 18 19
FUNCTION             : 
GREATER              : 50
GREATER_EQUAL        : 52
ID                   : 19 19 25 26 27 28 29 30 31 32 33 34 35 62 65 65
IF                   : 14 15 16
INDEXOF              : 
INTERFACE            : 27
JOIN                 : 
KEYS                 : 
LBRACE               : 24 27
LBRACKET             : 
LENGTH               : 
LESS                 : 51
LESS_EQUAL           : 53
LOG                  : 
LPAREN               : 14 15 16 17 18 19 63
MINUS                : 42 46
MINUS_EQUAL          : 35
MOD                  : 45
NOT                  : 47
NULL                 : 
NUMBER               : 36
NUMBER_LEX           : 56
OBJECT               : 
OF                   : 19
OR                   : 55
PARSEFLOAT           : 
PARSEINT             : 
PLUS                 : 41
PLUS_EQUAL           : 34
POP                  : 
PUSH                 : 
QUESTION             : 64
RBRACE               : 24 27
RBRACKET             : 
RETURN               : 22 23
RPAREN               : 14 15 16 17 18 19 63
SEMICOLON            : 4 5 18 18 20 21 22 23 28
STRING               : 38
STRING_LEX           : 58
SWITCH               : 
TIMES                : 43
TOLOWERCASE          : 
TOSTRING             : 
TOUPPERCASE          : 
TRUE                 : 60
TYPEOF               : 
VALUES               : 
VAR                  : 19 30 31 32
WHILE                : 17
error                : 

Nonterminals, with rules where they appear

assignation          : 4 18 18
assignation_const    : 5
block                : 14 15 15 16 17 18 19
break                : 11
continue             : 12
empty                : 2
exp                  : 14 15 16 17 18 22 25 26 30 31 33 34 35 41 41 42 42 43 43 44 44 45 45 46 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 63 64 64 64
for                  : 9
foreach              : 10
if                   : 7 16
init                 : 1 24 0
instruction          : 1 3
interface            : 6
interface_body       : 27 28
return               : 13
type                 : 25 28 29 30 32
while                : 8

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . init instruction
    (2) init -> . empty
    (3) init -> . instruction
    (66) empty -> .
    (4) instruction -> . assignation SEMICOLON
    (5) instruction -> . assignation_const SEMICOLON
    (6) instruction -> . interface
    (7) instruction -> . if
    (8) instruction -> . while
    (9) instruction -> . for
    (10) instruction -> . foreach
    (11) instruction -> . break
    (12) instruction -> . continue
    (13) instruction -> . return
    (30) assignation -> . VAR ID COLON type EQUAL exp
    (31) assignation -> . VAR ID EQUAL exp
    (32) assignation -> . VAR ID COLON type
    (33) assignation -> . ID EQUAL exp
    (34) assignation -> . ID PLUS_EQUAL exp
    (35) assignation -> . ID MINUS_EQUAL exp
    (25) assignation_const -> . CONST ID COLON type EQUAL exp
    (26) assignation_const -> . CONST ID EQUAL exp
    (27) interface -> . INTERFACE ID LBRACE interface_body RBRACE
    (14) if -> . IF LPAREN exp RPAREN block
    (15) if -> . IF LPAREN exp RPAREN block ELSE block
    (16) if -> . IF LPAREN exp RPAREN block ELSE if
    (17) while -> . WHILE LPAREN exp RPAREN block
    (18) for -> . FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block
    (19) foreach -> . FOR LPAREN VAR ID OF ID RPAREN block
    (20) break -> . BREAK SEMICOLON
    (21) continue -> . CONTINUE SEMICOLON
    (22) return -> . RETURN exp SEMICOLON
    (23) return -> . RETURN SEMICOLON

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    $end            reduce using rule 66 (empty -> .)
    VAR             shift and go to state 14
    ID              shift and go to state 15
    CONST           shift and go to state 16
    INTERFACE       shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    RETURN          shift and go to state 23

  ! VAR             [ reduce using rule 66 (empty -> .) ]
  ! ID              [ reduce using rule 66 (empty -> .) ]
  ! CONST           [ reduce using rule 66 (empty -> .) ]
  ! INTERFACE       [ reduce using rule 66 (empty -> .) ]
  ! IF              [ reduce using rule 66 (empty -> .) ]
  ! WHILE           [ reduce using rule 66 (empty -> .) ]
  ! FOR             [ reduce using rule 66 (empty -> .) ]
  ! BREAK           [ reduce using rule 66 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 66 (empty -> .) ]
  ! RETURN          [ reduce using rule 66 (empty -> .) ]

    init                           shift and go to state 1
    instruction                    shift and go to state 2
    empty                          shift and go to state 3
    assignation                    shift and go to state 4
    assignation_const              shift and go to state 5
    interface                      shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    for                            shift and go to state 9
    foreach                        shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    return                         shift and go to state 13

state 1

    (0) S' -> init .
    (1) init -> init . instruction
    (4) instruction -> . assignation SEMICOLON
    (5) instruction -> . assignation_const SEMICOLON
    (6) instruction -> . interface
    (7) instruction -> . if
    (8) instruction -> . while
    (9) instruction -> . for
    (10) instruction -> . foreach
    (11) instruction -> . break
    (12) instruction -> . continue
    (13) instruction -> . return
    (30) assignation -> . VAR ID COLON type EQUAL exp
    (31) assignation -> . VAR ID EQUAL exp
    (32) assignation -> . VAR ID COLON type
    (33) assignation -> . ID EQUAL exp
    (34) assignation -> . ID PLUS_EQUAL exp
    (35) assignation -> . ID MINUS_EQUAL exp
    (25) assignation_const -> . CONST ID COLON type EQUAL exp
    (26) assignation_const -> . CONST ID EQUAL exp
    (27) interface -> . INTERFACE ID LBRACE interface_body RBRACE
    (14) if -> . IF LPAREN exp RPAREN block
    (15) if -> . IF LPAREN exp RPAREN block ELSE block
    (16) if -> . IF LPAREN exp RPAREN block ELSE if
    (17) while -> . WHILE LPAREN exp RPAREN block
    (18) for -> . FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block
    (19) foreach -> . FOR LPAREN VAR ID OF ID RPAREN block
    (20) break -> . BREAK SEMICOLON
    (21) continue -> . CONTINUE SEMICOLON
    (22) return -> . RETURN exp SEMICOLON
    (23) return -> . RETURN SEMICOLON

    VAR             shift and go to state 14
    ID              shift and go to state 15
    CONST           shift and go to state 16
    INTERFACE       shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    RETURN          shift and go to state 23

    instruction                    shift and go to state 24
    assignation                    shift and go to state 4
    assignation_const              shift and go to state 5
    interface                      shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    for                            shift and go to state 9
    foreach                        shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    return                         shift and go to state 13

state 2

    (3) init -> instruction .

    VAR             reduce using rule 3 (init -> instruction .)
    ID              reduce using rule 3 (init -> instruction .)
    CONST           reduce using rule 3 (init -> instruction .)
    INTERFACE       reduce using rule 3 (init -> instruction .)
    IF              reduce using rule 3 (init -> instruction .)
    WHILE           reduce using rule 3 (init -> instruction .)
    FOR             reduce using rule 3 (init -> instruction .)
    BREAK           reduce using rule 3 (init -> instruction .)
    CONTINUE        reduce using rule 3 (init -> instruction .)
    RETURN          reduce using rule 3 (init -> instruction .)
    $end            reduce using rule 3 (init -> instruction .)
    RBRACE          reduce using rule 3 (init -> instruction .)


state 3

    (2) init -> empty .

    VAR             reduce using rule 2 (init -> empty .)
    ID              reduce using rule 2 (init -> empty .)
    CONST           reduce using rule 2 (init -> empty .)
    INTERFACE       reduce using rule 2 (init -> empty .)
    IF              reduce using rule 2 (init -> empty .)
    WHILE           reduce using rule 2 (init -> empty .)
    FOR             reduce using rule 2 (init -> empty .)
    BREAK           reduce using rule 2 (init -> empty .)
    CONTINUE        reduce using rule 2 (init -> empty .)
    RETURN          reduce using rule 2 (init -> empty .)
    $end            reduce using rule 2 (init -> empty .)
    RBRACE          reduce using rule 2 (init -> empty .)


state 4

    (4) instruction -> assignation . SEMICOLON

    SEMICOLON       shift and go to state 25


state 5

    (5) instruction -> assignation_const . SEMICOLON

    SEMICOLON       shift and go to state 26


state 6

    (6) instruction -> interface .

    VAR             reduce using rule 6 (instruction -> interface .)
    ID              reduce using rule 6 (instruction -> interface .)
    CONST           reduce using rule 6 (instruction -> interface .)
    INTERFACE       reduce using rule 6 (instruction -> interface .)
    IF              reduce using rule 6 (instruction -> interface .)
    WHILE           reduce using rule 6 (instruction -> interface .)
    FOR             reduce using rule 6 (instruction -> interface .)
    BREAK           reduce using rule 6 (instruction -> interface .)
    CONTINUE        reduce using rule 6 (instruction -> interface .)
    RETURN          reduce using rule 6 (instruction -> interface .)
    $end            reduce using rule 6 (instruction -> interface .)
    RBRACE          reduce using rule 6 (instruction -> interface .)


state 7

    (7) instruction -> if .

    VAR             reduce using rule 7 (instruction -> if .)
    ID              reduce using rule 7 (instruction -> if .)
    CONST           reduce using rule 7 (instruction -> if .)
    INTERFACE       reduce using rule 7 (instruction -> if .)
    IF              reduce using rule 7 (instruction -> if .)
    WHILE           reduce using rule 7 (instruction -> if .)
    FOR             reduce using rule 7 (instruction -> if .)
    BREAK           reduce using rule 7 (instruction -> if .)
    CONTINUE        reduce using rule 7 (instruction -> if .)
    RETURN          reduce using rule 7 (instruction -> if .)
    $end            reduce using rule 7 (instruction -> if .)
    RBRACE          reduce using rule 7 (instruction -> if .)


state 8

    (8) instruction -> while .

    VAR             reduce using rule 8 (instruction -> while .)
    ID              reduce using rule 8 (instruction -> while .)
    CONST           reduce using rule 8 (instruction -> while .)
    INTERFACE       reduce using rule 8 (instruction -> while .)
    IF              reduce using rule 8 (instruction -> while .)
    WHILE           reduce using rule 8 (instruction -> while .)
    FOR             reduce using rule 8 (instruction -> while .)
    BREAK           reduce using rule 8 (instruction -> while .)
    CONTINUE        reduce using rule 8 (instruction -> while .)
    RETURN          reduce using rule 8 (instruction -> while .)
    $end            reduce using rule 8 (instruction -> while .)
    RBRACE          reduce using rule 8 (instruction -> while .)


state 9

    (9) instruction -> for .

    VAR             reduce using rule 9 (instruction -> for .)
    ID              reduce using rule 9 (instruction -> for .)
    CONST           reduce using rule 9 (instruction -> for .)
    INTERFACE       reduce using rule 9 (instruction -> for .)
    IF              reduce using rule 9 (instruction -> for .)
    WHILE           reduce using rule 9 (instruction -> for .)
    FOR             reduce using rule 9 (instruction -> for .)
    BREAK           reduce using rule 9 (instruction -> for .)
    CONTINUE        reduce using rule 9 (instruction -> for .)
    RETURN          reduce using rule 9 (instruction -> for .)
    $end            reduce using rule 9 (instruction -> for .)
    RBRACE          reduce using rule 9 (instruction -> for .)


state 10

    (10) instruction -> foreach .

    VAR             reduce using rule 10 (instruction -> foreach .)
    ID              reduce using rule 10 (instruction -> foreach .)
    CONST           reduce using rule 10 (instruction -> foreach .)
    INTERFACE       reduce using rule 10 (instruction -> foreach .)
    IF              reduce using rule 10 (instruction -> foreach .)
    WHILE           reduce using rule 10 (instruction -> foreach .)
    FOR             reduce using rule 10 (instruction -> foreach .)
    BREAK           reduce using rule 10 (instruction -> foreach .)
    CONTINUE        reduce using rule 10 (instruction -> foreach .)
    RETURN          reduce using rule 10 (instruction -> foreach .)
    $end            reduce using rule 10 (instruction -> foreach .)
    RBRACE          reduce using rule 10 (instruction -> foreach .)


state 11

    (11) instruction -> break .

    VAR             reduce using rule 11 (instruction -> break .)
    ID              reduce using rule 11 (instruction -> break .)
    CONST           reduce using rule 11 (instruction -> break .)
    INTERFACE       reduce using rule 11 (instruction -> break .)
    IF              reduce using rule 11 (instruction -> break .)
    WHILE           reduce using rule 11 (instruction -> break .)
    FOR             reduce using rule 11 (instruction -> break .)
    BREAK           reduce using rule 11 (instruction -> break .)
    CONTINUE        reduce using rule 11 (instruction -> break .)
    RETURN          reduce using rule 11 (instruction -> break .)
    $end            reduce using rule 11 (instruction -> break .)
    RBRACE          reduce using rule 11 (instruction -> break .)


state 12

    (12) instruction -> continue .

    VAR             reduce using rule 12 (instruction -> continue .)
    ID              reduce using rule 12 (instruction -> continue .)
    CONST           reduce using rule 12 (instruction -> continue .)
    INTERFACE       reduce using rule 12 (instruction -> continue .)
    IF              reduce using rule 12 (instruction -> continue .)
    WHILE           reduce using rule 12 (instruction -> continue .)
    FOR             reduce using rule 12 (instruction -> continue .)
    BREAK           reduce using rule 12 (instruction -> continue .)
    CONTINUE        reduce using rule 12 (instruction -> continue .)
    RETURN          reduce using rule 12 (instruction -> continue .)
    $end            reduce using rule 12 (instruction -> continue .)
    RBRACE          reduce using rule 12 (instruction -> continue .)


state 13

    (13) instruction -> return .

    VAR             reduce using rule 13 (instruction -> return .)
    ID              reduce using rule 13 (instruction -> return .)
    CONST           reduce using rule 13 (instruction -> return .)
    INTERFACE       reduce using rule 13 (instruction -> return .)
    IF              reduce using rule 13 (instruction -> return .)
    WHILE           reduce using rule 13 (instruction -> return .)
    FOR             reduce using rule 13 (instruction -> return .)
    BREAK           reduce using rule 13 (instruction -> return .)
    CONTINUE        reduce using rule 13 (instruction -> return .)
    RETURN          reduce using rule 13 (instruction -> return .)
    $end            reduce using rule 13 (instruction -> return .)
    RBRACE          reduce using rule 13 (instruction -> return .)


state 14

    (30) assignation -> VAR . ID COLON type EQUAL exp
    (31) assignation -> VAR . ID EQUAL exp
    (32) assignation -> VAR . ID COLON type

    ID              shift and go to state 27


state 15

    (33) assignation -> ID . EQUAL exp
    (34) assignation -> ID . PLUS_EQUAL exp
    (35) assignation -> ID . MINUS_EQUAL exp

    EQUAL           shift and go to state 28
    PLUS_EQUAL      shift and go to state 29
    MINUS_EQUAL     shift and go to state 30


state 16

    (25) assignation_const -> CONST . ID COLON type EQUAL exp
    (26) assignation_const -> CONST . ID EQUAL exp

    ID              shift and go to state 31


state 17

    (27) interface -> INTERFACE . ID LBRACE interface_body RBRACE

    ID              shift and go to state 32


state 18

    (14) if -> IF . LPAREN exp RPAREN block
    (15) if -> IF . LPAREN exp RPAREN block ELSE block
    (16) if -> IF . LPAREN exp RPAREN block ELSE if

    LPAREN          shift and go to state 33


state 19

    (17) while -> WHILE . LPAREN exp RPAREN block

    LPAREN          shift and go to state 34


state 20

    (18) for -> FOR . LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block
    (19) foreach -> FOR . LPAREN VAR ID OF ID RPAREN block

    LPAREN          shift and go to state 35


state 21

    (20) break -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 36


state 22

    (21) continue -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 37


state 23

    (22) return -> RETURN . exp SEMICOLON
    (23) return -> RETURN . SEMICOLON
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    SEMICOLON       shift and go to state 39
    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 38

state 24

    (1) init -> init instruction .

    VAR             reduce using rule 1 (init -> init instruction .)
    ID              reduce using rule 1 (init -> init instruction .)
    CONST           reduce using rule 1 (init -> init instruction .)
    INTERFACE       reduce using rule 1 (init -> init instruction .)
    IF              reduce using rule 1 (init -> init instruction .)
    WHILE           reduce using rule 1 (init -> init instruction .)
    FOR             reduce using rule 1 (init -> init instruction .)
    BREAK           reduce using rule 1 (init -> init instruction .)
    CONTINUE        reduce using rule 1 (init -> init instruction .)
    RETURN          reduce using rule 1 (init -> init instruction .)
    $end            reduce using rule 1 (init -> init instruction .)
    RBRACE          reduce using rule 1 (init -> init instruction .)


state 25

    (4) instruction -> assignation SEMICOLON .

    VAR             reduce using rule 4 (instruction -> assignation SEMICOLON .)
    ID              reduce using rule 4 (instruction -> assignation SEMICOLON .)
    CONST           reduce using rule 4 (instruction -> assignation SEMICOLON .)
    INTERFACE       reduce using rule 4 (instruction -> assignation SEMICOLON .)
    IF              reduce using rule 4 (instruction -> assignation SEMICOLON .)
    WHILE           reduce using rule 4 (instruction -> assignation SEMICOLON .)
    FOR             reduce using rule 4 (instruction -> assignation SEMICOLON .)
    BREAK           reduce using rule 4 (instruction -> assignation SEMICOLON .)
    CONTINUE        reduce using rule 4 (instruction -> assignation SEMICOLON .)
    RETURN          reduce using rule 4 (instruction -> assignation SEMICOLON .)
    $end            reduce using rule 4 (instruction -> assignation SEMICOLON .)
    RBRACE          reduce using rule 4 (instruction -> assignation SEMICOLON .)


state 26

    (5) instruction -> assignation_const SEMICOLON .

    VAR             reduce using rule 5 (instruction -> assignation_const SEMICOLON .)
    ID              reduce using rule 5 (instruction -> assignation_const SEMICOLON .)
    CONST           reduce using rule 5 (instruction -> assignation_const SEMICOLON .)
    INTERFACE       reduce using rule 5 (instruction -> assignation_const SEMICOLON .)
    IF              reduce using rule 5 (instruction -> assignation_const SEMICOLON .)
    WHILE           reduce using rule 5 (instruction -> assignation_const SEMICOLON .)
    FOR             reduce using rule 5 (instruction -> assignation_const SEMICOLON .)
    BREAK           reduce using rule 5 (instruction -> assignation_const SEMICOLON .)
    CONTINUE        reduce using rule 5 (instruction -> assignation_const SEMICOLON .)
    RETURN          reduce using rule 5 (instruction -> assignation_const SEMICOLON .)
    $end            reduce using rule 5 (instruction -> assignation_const SEMICOLON .)
    RBRACE          reduce using rule 5 (instruction -> assignation_const SEMICOLON .)


state 27

    (30) assignation -> VAR ID . COLON type EQUAL exp
    (31) assignation -> VAR ID . EQUAL exp
    (32) assignation -> VAR ID . COLON type

    COLON           shift and go to state 50
    EQUAL           shift and go to state 51


state 28

    (33) assignation -> ID EQUAL . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 52

state 29

    (34) assignation -> ID PLUS_EQUAL . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 53

state 30

    (35) assignation -> ID MINUS_EQUAL . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 54

state 31

    (25) assignation_const -> CONST ID . COLON type EQUAL exp
    (26) assignation_const -> CONST ID . EQUAL exp

    COLON           shift and go to state 55
    EQUAL           shift and go to state 56


state 32

    (27) interface -> INTERFACE ID . LBRACE interface_body RBRACE

    LBRACE          shift and go to state 57


state 33

    (14) if -> IF LPAREN . exp RPAREN block
    (15) if -> IF LPAREN . exp RPAREN block ELSE block
    (16) if -> IF LPAREN . exp RPAREN block ELSE if
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 58

state 34

    (17) while -> WHILE LPAREN . exp RPAREN block
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 59

state 35

    (18) for -> FOR LPAREN . assignation SEMICOLON exp SEMICOLON assignation RPAREN block
    (19) foreach -> FOR LPAREN . VAR ID OF ID RPAREN block
    (30) assignation -> . VAR ID COLON type EQUAL exp
    (31) assignation -> . VAR ID EQUAL exp
    (32) assignation -> . VAR ID COLON type
    (33) assignation -> . ID EQUAL exp
    (34) assignation -> . ID PLUS_EQUAL exp
    (35) assignation -> . ID MINUS_EQUAL exp

    VAR             shift and go to state 61
    ID              shift and go to state 15

    assignation                    shift and go to state 60

state 36

    (20) break -> BREAK SEMICOLON .

    VAR             reduce using rule 20 (break -> BREAK SEMICOLON .)
    ID              reduce using rule 20 (break -> BREAK SEMICOLON .)
    CONST           reduce using rule 20 (break -> BREAK SEMICOLON .)
    INTERFACE       reduce using rule 20 (break -> BREAK SEMICOLON .)
    IF              reduce using rule 20 (break -> BREAK SEMICOLON .)
    WHILE           reduce using rule 20 (break -> BREAK SEMICOLON .)
    FOR             reduce using rule 20 (break -> BREAK SEMICOLON .)
    BREAK           reduce using rule 20 (break -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 20 (break -> BREAK SEMICOLON .)
    RETURN          reduce using rule 20 (break -> BREAK SEMICOLON .)
    $end            reduce using rule 20 (break -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 20 (break -> BREAK SEMICOLON .)


state 37

    (21) continue -> CONTINUE SEMICOLON .

    VAR             reduce using rule 21 (continue -> CONTINUE SEMICOLON .)
    ID              reduce using rule 21 (continue -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 21 (continue -> CONTINUE SEMICOLON .)
    INTERFACE       reduce using rule 21 (continue -> CONTINUE SEMICOLON .)
    IF              reduce using rule 21 (continue -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 21 (continue -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 21 (continue -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 21 (continue -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 21 (continue -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 21 (continue -> CONTINUE SEMICOLON .)
    $end            reduce using rule 21 (continue -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 21 (continue -> CONTINUE SEMICOLON .)


state 38

    (22) return -> RETURN exp . SEMICOLON
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67
    COMPARASION     shift and go to state 68
    DIFFERENT       shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    QUESTION        shift and go to state 76


state 39

    (23) return -> RETURN SEMICOLON .

    VAR             reduce using rule 23 (return -> RETURN SEMICOLON .)
    ID              reduce using rule 23 (return -> RETURN SEMICOLON .)
    CONST           reduce using rule 23 (return -> RETURN SEMICOLON .)
    INTERFACE       reduce using rule 23 (return -> RETURN SEMICOLON .)
    IF              reduce using rule 23 (return -> RETURN SEMICOLON .)
    WHILE           reduce using rule 23 (return -> RETURN SEMICOLON .)
    FOR             reduce using rule 23 (return -> RETURN SEMICOLON .)
    BREAK           reduce using rule 23 (return -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 23 (return -> RETURN SEMICOLON .)
    RETURN          reduce using rule 23 (return -> RETURN SEMICOLON .)
    $end            reduce using rule 23 (return -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 23 (return -> RETURN SEMICOLON .)


state 40

    (46) exp -> MINUS . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 77

state 41

    (47) exp -> NOT . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 78

state 42

    (56) exp -> NUMBER_LEX .

    SEMICOLON       reduce using rule 56 (exp -> NUMBER_LEX .)
    PLUS            reduce using rule 56 (exp -> NUMBER_LEX .)
    MINUS           reduce using rule 56 (exp -> NUMBER_LEX .)
    TIMES           reduce using rule 56 (exp -> NUMBER_LEX .)
    DIVIDE          reduce using rule 56 (exp -> NUMBER_LEX .)
    MOD             reduce using rule 56 (exp -> NUMBER_LEX .)
    COMPARASION     reduce using rule 56 (exp -> NUMBER_LEX .)
    DIFFERENT       reduce using rule 56 (exp -> NUMBER_LEX .)
    GREATER         reduce using rule 56 (exp -> NUMBER_LEX .)
    LESS            reduce using rule 56 (exp -> NUMBER_LEX .)
    GREATER_EQUAL   reduce using rule 56 (exp -> NUMBER_LEX .)
    LESS_EQUAL      reduce using rule 56 (exp -> NUMBER_LEX .)
    AND             reduce using rule 56 (exp -> NUMBER_LEX .)
    OR              reduce using rule 56 (exp -> NUMBER_LEX .)
    QUESTION        reduce using rule 56 (exp -> NUMBER_LEX .)
    RPAREN          reduce using rule 56 (exp -> NUMBER_LEX .)
    COLON           reduce using rule 56 (exp -> NUMBER_LEX .)


state 43

    (57) exp -> FLOAT_LEX .

    SEMICOLON       reduce using rule 57 (exp -> FLOAT_LEX .)
    PLUS            reduce using rule 57 (exp -> FLOAT_LEX .)
    MINUS           reduce using rule 57 (exp -> FLOAT_LEX .)
    TIMES           reduce using rule 57 (exp -> FLOAT_LEX .)
    DIVIDE          reduce using rule 57 (exp -> FLOAT_LEX .)
    MOD             reduce using rule 57 (exp -> FLOAT_LEX .)
    COMPARASION     reduce using rule 57 (exp -> FLOAT_LEX .)
    DIFFERENT       reduce using rule 57 (exp -> FLOAT_LEX .)
    GREATER         reduce using rule 57 (exp -> FLOAT_LEX .)
    LESS            reduce using rule 57 (exp -> FLOAT_LEX .)
    GREATER_EQUAL   reduce using rule 57 (exp -> FLOAT_LEX .)
    LESS_EQUAL      reduce using rule 57 (exp -> FLOAT_LEX .)
    AND             reduce using rule 57 (exp -> FLOAT_LEX .)
    OR              reduce using rule 57 (exp -> FLOAT_LEX .)
    QUESTION        reduce using rule 57 (exp -> FLOAT_LEX .)
    RPAREN          reduce using rule 57 (exp -> FLOAT_LEX .)
    COLON           reduce using rule 57 (exp -> FLOAT_LEX .)


state 44

    (58) exp -> STRING_LEX .

    SEMICOLON       reduce using rule 58 (exp -> STRING_LEX .)
    PLUS            reduce using rule 58 (exp -> STRING_LEX .)
    MINUS           reduce using rule 58 (exp -> STRING_LEX .)
    TIMES           reduce using rule 58 (exp -> STRING_LEX .)
    DIVIDE          reduce using rule 58 (exp -> STRING_LEX .)
    MOD             reduce using rule 58 (exp -> STRING_LEX .)
    COMPARASION     reduce using rule 58 (exp -> STRING_LEX .)
    DIFFERENT       reduce using rule 58 (exp -> STRING_LEX .)
    GREATER         reduce using rule 58 (exp -> STRING_LEX .)
    LESS            reduce using rule 58 (exp -> STRING_LEX .)
    GREATER_EQUAL   reduce using rule 58 (exp -> STRING_LEX .)
    LESS_EQUAL      reduce using rule 58 (exp -> STRING_LEX .)
    AND             reduce using rule 58 (exp -> STRING_LEX .)
    OR              reduce using rule 58 (exp -> STRING_LEX .)
    QUESTION        reduce using rule 58 (exp -> STRING_LEX .)
    RPAREN          reduce using rule 58 (exp -> STRING_LEX .)
    COLON           reduce using rule 58 (exp -> STRING_LEX .)


state 45

    (59) exp -> CHAR_LEX .

    SEMICOLON       reduce using rule 59 (exp -> CHAR_LEX .)
    PLUS            reduce using rule 59 (exp -> CHAR_LEX .)
    MINUS           reduce using rule 59 (exp -> CHAR_LEX .)
    TIMES           reduce using rule 59 (exp -> CHAR_LEX .)
    DIVIDE          reduce using rule 59 (exp -> CHAR_LEX .)
    MOD             reduce using rule 59 (exp -> CHAR_LEX .)
    COMPARASION     reduce using rule 59 (exp -> CHAR_LEX .)
    DIFFERENT       reduce using rule 59 (exp -> CHAR_LEX .)
    GREATER         reduce using rule 59 (exp -> CHAR_LEX .)
    LESS            reduce using rule 59 (exp -> CHAR_LEX .)
    GREATER_EQUAL   reduce using rule 59 (exp -> CHAR_LEX .)
    LESS_EQUAL      reduce using rule 59 (exp -> CHAR_LEX .)
    AND             reduce using rule 59 (exp -> CHAR_LEX .)
    OR              reduce using rule 59 (exp -> CHAR_LEX .)
    QUESTION        reduce using rule 59 (exp -> CHAR_LEX .)
    RPAREN          reduce using rule 59 (exp -> CHAR_LEX .)
    COLON           reduce using rule 59 (exp -> CHAR_LEX .)


state 46

    (60) exp -> TRUE .

    SEMICOLON       reduce using rule 60 (exp -> TRUE .)
    PLUS            reduce using rule 60 (exp -> TRUE .)
    MINUS           reduce using rule 60 (exp -> TRUE .)
    TIMES           reduce using rule 60 (exp -> TRUE .)
    DIVIDE          reduce using rule 60 (exp -> TRUE .)
    MOD             reduce using rule 60 (exp -> TRUE .)
    COMPARASION     reduce using rule 60 (exp -> TRUE .)
    DIFFERENT       reduce using rule 60 (exp -> TRUE .)
    GREATER         reduce using rule 60 (exp -> TRUE .)
    LESS            reduce using rule 60 (exp -> TRUE .)
    GREATER_EQUAL   reduce using rule 60 (exp -> TRUE .)
    LESS_EQUAL      reduce using rule 60 (exp -> TRUE .)
    AND             reduce using rule 60 (exp -> TRUE .)
    OR              reduce using rule 60 (exp -> TRUE .)
    QUESTION        reduce using rule 60 (exp -> TRUE .)
    RPAREN          reduce using rule 60 (exp -> TRUE .)
    COLON           reduce using rule 60 (exp -> TRUE .)


state 47

    (61) exp -> FALSE .

    SEMICOLON       reduce using rule 61 (exp -> FALSE .)
    PLUS            reduce using rule 61 (exp -> FALSE .)
    MINUS           reduce using rule 61 (exp -> FALSE .)
    TIMES           reduce using rule 61 (exp -> FALSE .)
    DIVIDE          reduce using rule 61 (exp -> FALSE .)
    MOD             reduce using rule 61 (exp -> FALSE .)
    COMPARASION     reduce using rule 61 (exp -> FALSE .)
    DIFFERENT       reduce using rule 61 (exp -> FALSE .)
    GREATER         reduce using rule 61 (exp -> FALSE .)
    LESS            reduce using rule 61 (exp -> FALSE .)
    GREATER_EQUAL   reduce using rule 61 (exp -> FALSE .)
    LESS_EQUAL      reduce using rule 61 (exp -> FALSE .)
    AND             reduce using rule 61 (exp -> FALSE .)
    OR              reduce using rule 61 (exp -> FALSE .)
    QUESTION        reduce using rule 61 (exp -> FALSE .)
    RPAREN          reduce using rule 61 (exp -> FALSE .)
    COLON           reduce using rule 61 (exp -> FALSE .)


state 48

    (62) exp -> ID .
    (65) exp -> ID . DOT ID

    SEMICOLON       reduce using rule 62 (exp -> ID .)
    PLUS            reduce using rule 62 (exp -> ID .)
    MINUS           reduce using rule 62 (exp -> ID .)
    TIMES           reduce using rule 62 (exp -> ID .)
    DIVIDE          reduce using rule 62 (exp -> ID .)
    MOD             reduce using rule 62 (exp -> ID .)
    COMPARASION     reduce using rule 62 (exp -> ID .)
    DIFFERENT       reduce using rule 62 (exp -> ID .)
    GREATER         reduce using rule 62 (exp -> ID .)
    LESS            reduce using rule 62 (exp -> ID .)
    GREATER_EQUAL   reduce using rule 62 (exp -> ID .)
    LESS_EQUAL      reduce using rule 62 (exp -> ID .)
    AND             reduce using rule 62 (exp -> ID .)
    OR              reduce using rule 62 (exp -> ID .)
    QUESTION        reduce using rule 62 (exp -> ID .)
    RPAREN          reduce using rule 62 (exp -> ID .)
    COLON           reduce using rule 62 (exp -> ID .)
    DOT             shift and go to state 79


state 49

    (63) exp -> LPAREN . exp RPAREN
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 80

state 50

    (30) assignation -> VAR ID COLON . type EQUAL exp
    (32) assignation -> VAR ID COLON . type
    (36) type -> . NUMBER
    (37) type -> . FLOAT
    (38) type -> . STRING
    (39) type -> . CHAR
    (40) type -> . BOOL

    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    CHAR            shift and go to state 85
    BOOL            shift and go to state 86

    type                           shift and go to state 81

state 51

    (31) assignation -> VAR ID EQUAL . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 87

state 52

    (33) assignation -> ID EQUAL exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 33 (assignation -> ID EQUAL exp .)
    RPAREN          reduce using rule 33 (assignation -> ID EQUAL exp .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67
    COMPARASION     shift and go to state 68
    DIFFERENT       shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    QUESTION        shift and go to state 76


state 53

    (34) assignation -> ID PLUS_EQUAL exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 34 (assignation -> ID PLUS_EQUAL exp .)
    RPAREN          reduce using rule 34 (assignation -> ID PLUS_EQUAL exp .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67
    COMPARASION     shift and go to state 68
    DIFFERENT       shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    QUESTION        shift and go to state 76


state 54

    (35) assignation -> ID MINUS_EQUAL exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 35 (assignation -> ID MINUS_EQUAL exp .)
    RPAREN          reduce using rule 35 (assignation -> ID MINUS_EQUAL exp .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67
    COMPARASION     shift and go to state 68
    DIFFERENT       shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    QUESTION        shift and go to state 76


state 55

    (25) assignation_const -> CONST ID COLON . type EQUAL exp
    (36) type -> . NUMBER
    (37) type -> . FLOAT
    (38) type -> . STRING
    (39) type -> . CHAR
    (40) type -> . BOOL

    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    CHAR            shift and go to state 85
    BOOL            shift and go to state 86

    type                           shift and go to state 88

state 56

    (26) assignation_const -> CONST ID EQUAL . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 89

state 57

    (27) interface -> INTERFACE ID LBRACE . interface_body RBRACE
    (28) interface_body -> . interface_body SEMICOLON ID COLON type
    (29) interface_body -> . ID COLON type

    ID              shift and go to state 90

    interface_body                 shift and go to state 91

state 58

    (14) if -> IF LPAREN exp . RPAREN block
    (15) if -> IF LPAREN exp . RPAREN block ELSE block
    (16) if -> IF LPAREN exp . RPAREN block ELSE if
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    RPAREN          shift and go to state 92
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67
    COMPARASION     shift and go to state 68
    DIFFERENT       shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    QUESTION        shift and go to state 76


state 59

    (17) while -> WHILE LPAREN exp . RPAREN block
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    RPAREN          shift and go to state 93
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67
    COMPARASION     shift and go to state 68
    DIFFERENT       shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    QUESTION        shift and go to state 76


state 60

    (18) for -> FOR LPAREN assignation . SEMICOLON exp SEMICOLON assignation RPAREN block

    SEMICOLON       shift and go to state 94


state 61

    (19) foreach -> FOR LPAREN VAR . ID OF ID RPAREN block
    (30) assignation -> VAR . ID COLON type EQUAL exp
    (31) assignation -> VAR . ID EQUAL exp
    (32) assignation -> VAR . ID COLON type

    ID              shift and go to state 95


state 62

    (22) return -> RETURN exp SEMICOLON .

    VAR             reduce using rule 22 (return -> RETURN exp SEMICOLON .)
    ID              reduce using rule 22 (return -> RETURN exp SEMICOLON .)
    CONST           reduce using rule 22 (return -> RETURN exp SEMICOLON .)
    INTERFACE       reduce using rule 22 (return -> RETURN exp SEMICOLON .)
    IF              reduce using rule 22 (return -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 22 (return -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 22 (return -> RETURN exp SEMICOLON .)
    BREAK           reduce using rule 22 (return -> RETURN exp SEMICOLON .)
    CONTINUE        reduce using rule 22 (return -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 22 (return -> RETURN exp SEMICOLON .)
    $end            reduce using rule 22 (return -> RETURN exp SEMICOLON .)
    RBRACE          reduce using rule 22 (return -> RETURN exp SEMICOLON .)


state 63

    (41) exp -> exp PLUS . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 96

state 64

    (42) exp -> exp MINUS . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 97

state 65

    (43) exp -> exp TIMES . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 98

state 66

    (44) exp -> exp DIVIDE . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 99

state 67

    (45) exp -> exp MOD . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 100

state 68

    (48) exp -> exp COMPARASION . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 101

state 69

    (49) exp -> exp DIFFERENT . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 102

state 70

    (50) exp -> exp GREATER . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 103

state 71

    (51) exp -> exp LESS . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 104

state 72

    (52) exp -> exp GREATER_EQUAL . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 105

state 73

    (53) exp -> exp LESS_EQUAL . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 106

state 74

    (54) exp -> exp AND . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 107

state 75

    (55) exp -> exp OR . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 108

state 76

    (64) exp -> exp QUESTION . exp COLON exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 109

state 77

    (46) exp -> MINUS exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 46 (exp -> MINUS exp .)
    PLUS            reduce using rule 46 (exp -> MINUS exp .)
    MINUS           reduce using rule 46 (exp -> MINUS exp .)
    TIMES           reduce using rule 46 (exp -> MINUS exp .)
    DIVIDE          reduce using rule 46 (exp -> MINUS exp .)
    MOD             reduce using rule 46 (exp -> MINUS exp .)
    COMPARASION     reduce using rule 46 (exp -> MINUS exp .)
    DIFFERENT       reduce using rule 46 (exp -> MINUS exp .)
    GREATER         reduce using rule 46 (exp -> MINUS exp .)
    LESS            reduce using rule 46 (exp -> MINUS exp .)
    GREATER_EQUAL   reduce using rule 46 (exp -> MINUS exp .)
    LESS_EQUAL      reduce using rule 46 (exp -> MINUS exp .)
    AND             reduce using rule 46 (exp -> MINUS exp .)
    OR              reduce using rule 46 (exp -> MINUS exp .)
    QUESTION        reduce using rule 46 (exp -> MINUS exp .)
    RPAREN          reduce using rule 46 (exp -> MINUS exp .)
    COLON           reduce using rule 46 (exp -> MINUS exp .)

  ! PLUS            [ shift and go to state 63 ]
  ! MINUS           [ shift and go to state 64 ]
  ! TIMES           [ shift and go to state 65 ]
  ! DIVIDE          [ shift and go to state 66 ]
  ! MOD             [ shift and go to state 67 ]
  ! COMPARASION     [ shift and go to state 68 ]
  ! DIFFERENT       [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATER_EQUAL   [ shift and go to state 72 ]
  ! LESS_EQUAL      [ shift and go to state 73 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! QUESTION        [ shift and go to state 76 ]


state 78

    (47) exp -> NOT exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 47 (exp -> NOT exp .)
    PLUS            reduce using rule 47 (exp -> NOT exp .)
    MINUS           reduce using rule 47 (exp -> NOT exp .)
    TIMES           reduce using rule 47 (exp -> NOT exp .)
    DIVIDE          reduce using rule 47 (exp -> NOT exp .)
    MOD             reduce using rule 47 (exp -> NOT exp .)
    COMPARASION     reduce using rule 47 (exp -> NOT exp .)
    DIFFERENT       reduce using rule 47 (exp -> NOT exp .)
    GREATER         reduce using rule 47 (exp -> NOT exp .)
    LESS            reduce using rule 47 (exp -> NOT exp .)
    GREATER_EQUAL   reduce using rule 47 (exp -> NOT exp .)
    LESS_EQUAL      reduce using rule 47 (exp -> NOT exp .)
    AND             reduce using rule 47 (exp -> NOT exp .)
    OR              reduce using rule 47 (exp -> NOT exp .)
    QUESTION        reduce using rule 47 (exp -> NOT exp .)
    RPAREN          reduce using rule 47 (exp -> NOT exp .)
    COLON           reduce using rule 47 (exp -> NOT exp .)

  ! PLUS            [ shift and go to state 63 ]
  ! MINUS           [ shift and go to state 64 ]
  ! TIMES           [ shift and go to state 65 ]
  ! DIVIDE          [ shift and go to state 66 ]
  ! MOD             [ shift and go to state 67 ]
  ! COMPARASION     [ shift and go to state 68 ]
  ! DIFFERENT       [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATER_EQUAL   [ shift and go to state 72 ]
  ! LESS_EQUAL      [ shift and go to state 73 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! QUESTION        [ shift and go to state 76 ]


state 79

    (65) exp -> ID DOT . ID

    ID              shift and go to state 110


state 80

    (63) exp -> LPAREN exp . RPAREN
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    RPAREN          shift and go to state 111
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67
    COMPARASION     shift and go to state 68
    DIFFERENT       shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    QUESTION        shift and go to state 76


state 81

    (30) assignation -> VAR ID COLON type . EQUAL exp
    (32) assignation -> VAR ID COLON type .

    EQUAL           shift and go to state 112
    SEMICOLON       reduce using rule 32 (assignation -> VAR ID COLON type .)
    RPAREN          reduce using rule 32 (assignation -> VAR ID COLON type .)


state 82

    (36) type -> NUMBER .

    EQUAL           reduce using rule 36 (type -> NUMBER .)
    SEMICOLON       reduce using rule 36 (type -> NUMBER .)
    RPAREN          reduce using rule 36 (type -> NUMBER .)
    RBRACE          reduce using rule 36 (type -> NUMBER .)


state 83

    (37) type -> FLOAT .

    EQUAL           reduce using rule 37 (type -> FLOAT .)
    SEMICOLON       reduce using rule 37 (type -> FLOAT .)
    RPAREN          reduce using rule 37 (type -> FLOAT .)
    RBRACE          reduce using rule 37 (type -> FLOAT .)


state 84

    (38) type -> STRING .

    EQUAL           reduce using rule 38 (type -> STRING .)
    SEMICOLON       reduce using rule 38 (type -> STRING .)
    RPAREN          reduce using rule 38 (type -> STRING .)
    RBRACE          reduce using rule 38 (type -> STRING .)


state 85

    (39) type -> CHAR .

    EQUAL           reduce using rule 39 (type -> CHAR .)
    SEMICOLON       reduce using rule 39 (type -> CHAR .)
    RPAREN          reduce using rule 39 (type -> CHAR .)
    RBRACE          reduce using rule 39 (type -> CHAR .)


state 86

    (40) type -> BOOL .

    EQUAL           reduce using rule 40 (type -> BOOL .)
    SEMICOLON       reduce using rule 40 (type -> BOOL .)
    RPAREN          reduce using rule 40 (type -> BOOL .)
    RBRACE          reduce using rule 40 (type -> BOOL .)


state 87

    (31) assignation -> VAR ID EQUAL exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 31 (assignation -> VAR ID EQUAL exp .)
    RPAREN          reduce using rule 31 (assignation -> VAR ID EQUAL exp .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67
    COMPARASION     shift and go to state 68
    DIFFERENT       shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    QUESTION        shift and go to state 76


state 88

    (25) assignation_const -> CONST ID COLON type . EQUAL exp

    EQUAL           shift and go to state 113


state 89

    (26) assignation_const -> CONST ID EQUAL exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 26 (assignation_const -> CONST ID EQUAL exp .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67
    COMPARASION     shift and go to state 68
    DIFFERENT       shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    QUESTION        shift and go to state 76


state 90

    (29) interface_body -> ID . COLON type

    COLON           shift and go to state 114


state 91

    (27) interface -> INTERFACE ID LBRACE interface_body . RBRACE
    (28) interface_body -> interface_body . SEMICOLON ID COLON type

    RBRACE          shift and go to state 115
    SEMICOLON       shift and go to state 116


state 92

    (14) if -> IF LPAREN exp RPAREN . block
    (15) if -> IF LPAREN exp RPAREN . block ELSE block
    (16) if -> IF LPAREN exp RPAREN . block ELSE if
    (24) block -> . LBRACE init RBRACE

    LBRACE          shift and go to state 118

    block                          shift and go to state 117

state 93

    (17) while -> WHILE LPAREN exp RPAREN . block
    (24) block -> . LBRACE init RBRACE

    LBRACE          shift and go to state 118

    block                          shift and go to state 119

state 94

    (18) for -> FOR LPAREN assignation SEMICOLON . exp SEMICOLON assignation RPAREN block
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 120

state 95

    (19) foreach -> FOR LPAREN VAR ID . OF ID RPAREN block
    (30) assignation -> VAR ID . COLON type EQUAL exp
    (31) assignation -> VAR ID . EQUAL exp
    (32) assignation -> VAR ID . COLON type

    OF              shift and go to state 121
    COLON           shift and go to state 50
    EQUAL           shift and go to state 51


state 96

    (41) exp -> exp PLUS exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 41 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 41 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 41 (exp -> exp PLUS exp .)
    COMPARASION     reduce using rule 41 (exp -> exp PLUS exp .)
    DIFFERENT       reduce using rule 41 (exp -> exp PLUS exp .)
    GREATER         reduce using rule 41 (exp -> exp PLUS exp .)
    LESS            reduce using rule 41 (exp -> exp PLUS exp .)
    GREATER_EQUAL   reduce using rule 41 (exp -> exp PLUS exp .)
    LESS_EQUAL      reduce using rule 41 (exp -> exp PLUS exp .)
    AND             reduce using rule 41 (exp -> exp PLUS exp .)
    OR              reduce using rule 41 (exp -> exp PLUS exp .)
    QUESTION        reduce using rule 41 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 41 (exp -> exp PLUS exp .)
    COLON           reduce using rule 41 (exp -> exp PLUS exp .)
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67

  ! TIMES           [ reduce using rule 41 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 41 (exp -> exp PLUS exp .) ]
  ! MOD             [ reduce using rule 41 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 63 ]
  ! MINUS           [ shift and go to state 64 ]
  ! COMPARASION     [ shift and go to state 68 ]
  ! DIFFERENT       [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATER_EQUAL   [ shift and go to state 72 ]
  ! LESS_EQUAL      [ shift and go to state 73 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! QUESTION        [ shift and go to state 76 ]


state 97

    (42) exp -> exp MINUS exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 42 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 42 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 42 (exp -> exp MINUS exp .)
    COMPARASION     reduce using rule 42 (exp -> exp MINUS exp .)
    DIFFERENT       reduce using rule 42 (exp -> exp MINUS exp .)
    GREATER         reduce using rule 42 (exp -> exp MINUS exp .)
    LESS            reduce using rule 42 (exp -> exp MINUS exp .)
    GREATER_EQUAL   reduce using rule 42 (exp -> exp MINUS exp .)
    LESS_EQUAL      reduce using rule 42 (exp -> exp MINUS exp .)
    AND             reduce using rule 42 (exp -> exp MINUS exp .)
    OR              reduce using rule 42 (exp -> exp MINUS exp .)
    QUESTION        reduce using rule 42 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 42 (exp -> exp MINUS exp .)
    COLON           reduce using rule 42 (exp -> exp MINUS exp .)
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67

  ! TIMES           [ reduce using rule 42 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 42 (exp -> exp MINUS exp .) ]
  ! MOD             [ reduce using rule 42 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 63 ]
  ! MINUS           [ shift and go to state 64 ]
  ! COMPARASION     [ shift and go to state 68 ]
  ! DIFFERENT       [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATER_EQUAL   [ shift and go to state 72 ]
  ! LESS_EQUAL      [ shift and go to state 73 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! QUESTION        [ shift and go to state 76 ]


state 98

    (43) exp -> exp TIMES exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 43 (exp -> exp TIMES exp .)
    PLUS            reduce using rule 43 (exp -> exp TIMES exp .)
    MINUS           reduce using rule 43 (exp -> exp TIMES exp .)
    TIMES           reduce using rule 43 (exp -> exp TIMES exp .)
    DIVIDE          reduce using rule 43 (exp -> exp TIMES exp .)
    MOD             reduce using rule 43 (exp -> exp TIMES exp .)
    COMPARASION     reduce using rule 43 (exp -> exp TIMES exp .)
    DIFFERENT       reduce using rule 43 (exp -> exp TIMES exp .)
    GREATER         reduce using rule 43 (exp -> exp TIMES exp .)
    LESS            reduce using rule 43 (exp -> exp TIMES exp .)
    GREATER_EQUAL   reduce using rule 43 (exp -> exp TIMES exp .)
    LESS_EQUAL      reduce using rule 43 (exp -> exp TIMES exp .)
    AND             reduce using rule 43 (exp -> exp TIMES exp .)
    OR              reduce using rule 43 (exp -> exp TIMES exp .)
    QUESTION        reduce using rule 43 (exp -> exp TIMES exp .)
    RPAREN          reduce using rule 43 (exp -> exp TIMES exp .)
    COLON           reduce using rule 43 (exp -> exp TIMES exp .)

  ! PLUS            [ shift and go to state 63 ]
  ! MINUS           [ shift and go to state 64 ]
  ! TIMES           [ shift and go to state 65 ]
  ! DIVIDE          [ shift and go to state 66 ]
  ! MOD             [ shift and go to state 67 ]
  ! COMPARASION     [ shift and go to state 68 ]
  ! DIFFERENT       [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATER_EQUAL   [ shift and go to state 72 ]
  ! LESS_EQUAL      [ shift and go to state 73 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! QUESTION        [ shift and go to state 76 ]


state 99

    (44) exp -> exp DIVIDE exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 44 (exp -> exp DIVIDE exp .)
    PLUS            reduce using rule 44 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 44 (exp -> exp DIVIDE exp .)
    TIMES           reduce using rule 44 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 44 (exp -> exp DIVIDE exp .)
    MOD             reduce using rule 44 (exp -> exp DIVIDE exp .)
    COMPARASION     reduce using rule 44 (exp -> exp DIVIDE exp .)
    DIFFERENT       reduce using rule 44 (exp -> exp DIVIDE exp .)
    GREATER         reduce using rule 44 (exp -> exp DIVIDE exp .)
    LESS            reduce using rule 44 (exp -> exp DIVIDE exp .)
    GREATER_EQUAL   reduce using rule 44 (exp -> exp DIVIDE exp .)
    LESS_EQUAL      reduce using rule 44 (exp -> exp DIVIDE exp .)
    AND             reduce using rule 44 (exp -> exp DIVIDE exp .)
    OR              reduce using rule 44 (exp -> exp DIVIDE exp .)
    QUESTION        reduce using rule 44 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 44 (exp -> exp DIVIDE exp .)
    COLON           reduce using rule 44 (exp -> exp DIVIDE exp .)

  ! PLUS            [ shift and go to state 63 ]
  ! MINUS           [ shift and go to state 64 ]
  ! TIMES           [ shift and go to state 65 ]
  ! DIVIDE          [ shift and go to state 66 ]
  ! MOD             [ shift and go to state 67 ]
  ! COMPARASION     [ shift and go to state 68 ]
  ! DIFFERENT       [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATER_EQUAL   [ shift and go to state 72 ]
  ! LESS_EQUAL      [ shift and go to state 73 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! QUESTION        [ shift and go to state 76 ]


state 100

    (45) exp -> exp MOD exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 45 (exp -> exp MOD exp .)
    PLUS            reduce using rule 45 (exp -> exp MOD exp .)
    MINUS           reduce using rule 45 (exp -> exp MOD exp .)
    TIMES           reduce using rule 45 (exp -> exp MOD exp .)
    DIVIDE          reduce using rule 45 (exp -> exp MOD exp .)
    MOD             reduce using rule 45 (exp -> exp MOD exp .)
    COMPARASION     reduce using rule 45 (exp -> exp MOD exp .)
    DIFFERENT       reduce using rule 45 (exp -> exp MOD exp .)
    GREATER         reduce using rule 45 (exp -> exp MOD exp .)
    LESS            reduce using rule 45 (exp -> exp MOD exp .)
    GREATER_EQUAL   reduce using rule 45 (exp -> exp MOD exp .)
    LESS_EQUAL      reduce using rule 45 (exp -> exp MOD exp .)
    AND             reduce using rule 45 (exp -> exp MOD exp .)
    OR              reduce using rule 45 (exp -> exp MOD exp .)
    QUESTION        reduce using rule 45 (exp -> exp MOD exp .)
    RPAREN          reduce using rule 45 (exp -> exp MOD exp .)
    COLON           reduce using rule 45 (exp -> exp MOD exp .)

  ! PLUS            [ shift and go to state 63 ]
  ! MINUS           [ shift and go to state 64 ]
  ! TIMES           [ shift and go to state 65 ]
  ! DIVIDE          [ shift and go to state 66 ]
  ! MOD             [ shift and go to state 67 ]
  ! COMPARASION     [ shift and go to state 68 ]
  ! DIFFERENT       [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATER_EQUAL   [ shift and go to state 72 ]
  ! LESS_EQUAL      [ shift and go to state 73 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! QUESTION        [ shift and go to state 76 ]


state 101

    (48) exp -> exp COMPARASION exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 48 (exp -> exp COMPARASION exp .)
    COMPARASION     reduce using rule 48 (exp -> exp COMPARASION exp .)
    DIFFERENT       reduce using rule 48 (exp -> exp COMPARASION exp .)
    AND             reduce using rule 48 (exp -> exp COMPARASION exp .)
    OR              reduce using rule 48 (exp -> exp COMPARASION exp .)
    QUESTION        reduce using rule 48 (exp -> exp COMPARASION exp .)
    RPAREN          reduce using rule 48 (exp -> exp COMPARASION exp .)
    COLON           reduce using rule 48 (exp -> exp COMPARASION exp .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    LESS_EQUAL      shift and go to state 73

  ! PLUS            [ reduce using rule 48 (exp -> exp COMPARASION exp .) ]
  ! MINUS           [ reduce using rule 48 (exp -> exp COMPARASION exp .) ]
  ! TIMES           [ reduce using rule 48 (exp -> exp COMPARASION exp .) ]
  ! DIVIDE          [ reduce using rule 48 (exp -> exp COMPARASION exp .) ]
  ! MOD             [ reduce using rule 48 (exp -> exp COMPARASION exp .) ]
  ! GREATER         [ reduce using rule 48 (exp -> exp COMPARASION exp .) ]
  ! LESS            [ reduce using rule 48 (exp -> exp COMPARASION exp .) ]
  ! GREATER_EQUAL   [ reduce using rule 48 (exp -> exp COMPARASION exp .) ]
  ! LESS_EQUAL      [ reduce using rule 48 (exp -> exp COMPARASION exp .) ]
  ! COMPARASION     [ shift and go to state 68 ]
  ! DIFFERENT       [ shift and go to state 69 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! QUESTION        [ shift and go to state 76 ]


state 102

    (49) exp -> exp DIFFERENT exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 49 (exp -> exp DIFFERENT exp .)
    COMPARASION     reduce using rule 49 (exp -> exp DIFFERENT exp .)
    DIFFERENT       reduce using rule 49 (exp -> exp DIFFERENT exp .)
    AND             reduce using rule 49 (exp -> exp DIFFERENT exp .)
    OR              reduce using rule 49 (exp -> exp DIFFERENT exp .)
    QUESTION        reduce using rule 49 (exp -> exp DIFFERENT exp .)
    RPAREN          reduce using rule 49 (exp -> exp DIFFERENT exp .)
    COLON           reduce using rule 49 (exp -> exp DIFFERENT exp .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    LESS_EQUAL      shift and go to state 73

  ! PLUS            [ reduce using rule 49 (exp -> exp DIFFERENT exp .) ]
  ! MINUS           [ reduce using rule 49 (exp -> exp DIFFERENT exp .) ]
  ! TIMES           [ reduce using rule 49 (exp -> exp DIFFERENT exp .) ]
  ! DIVIDE          [ reduce using rule 49 (exp -> exp DIFFERENT exp .) ]
  ! MOD             [ reduce using rule 49 (exp -> exp DIFFERENT exp .) ]
  ! GREATER         [ reduce using rule 49 (exp -> exp DIFFERENT exp .) ]
  ! LESS            [ reduce using rule 49 (exp -> exp DIFFERENT exp .) ]
  ! GREATER_EQUAL   [ reduce using rule 49 (exp -> exp DIFFERENT exp .) ]
  ! LESS_EQUAL      [ reduce using rule 49 (exp -> exp DIFFERENT exp .) ]
  ! COMPARASION     [ shift and go to state 68 ]
  ! DIFFERENT       [ shift and go to state 69 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! QUESTION        [ shift and go to state 76 ]


state 103

    (50) exp -> exp GREATER exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 50 (exp -> exp GREATER exp .)
    COMPARASION     reduce using rule 50 (exp -> exp GREATER exp .)
    DIFFERENT       reduce using rule 50 (exp -> exp GREATER exp .)
    GREATER         reduce using rule 50 (exp -> exp GREATER exp .)
    LESS            reduce using rule 50 (exp -> exp GREATER exp .)
    GREATER_EQUAL   reduce using rule 50 (exp -> exp GREATER exp .)
    LESS_EQUAL      reduce using rule 50 (exp -> exp GREATER exp .)
    AND             reduce using rule 50 (exp -> exp GREATER exp .)
    OR              reduce using rule 50 (exp -> exp GREATER exp .)
    QUESTION        reduce using rule 50 (exp -> exp GREATER exp .)
    RPAREN          reduce using rule 50 (exp -> exp GREATER exp .)
    COLON           reduce using rule 50 (exp -> exp GREATER exp .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67

  ! PLUS            [ reduce using rule 50 (exp -> exp GREATER exp .) ]
  ! MINUS           [ reduce using rule 50 (exp -> exp GREATER exp .) ]
  ! TIMES           [ reduce using rule 50 (exp -> exp GREATER exp .) ]
  ! DIVIDE          [ reduce using rule 50 (exp -> exp GREATER exp .) ]
  ! MOD             [ reduce using rule 50 (exp -> exp GREATER exp .) ]
  ! COMPARASION     [ shift and go to state 68 ]
  ! DIFFERENT       [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATER_EQUAL   [ shift and go to state 72 ]
  ! LESS_EQUAL      [ shift and go to state 73 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! QUESTION        [ shift and go to state 76 ]


state 104

    (51) exp -> exp LESS exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 51 (exp -> exp LESS exp .)
    COMPARASION     reduce using rule 51 (exp -> exp LESS exp .)
    DIFFERENT       reduce using rule 51 (exp -> exp LESS exp .)
    GREATER         reduce using rule 51 (exp -> exp LESS exp .)
    LESS            reduce using rule 51 (exp -> exp LESS exp .)
    GREATER_EQUAL   reduce using rule 51 (exp -> exp LESS exp .)
    LESS_EQUAL      reduce using rule 51 (exp -> exp LESS exp .)
    AND             reduce using rule 51 (exp -> exp LESS exp .)
    OR              reduce using rule 51 (exp -> exp LESS exp .)
    QUESTION        reduce using rule 51 (exp -> exp LESS exp .)
    RPAREN          reduce using rule 51 (exp -> exp LESS exp .)
    COLON           reduce using rule 51 (exp -> exp LESS exp .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67

  ! PLUS            [ reduce using rule 51 (exp -> exp LESS exp .) ]
  ! MINUS           [ reduce using rule 51 (exp -> exp LESS exp .) ]
  ! TIMES           [ reduce using rule 51 (exp -> exp LESS exp .) ]
  ! DIVIDE          [ reduce using rule 51 (exp -> exp LESS exp .) ]
  ! MOD             [ reduce using rule 51 (exp -> exp LESS exp .) ]
  ! COMPARASION     [ shift and go to state 68 ]
  ! DIFFERENT       [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATER_EQUAL   [ shift and go to state 72 ]
  ! LESS_EQUAL      [ shift and go to state 73 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! QUESTION        [ shift and go to state 76 ]


state 105

    (52) exp -> exp GREATER_EQUAL exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 52 (exp -> exp GREATER_EQUAL exp .)
    COMPARASION     reduce using rule 52 (exp -> exp GREATER_EQUAL exp .)
    DIFFERENT       reduce using rule 52 (exp -> exp GREATER_EQUAL exp .)
    GREATER         reduce using rule 52 (exp -> exp GREATER_EQUAL exp .)
    LESS            reduce using rule 52 (exp -> exp GREATER_EQUAL exp .)
    GREATER_EQUAL   reduce using rule 52 (exp -> exp GREATER_EQUAL exp .)
    LESS_EQUAL      reduce using rule 52 (exp -> exp GREATER_EQUAL exp .)
    AND             reduce using rule 52 (exp -> exp GREATER_EQUAL exp .)
    OR              reduce using rule 52 (exp -> exp GREATER_EQUAL exp .)
    QUESTION        reduce using rule 52 (exp -> exp GREATER_EQUAL exp .)
    RPAREN          reduce using rule 52 (exp -> exp GREATER_EQUAL exp .)
    COLON           reduce using rule 52 (exp -> exp GREATER_EQUAL exp .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67

  ! PLUS            [ reduce using rule 52 (exp -> exp GREATER_EQUAL exp .) ]
  ! MINUS           [ reduce using rule 52 (exp -> exp GREATER_EQUAL exp .) ]
  ! TIMES           [ reduce using rule 52 (exp -> exp GREATER_EQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 52 (exp -> exp GREATER_EQUAL exp .) ]
  ! MOD             [ reduce using rule 52 (exp -> exp GREATER_EQUAL exp .) ]
  ! COMPARASION     [ shift and go to state 68 ]
  ! DIFFERENT       [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATER_EQUAL   [ shift and go to state 72 ]
  ! LESS_EQUAL      [ shift and go to state 73 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! QUESTION        [ shift and go to state 76 ]


state 106

    (53) exp -> exp LESS_EQUAL exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 53 (exp -> exp LESS_EQUAL exp .)
    COMPARASION     reduce using rule 53 (exp -> exp LESS_EQUAL exp .)
    DIFFERENT       reduce using rule 53 (exp -> exp LESS_EQUAL exp .)
    GREATER         reduce using rule 53 (exp -> exp LESS_EQUAL exp .)
    LESS            reduce using rule 53 (exp -> exp LESS_EQUAL exp .)
    GREATER_EQUAL   reduce using rule 53 (exp -> exp LESS_EQUAL exp .)
    LESS_EQUAL      reduce using rule 53 (exp -> exp LESS_EQUAL exp .)
    AND             reduce using rule 53 (exp -> exp LESS_EQUAL exp .)
    OR              reduce using rule 53 (exp -> exp LESS_EQUAL exp .)
    QUESTION        reduce using rule 53 (exp -> exp LESS_EQUAL exp .)
    RPAREN          reduce using rule 53 (exp -> exp LESS_EQUAL exp .)
    COLON           reduce using rule 53 (exp -> exp LESS_EQUAL exp .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67

  ! PLUS            [ reduce using rule 53 (exp -> exp LESS_EQUAL exp .) ]
  ! MINUS           [ reduce using rule 53 (exp -> exp LESS_EQUAL exp .) ]
  ! TIMES           [ reduce using rule 53 (exp -> exp LESS_EQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 53 (exp -> exp LESS_EQUAL exp .) ]
  ! MOD             [ reduce using rule 53 (exp -> exp LESS_EQUAL exp .) ]
  ! COMPARASION     [ shift and go to state 68 ]
  ! DIFFERENT       [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! LESS            [ shift and go to state 71 ]
  ! GREATER_EQUAL   [ shift and go to state 72 ]
  ! LESS_EQUAL      [ shift and go to state 73 ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! QUESTION        [ shift and go to state 76 ]


state 107

    (54) exp -> exp AND exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 54 (exp -> exp AND exp .)
    AND             reduce using rule 54 (exp -> exp AND exp .)
    OR              reduce using rule 54 (exp -> exp AND exp .)
    QUESTION        reduce using rule 54 (exp -> exp AND exp .)
    RPAREN          reduce using rule 54 (exp -> exp AND exp .)
    COLON           reduce using rule 54 (exp -> exp AND exp .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67
    COMPARASION     shift and go to state 68
    DIFFERENT       shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    LESS_EQUAL      shift and go to state 73

  ! PLUS            [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! TIMES           [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! DIVIDE          [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! MOD             [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! COMPARASION     [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! DIFFERENT       [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! GREATER         [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! LESS            [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! GREATER_EQUAL   [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! LESS_EQUAL      [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 75 ]
  ! QUESTION        [ shift and go to state 76 ]


state 108

    (55) exp -> exp OR exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 55 (exp -> exp OR exp .)
    OR              reduce using rule 55 (exp -> exp OR exp .)
    QUESTION        reduce using rule 55 (exp -> exp OR exp .)
    RPAREN          reduce using rule 55 (exp -> exp OR exp .)
    COLON           reduce using rule 55 (exp -> exp OR exp .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67
    COMPARASION     shift and go to state 68
    DIFFERENT       shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    AND             shift and go to state 74

  ! PLUS            [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! TIMES           [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! DIVIDE          [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! MOD             [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! COMPARASION     [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! DIFFERENT       [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! GREATER         [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! LESS            [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! GREATER_EQUAL   [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! LESS_EQUAL      [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 55 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 75 ]
  ! QUESTION        [ shift and go to state 76 ]


state 109

    (64) exp -> exp QUESTION exp . COLON exp
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    COLON           shift and go to state 122
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67
    COMPARASION     shift and go to state 68
    DIFFERENT       shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    QUESTION        shift and go to state 76


state 110

    (65) exp -> ID DOT ID .

    SEMICOLON       reduce using rule 65 (exp -> ID DOT ID .)
    PLUS            reduce using rule 65 (exp -> ID DOT ID .)
    MINUS           reduce using rule 65 (exp -> ID DOT ID .)
    TIMES           reduce using rule 65 (exp -> ID DOT ID .)
    DIVIDE          reduce using rule 65 (exp -> ID DOT ID .)
    MOD             reduce using rule 65 (exp -> ID DOT ID .)
    COMPARASION     reduce using rule 65 (exp -> ID DOT ID .)
    DIFFERENT       reduce using rule 65 (exp -> ID DOT ID .)
    GREATER         reduce using rule 65 (exp -> ID DOT ID .)
    LESS            reduce using rule 65 (exp -> ID DOT ID .)
    GREATER_EQUAL   reduce using rule 65 (exp -> ID DOT ID .)
    LESS_EQUAL      reduce using rule 65 (exp -> ID DOT ID .)
    AND             reduce using rule 65 (exp -> ID DOT ID .)
    OR              reduce using rule 65 (exp -> ID DOT ID .)
    QUESTION        reduce using rule 65 (exp -> ID DOT ID .)
    RPAREN          reduce using rule 65 (exp -> ID DOT ID .)
    COLON           reduce using rule 65 (exp -> ID DOT ID .)


state 111

    (63) exp -> LPAREN exp RPAREN .

    SEMICOLON       reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    MOD             reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    COMPARASION     reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    DIFFERENT       reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    GREATER         reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    LESS            reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    GREATER_EQUAL   reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    LESS_EQUAL      reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    QUESTION        reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 63 (exp -> LPAREN exp RPAREN .)
    COLON           reduce using rule 63 (exp -> LPAREN exp RPAREN .)


state 112

    (30) assignation -> VAR ID COLON type EQUAL . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 123

state 113

    (25) assignation_const -> CONST ID COLON type EQUAL . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 124

state 114

    (29) interface_body -> ID COLON . type
    (36) type -> . NUMBER
    (37) type -> . FLOAT
    (38) type -> . STRING
    (39) type -> . CHAR
    (40) type -> . BOOL

    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    CHAR            shift and go to state 85
    BOOL            shift and go to state 86

    type                           shift and go to state 125

state 115

    (27) interface -> INTERFACE ID LBRACE interface_body RBRACE .

    VAR             reduce using rule 27 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    ID              reduce using rule 27 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    CONST           reduce using rule 27 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    INTERFACE       reduce using rule 27 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    IF              reduce using rule 27 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    WHILE           reduce using rule 27 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    FOR             reduce using rule 27 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    BREAK           reduce using rule 27 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    CONTINUE        reduce using rule 27 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    RETURN          reduce using rule 27 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    $end            reduce using rule 27 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    RBRACE          reduce using rule 27 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)


state 116

    (28) interface_body -> interface_body SEMICOLON . ID COLON type

    ID              shift and go to state 126


state 117

    (14) if -> IF LPAREN exp RPAREN block .
    (15) if -> IF LPAREN exp RPAREN block . ELSE block
    (16) if -> IF LPAREN exp RPAREN block . ELSE if

    VAR             reduce using rule 14 (if -> IF LPAREN exp RPAREN block .)
    ID              reduce using rule 14 (if -> IF LPAREN exp RPAREN block .)
    CONST           reduce using rule 14 (if -> IF LPAREN exp RPAREN block .)
    INTERFACE       reduce using rule 14 (if -> IF LPAREN exp RPAREN block .)
    IF              reduce using rule 14 (if -> IF LPAREN exp RPAREN block .)
    WHILE           reduce using rule 14 (if -> IF LPAREN exp RPAREN block .)
    FOR             reduce using rule 14 (if -> IF LPAREN exp RPAREN block .)
    BREAK           reduce using rule 14 (if -> IF LPAREN exp RPAREN block .)
    CONTINUE        reduce using rule 14 (if -> IF LPAREN exp RPAREN block .)
    RETURN          reduce using rule 14 (if -> IF LPAREN exp RPAREN block .)
    $end            reduce using rule 14 (if -> IF LPAREN exp RPAREN block .)
    RBRACE          reduce using rule 14 (if -> IF LPAREN exp RPAREN block .)
    ELSE            shift and go to state 127


state 118

    (24) block -> LBRACE . init RBRACE
    (1) init -> . init instruction
    (2) init -> . empty
    (3) init -> . instruction
    (66) empty -> .
    (4) instruction -> . assignation SEMICOLON
    (5) instruction -> . assignation_const SEMICOLON
    (6) instruction -> . interface
    (7) instruction -> . if
    (8) instruction -> . while
    (9) instruction -> . for
    (10) instruction -> . foreach
    (11) instruction -> . break
    (12) instruction -> . continue
    (13) instruction -> . return
    (30) assignation -> . VAR ID COLON type EQUAL exp
    (31) assignation -> . VAR ID EQUAL exp
    (32) assignation -> . VAR ID COLON type
    (33) assignation -> . ID EQUAL exp
    (34) assignation -> . ID PLUS_EQUAL exp
    (35) assignation -> . ID MINUS_EQUAL exp
    (25) assignation_const -> . CONST ID COLON type EQUAL exp
    (26) assignation_const -> . CONST ID EQUAL exp
    (27) interface -> . INTERFACE ID LBRACE interface_body RBRACE
    (14) if -> . IF LPAREN exp RPAREN block
    (15) if -> . IF LPAREN exp RPAREN block ELSE block
    (16) if -> . IF LPAREN exp RPAREN block ELSE if
    (17) while -> . WHILE LPAREN exp RPAREN block
    (18) for -> . FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block
    (19) foreach -> . FOR LPAREN VAR ID OF ID RPAREN block
    (20) break -> . BREAK SEMICOLON
    (21) continue -> . CONTINUE SEMICOLON
    (22) return -> . RETURN exp SEMICOLON
    (23) return -> . RETURN SEMICOLON

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    RBRACE          reduce using rule 66 (empty -> .)
    VAR             shift and go to state 14
    ID              shift and go to state 15
    CONST           shift and go to state 16
    INTERFACE       shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    RETURN          shift and go to state 23

  ! VAR             [ reduce using rule 66 (empty -> .) ]
  ! ID              [ reduce using rule 66 (empty -> .) ]
  ! CONST           [ reduce using rule 66 (empty -> .) ]
  ! INTERFACE       [ reduce using rule 66 (empty -> .) ]
  ! IF              [ reduce using rule 66 (empty -> .) ]
  ! WHILE           [ reduce using rule 66 (empty -> .) ]
  ! FOR             [ reduce using rule 66 (empty -> .) ]
  ! BREAK           [ reduce using rule 66 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 66 (empty -> .) ]
  ! RETURN          [ reduce using rule 66 (empty -> .) ]

    init                           shift and go to state 128
    instruction                    shift and go to state 2
    empty                          shift and go to state 3
    assignation                    shift and go to state 4
    assignation_const              shift and go to state 5
    interface                      shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    for                            shift and go to state 9
    foreach                        shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    return                         shift and go to state 13

state 119

    (17) while -> WHILE LPAREN exp RPAREN block .

    VAR             reduce using rule 17 (while -> WHILE LPAREN exp RPAREN block .)
    ID              reduce using rule 17 (while -> WHILE LPAREN exp RPAREN block .)
    CONST           reduce using rule 17 (while -> WHILE LPAREN exp RPAREN block .)
    INTERFACE       reduce using rule 17 (while -> WHILE LPAREN exp RPAREN block .)
    IF              reduce using rule 17 (while -> WHILE LPAREN exp RPAREN block .)
    WHILE           reduce using rule 17 (while -> WHILE LPAREN exp RPAREN block .)
    FOR             reduce using rule 17 (while -> WHILE LPAREN exp RPAREN block .)
    BREAK           reduce using rule 17 (while -> WHILE LPAREN exp RPAREN block .)
    CONTINUE        reduce using rule 17 (while -> WHILE LPAREN exp RPAREN block .)
    RETURN          reduce using rule 17 (while -> WHILE LPAREN exp RPAREN block .)
    $end            reduce using rule 17 (while -> WHILE LPAREN exp RPAREN block .)
    RBRACE          reduce using rule 17 (while -> WHILE LPAREN exp RPAREN block .)


state 120

    (18) for -> FOR LPAREN assignation SEMICOLON exp . SEMICOLON assignation RPAREN block
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       shift and go to state 129
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67
    COMPARASION     shift and go to state 68
    DIFFERENT       shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    QUESTION        shift and go to state 76


state 121

    (19) foreach -> FOR LPAREN VAR ID OF . ID RPAREN block

    ID              shift and go to state 130


state 122

    (64) exp -> exp QUESTION exp COLON . exp
    (41) exp -> . exp PLUS exp
    (42) exp -> . exp MINUS exp
    (43) exp -> . exp TIMES exp
    (44) exp -> . exp DIVIDE exp
    (45) exp -> . exp MOD exp
    (46) exp -> . MINUS exp
    (47) exp -> . NOT exp
    (48) exp -> . exp COMPARASION exp
    (49) exp -> . exp DIFFERENT exp
    (50) exp -> . exp GREATER exp
    (51) exp -> . exp LESS exp
    (52) exp -> . exp GREATER_EQUAL exp
    (53) exp -> . exp LESS_EQUAL exp
    (54) exp -> . exp AND exp
    (55) exp -> . exp OR exp
    (56) exp -> . NUMBER_LEX
    (57) exp -> . FLOAT_LEX
    (58) exp -> . STRING_LEX
    (59) exp -> . CHAR_LEX
    (60) exp -> . TRUE
    (61) exp -> . FALSE
    (62) exp -> . ID
    (63) exp -> . LPAREN exp RPAREN
    (64) exp -> . exp QUESTION exp COLON exp
    (65) exp -> . ID DOT ID

    MINUS           shift and go to state 40
    NOT             shift and go to state 41
    NUMBER_LEX      shift and go to state 42
    FLOAT_LEX       shift and go to state 43
    STRING_LEX      shift and go to state 44
    CHAR_LEX        shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    LPAREN          shift and go to state 49

    exp                            shift and go to state 131

state 123

    (30) assignation -> VAR ID COLON type EQUAL exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 30 (assignation -> VAR ID COLON type EQUAL exp .)
    RPAREN          reduce using rule 30 (assignation -> VAR ID COLON type EQUAL exp .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67
    COMPARASION     shift and go to state 68
    DIFFERENT       shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    QUESTION        shift and go to state 76


state 124

    (25) assignation_const -> CONST ID COLON type EQUAL exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 25 (assignation_const -> CONST ID COLON type EQUAL exp .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67
    COMPARASION     shift and go to state 68
    DIFFERENT       shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    QUESTION        shift and go to state 76


state 125

    (29) interface_body -> ID COLON type .

    RBRACE          reduce using rule 29 (interface_body -> ID COLON type .)
    SEMICOLON       reduce using rule 29 (interface_body -> ID COLON type .)


state 126

    (28) interface_body -> interface_body SEMICOLON ID . COLON type

    COLON           shift and go to state 132


state 127

    (15) if -> IF LPAREN exp RPAREN block ELSE . block
    (16) if -> IF LPAREN exp RPAREN block ELSE . if
    (24) block -> . LBRACE init RBRACE
    (14) if -> . IF LPAREN exp RPAREN block
    (15) if -> . IF LPAREN exp RPAREN block ELSE block
    (16) if -> . IF LPAREN exp RPAREN block ELSE if

    LBRACE          shift and go to state 118
    IF              shift and go to state 18

    block                          shift and go to state 133
    if                             shift and go to state 134

state 128

    (24) block -> LBRACE init . RBRACE
    (1) init -> init . instruction
    (4) instruction -> . assignation SEMICOLON
    (5) instruction -> . assignation_const SEMICOLON
    (6) instruction -> . interface
    (7) instruction -> . if
    (8) instruction -> . while
    (9) instruction -> . for
    (10) instruction -> . foreach
    (11) instruction -> . break
    (12) instruction -> . continue
    (13) instruction -> . return
    (30) assignation -> . VAR ID COLON type EQUAL exp
    (31) assignation -> . VAR ID EQUAL exp
    (32) assignation -> . VAR ID COLON type
    (33) assignation -> . ID EQUAL exp
    (34) assignation -> . ID PLUS_EQUAL exp
    (35) assignation -> . ID MINUS_EQUAL exp
    (25) assignation_const -> . CONST ID COLON type EQUAL exp
    (26) assignation_const -> . CONST ID EQUAL exp
    (27) interface -> . INTERFACE ID LBRACE interface_body RBRACE
    (14) if -> . IF LPAREN exp RPAREN block
    (15) if -> . IF LPAREN exp RPAREN block ELSE block
    (16) if -> . IF LPAREN exp RPAREN block ELSE if
    (17) while -> . WHILE LPAREN exp RPAREN block
    (18) for -> . FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block
    (19) foreach -> . FOR LPAREN VAR ID OF ID RPAREN block
    (20) break -> . BREAK SEMICOLON
    (21) continue -> . CONTINUE SEMICOLON
    (22) return -> . RETURN exp SEMICOLON
    (23) return -> . RETURN SEMICOLON

    RBRACE          shift and go to state 135
    VAR             shift and go to state 14
    ID              shift and go to state 15
    CONST           shift and go to state 16
    INTERFACE       shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    RETURN          shift and go to state 23

    instruction                    shift and go to state 24
    assignation                    shift and go to state 4
    assignation_const              shift and go to state 5
    interface                      shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    for                            shift and go to state 9
    foreach                        shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    return                         shift and go to state 13

state 129

    (18) for -> FOR LPAREN assignation SEMICOLON exp SEMICOLON . assignation RPAREN block
    (30) assignation -> . VAR ID COLON type EQUAL exp
    (31) assignation -> . VAR ID EQUAL exp
    (32) assignation -> . VAR ID COLON type
    (33) assignation -> . ID EQUAL exp
    (34) assignation -> . ID PLUS_EQUAL exp
    (35) assignation -> . ID MINUS_EQUAL exp

    VAR             shift and go to state 14
    ID              shift and go to state 15

    assignation                    shift and go to state 136

state 130

    (19) foreach -> FOR LPAREN VAR ID OF ID . RPAREN block

    RPAREN          shift and go to state 137


state 131

    (64) exp -> exp QUESTION exp COLON exp .
    (41) exp -> exp . PLUS exp
    (42) exp -> exp . MINUS exp
    (43) exp -> exp . TIMES exp
    (44) exp -> exp . DIVIDE exp
    (45) exp -> exp . MOD exp
    (48) exp -> exp . COMPARASION exp
    (49) exp -> exp . DIFFERENT exp
    (50) exp -> exp . GREATER exp
    (51) exp -> exp . LESS exp
    (52) exp -> exp . GREATER_EQUAL exp
    (53) exp -> exp . LESS_EQUAL exp
    (54) exp -> exp . AND exp
    (55) exp -> exp . OR exp
    (64) exp -> exp . QUESTION exp COLON exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for COMPARASION resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for QUESTION resolved as shift
    SEMICOLON       reduce using rule 64 (exp -> exp QUESTION exp COLON exp .)
    RPAREN          reduce using rule 64 (exp -> exp QUESTION exp COLON exp .)
    COLON           reduce using rule 64 (exp -> exp QUESTION exp COLON exp .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 66
    MOD             shift and go to state 67
    COMPARASION     shift and go to state 68
    DIFFERENT       shift and go to state 69
    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    AND             shift and go to state 74
    OR              shift and go to state 75
    QUESTION        shift and go to state 76

  ! PLUS            [ reduce using rule 64 (exp -> exp QUESTION exp COLON exp .) ]
  ! MINUS           [ reduce using rule 64 (exp -> exp QUESTION exp COLON exp .) ]
  ! TIMES           [ reduce using rule 64 (exp -> exp QUESTION exp COLON exp .) ]
  ! DIVIDE          [ reduce using rule 64 (exp -> exp QUESTION exp COLON exp .) ]
  ! MOD             [ reduce using rule 64 (exp -> exp QUESTION exp COLON exp .) ]
  ! COMPARASION     [ reduce using rule 64 (exp -> exp QUESTION exp COLON exp .) ]
  ! DIFFERENT       [ reduce using rule 64 (exp -> exp QUESTION exp COLON exp .) ]
  ! GREATER         [ reduce using rule 64 (exp -> exp QUESTION exp COLON exp .) ]
  ! LESS            [ reduce using rule 64 (exp -> exp QUESTION exp COLON exp .) ]
  ! GREATER_EQUAL   [ reduce using rule 64 (exp -> exp QUESTION exp COLON exp .) ]
  ! LESS_EQUAL      [ reduce using rule 64 (exp -> exp QUESTION exp COLON exp .) ]
  ! AND             [ reduce using rule 64 (exp -> exp QUESTION exp COLON exp .) ]
  ! OR              [ reduce using rule 64 (exp -> exp QUESTION exp COLON exp .) ]
  ! QUESTION        [ reduce using rule 64 (exp -> exp QUESTION exp COLON exp .) ]


state 132

    (28) interface_body -> interface_body SEMICOLON ID COLON . type
    (36) type -> . NUMBER
    (37) type -> . FLOAT
    (38) type -> . STRING
    (39) type -> . CHAR
    (40) type -> . BOOL

    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    CHAR            shift and go to state 85
    BOOL            shift and go to state 86

    type                           shift and go to state 138

state 133

    (15) if -> IF LPAREN exp RPAREN block ELSE block .

    VAR             reduce using rule 15 (if -> IF LPAREN exp RPAREN block ELSE block .)
    ID              reduce using rule 15 (if -> IF LPAREN exp RPAREN block ELSE block .)
    CONST           reduce using rule 15 (if -> IF LPAREN exp RPAREN block ELSE block .)
    INTERFACE       reduce using rule 15 (if -> IF LPAREN exp RPAREN block ELSE block .)
    IF              reduce using rule 15 (if -> IF LPAREN exp RPAREN block ELSE block .)
    WHILE           reduce using rule 15 (if -> IF LPAREN exp RPAREN block ELSE block .)
    FOR             reduce using rule 15 (if -> IF LPAREN exp RPAREN block ELSE block .)
    BREAK           reduce using rule 15 (if -> IF LPAREN exp RPAREN block ELSE block .)
    CONTINUE        reduce using rule 15 (if -> IF LPAREN exp RPAREN block ELSE block .)
    RETURN          reduce using rule 15 (if -> IF LPAREN exp RPAREN block ELSE block .)
    $end            reduce using rule 15 (if -> IF LPAREN exp RPAREN block ELSE block .)
    RBRACE          reduce using rule 15 (if -> IF LPAREN exp RPAREN block ELSE block .)


state 134

    (16) if -> IF LPAREN exp RPAREN block ELSE if .

    VAR             reduce using rule 16 (if -> IF LPAREN exp RPAREN block ELSE if .)
    ID              reduce using rule 16 (if -> IF LPAREN exp RPAREN block ELSE if .)
    CONST           reduce using rule 16 (if -> IF LPAREN exp RPAREN block ELSE if .)
    INTERFACE       reduce using rule 16 (if -> IF LPAREN exp RPAREN block ELSE if .)
    IF              reduce using rule 16 (if -> IF LPAREN exp RPAREN block ELSE if .)
    WHILE           reduce using rule 16 (if -> IF LPAREN exp RPAREN block ELSE if .)
    FOR             reduce using rule 16 (if -> IF LPAREN exp RPAREN block ELSE if .)
    BREAK           reduce using rule 16 (if -> IF LPAREN exp RPAREN block ELSE if .)
    CONTINUE        reduce using rule 16 (if -> IF LPAREN exp RPAREN block ELSE if .)
    RETURN          reduce using rule 16 (if -> IF LPAREN exp RPAREN block ELSE if .)
    $end            reduce using rule 16 (if -> IF LPAREN exp RPAREN block ELSE if .)
    RBRACE          reduce using rule 16 (if -> IF LPAREN exp RPAREN block ELSE if .)


state 135

    (24) block -> LBRACE init RBRACE .

    ELSE            reduce using rule 24 (block -> LBRACE init RBRACE .)
    VAR             reduce using rule 24 (block -> LBRACE init RBRACE .)
    ID              reduce using rule 24 (block -> LBRACE init RBRACE .)
    CONST           reduce using rule 24 (block -> LBRACE init RBRACE .)
    INTERFACE       reduce using rule 24 (block -> LBRACE init RBRACE .)
    IF              reduce using rule 24 (block -> LBRACE init RBRACE .)
    WHILE           reduce using rule 24 (block -> LBRACE init RBRACE .)
    FOR             reduce using rule 24 (block -> LBRACE init RBRACE .)
    BREAK           reduce using rule 24 (block -> LBRACE init RBRACE .)
    CONTINUE        reduce using rule 24 (block -> LBRACE init RBRACE .)
    RETURN          reduce using rule 24 (block -> LBRACE init RBRACE .)
    $end            reduce using rule 24 (block -> LBRACE init RBRACE .)
    RBRACE          reduce using rule 24 (block -> LBRACE init RBRACE .)


state 136

    (18) for -> FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation . RPAREN block

    RPAREN          shift and go to state 139


state 137

    (19) foreach -> FOR LPAREN VAR ID OF ID RPAREN . block
    (24) block -> . LBRACE init RBRACE

    LBRACE          shift and go to state 118

    block                          shift and go to state 140

state 138

    (28) interface_body -> interface_body SEMICOLON ID COLON type .

    RBRACE          reduce using rule 28 (interface_body -> interface_body SEMICOLON ID COLON type .)
    SEMICOLON       reduce using rule 28 (interface_body -> interface_body SEMICOLON ID COLON type .)


state 139

    (18) for -> FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN . block
    (24) block -> . LBRACE init RBRACE

    LBRACE          shift and go to state 118

    block                          shift and go to state 141

state 140

    (19) foreach -> FOR LPAREN VAR ID OF ID RPAREN block .

    VAR             reduce using rule 19 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .)
    ID              reduce using rule 19 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .)
    CONST           reduce using rule 19 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .)
    INTERFACE       reduce using rule 19 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .)
    IF              reduce using rule 19 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .)
    WHILE           reduce using rule 19 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .)
    FOR             reduce using rule 19 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .)
    BREAK           reduce using rule 19 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .)
    CONTINUE        reduce using rule 19 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .)
    RETURN          reduce using rule 19 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .)
    $end            reduce using rule 19 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .)
    RBRACE          reduce using rule 19 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .)


state 141

    (18) for -> FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block .

    VAR             reduce using rule 18 (for -> FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block .)
    ID              reduce using rule 18 (for -> FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block .)
    CONST           reduce using rule 18 (for -> FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block .)
    INTERFACE       reduce using rule 18 (for -> FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block .)
    IF              reduce using rule 18 (for -> FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block .)
    WHILE           reduce using rule 18 (for -> FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block .)
    FOR             reduce using rule 18 (for -> FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block .)
    BREAK           reduce using rule 18 (for -> FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block .)
    CONTINUE        reduce using rule 18 (for -> FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block .)
    RETURN          reduce using rule 18 (for -> FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block .)
    $end            reduce using rule 18 (for -> FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block .)
    RBRACE          reduce using rule 18 (for -> FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for CONST in state 0 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 0 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 0 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 118 resolved as shift
WARNING: shift/reduce conflict for ID in state 118 resolved as shift
WARNING: shift/reduce conflict for CONST in state 118 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 118 resolved as shift
WARNING: shift/reduce conflict for IF in state 118 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 118 resolved as shift
WARNING: shift/reduce conflict for FOR in state 118 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 118 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 118 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 131 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 131 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 131 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 131 resolved as shift
WARNING: shift/reduce conflict for MOD in state 131 resolved as shift
WARNING: shift/reduce conflict for COMPARASION in state 131 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 131 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 131 resolved as shift
WARNING: shift/reduce conflict for LESS in state 131 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 131 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 131 resolved as shift
WARNING: shift/reduce conflict for AND in state 131 resolved as shift
WARNING: shift/reduce conflict for OR in state 131 resolved as shift
WARNING: shift/reduce conflict for QUESTION in state 131 resolved as shift
