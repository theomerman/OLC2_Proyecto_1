Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CASE
    COMMENT
    COMMENT2
    DEFAULT
    FUNCTION
    KEYS
    NULL
    OBJECT
    SWITCH
    VALUES

Grammar

Rule 0     S' -> start
Rule 1     start -> block
Rule 2     block -> block instruction
Rule 3     block -> instruction
Rule 4     instruction -> assignment
Rule 5     instruction -> declaration
Rule 6     instruction -> declaration_array
Rule 7     instruction -> declaration_matrix
Rule 8     instruction -> vector_functions
Rule 9     instruction -> interface
Rule 10    instruction -> if_statement
Rule 11    instruction -> while
Rule 12    instruction -> for
Rule 13    instruction -> foreach
Rule 14    instruction -> break
Rule 15    instruction -> continue
Rule 16    instruction -> return
Rule 17    instruction -> print
Rule 18    if_statement -> if
Rule 19    if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if
Rule 20    if -> IF LPAREN exp RPAREN LBRACE block RBRACE
Rule 21    if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE
Rule 22    while -> WHILE LPAREN exp RPAREN block
Rule 23    for -> FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block
Rule 24    foreach -> FOR LPAREN VAR ID OF ID RPAREN block
Rule 25    break -> BREAK SEMICOLON
Rule 26    continue -> CONTINUE SEMICOLON
Rule 27    return -> RETURN exp SEMICOLON
Rule 28    return -> RETURN SEMICOLON
Rule 29    print -> CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON
Rule 30    interface -> INTERFACE ID LBRACE interface_body RBRACE
Rule 31    interface_body -> interface_body SEMICOLON ID COLON type
Rule 32    interface_body -> ID COLON type
Rule 33    declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
Rule 34    declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON
Rule 35    declaration_array -> CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
Rule 36    definition_array -> LBRACKET exp_list RBRACKET
Rule 37    definition_array -> LBRACKET RBRACKET
Rule 38    definition_array -> exp
Rule 39    declaration_matrix -> VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
Rule 40    declaration_matrix -> CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
Rule 41    matrix_dimension -> matrix_dimension LBRACKET RBRACKET
Rule 42    matrix_dimension -> LBRACKET RBRACKET LBRACKET RBRACKET
Rule 43    values_list -> values_list COMMA LBRACKET arg RBRACKET
Rule 44    values_list -> LBRACKET arg RBRACKET
Rule 45    arg -> values_list
Rule 46    arg -> exp_list
Rule 47    vector_functions -> ID DOT PUSH LPAREN exp RPAREN SEMICOLON
Rule 48    exp -> ID DOT POP LPAREN RPAREN
Rule 49    exp -> ID DOT INDEXOF LPAREN exp RPAREN
Rule 50    exp -> ID DOT JOIN LPAREN RPAREN
Rule 51    exp -> ID DOT LENGTH
Rule 52    exp -> PARSEINT LPAREN exp RPAREN
Rule 53    exp -> PARSEFLOAT LPAREN exp RPAREN
Rule 54    exp -> exp DOT TOSTRING LPAREN RPAREN
Rule 55    exp -> ID DOT TOSTRING LPAREN RPAREN
Rule 56    exp -> exp DOT TOLOWERCASE LPAREN RPAREN
Rule 57    exp -> ID DOT TOLOWERCASE LPAREN RPAREN
Rule 58    exp -> exp DOT TOUPPERCASE LPAREN RPAREN
Rule 59    exp -> ID DOT TOUPPERCASE LPAREN RPAREN
Rule 60    exp -> TYPEOF exp
Rule 61    declaration -> CONST ID COLON type EQUAL exp SEMICOLON
Rule 62    declaration -> CONST ID EQUAL exp SEMICOLON
Rule 63    declaration -> VAR ID COLON type EQUAL exp SEMICOLON
Rule 64    declaration -> VAR ID EQUAL exp SEMICOLON
Rule 65    declaration -> VAR ID COLON type SEMICOLON
Rule 66    assignment -> ID EQUAL exp SEMICOLON
Rule 67    assignment -> ID PLUS_EQUAL exp SEMICOLON
Rule 68    assignment -> ID MINUS_EQUAL exp SEMICOLON
Rule 69    assignment -> ID index_list EQUAL exp SEMICOLON
Rule 70    index_list -> index_list LBRACKET exp RBRACKET
Rule 71    index_list -> LBRACKET exp RBRACKET
Rule 72    type -> TYPES
Rule 73    exp_list -> exp_list COMMA exp
Rule 74    exp_list -> exp
Rule 75    exp -> exp PLUS exp
Rule 76    exp -> exp MINUS exp
Rule 77    exp -> exp TIMES exp
Rule 78    exp -> exp DIVIDE exp
Rule 79    exp -> exp MOD exp
Rule 80    exp -> MINUS exp
Rule 81    exp -> NOT exp
Rule 82    exp -> exp COMPARASION exp
Rule 83    exp -> exp DIFFERENT exp
Rule 84    exp -> exp GREATER exp
Rule 85    exp -> exp LESS exp
Rule 86    exp -> exp GREATER_EQUAL exp
Rule 87    exp -> exp LESS_EQUAL exp
Rule 88    exp -> exp AND exp
Rule 89    exp -> exp OR exp
Rule 90    exp -> NUMBER_LEX
Rule 91    exp -> FLOAT_LEX
Rule 92    exp -> STRING_LEX
Rule 93    exp -> CHAR_LEX
Rule 94    exp -> BOOLEAN
Rule 95    exp -> list_access
Rule 96    list_access -> list_access LBRACKET exp RBRACKET
Rule 97    list_access -> list_access DOT ID
Rule 98    list_access -> ID
Rule 99    exp -> LPAREN exp RPAREN
Rule 100   exp -> exp QUESTION exp COLON exp
Rule 101   empty -> <empty>

Terminals, with rules where they appear

AND                  : 88
BOOLEAN              : 94
BREAK                : 25
CASE                 : 
CHAR_LEX             : 93
COLON                : 31 32 33 34 35 39 40 61 63 65 100
COMMA                : 43 73
COMMENT              : 
COMMENT2             : 
COMPARASION          : 82
CONSOLE              : 29
CONST                : 35 40 61 62
CONTINUE             : 26
DEFAULT              : 
DIFFERENT            : 83
DIVIDE               : 78
DOT                  : 29 47 48 49 50 51 54 55 56 57 58 59 97
ELSE                 : 19 21
EQUAL                : 33 34 35 39 40 61 62 63 64 66 69
FLOAT_LEX            : 91
FOR                  : 23 24
FUNCTION             : 
GREATER              : 84
GREATER_EQUAL        : 86
ID                   : 24 24 30 31 32 33 34 35 39 40 47 48 49 50 51 55 57 59 61 62 63 64 65 66 67 68 69 97 98
IF                   : 19 20 21
INDEXOF              : 49
INTERFACE            : 30
JOIN                 : 50
KEYS                 : 
LBRACE               : 19 20 21 21 30
LBRACKET             : 33 34 35 36 37 39 40 41 42 42 43 44 70 71 96
LENGTH               : 51
LESS                 : 85
LESS_EQUAL           : 87
LOG                  : 29
LPAREN               : 19 20 21 22 23 24 29 47 48 49 50 52 53 54 55 56 57 58 59 99
MINUS                : 76 80
MINUS_EQUAL          : 68
MOD                  : 79
NOT                  : 81
NULL                 : 
NUMBER_LEX           : 90
OBJECT               : 
OF                   : 24
OR                   : 89
PARSEFLOAT           : 53
PARSEINT             : 52
PLUS                 : 75
PLUS_EQUAL           : 67
POP                  : 48
PUSH                 : 47
QUESTION             : 100
RBRACE               : 19 20 21 21 30
RBRACKET             : 33 34 35 36 37 39 40 41 42 42 43 44 70 71 96
RETURN               : 27 28
RPAREN               : 19 20 21 22 23 24 29 47 48 49 50 52 53 54 55 56 57 58 59 99
SEMICOLON            : 23 23 25 26 27 28 29 31 33 34 35 39 40 47 61 62 63 64 65 66 67 68 69
STRING_LEX           : 92
SWITCH               : 
TIMES                : 77
TOLOWERCASE          : 56 57
TOSTRING             : 54 55
TOUPPERCASE          : 58 59
TYPEOF               : 60
TYPES                : 72
VALUES               : 
VAR                  : 24 33 34 39 63 64 65
WHILE                : 22
error                : 34

Nonterminals, with rules where they appear

arg                  : 43 44
assignment           : 4
block                : 1 2 19 20 21 21 22 23 24
break                : 14
continue             : 15
declaration          : 5 23 23
declaration_array    : 6
declaration_matrix   : 7
definition_array     : 33 35
empty                : 
exp                  : 19 20 21 22 23 27 38 47 49 52 53 54 56 58 60 61 62 63 64 66 67 68 69 70 71 73 74 75 75 76 76 77 77 78 78 79 79 80 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 96 99 100 100 100
exp_list             : 29 36 46 73
for                  : 12
foreach              : 13
if                   : 18 19
if_statement         : 10
index_list           : 69 70
instruction          : 2 3
interface            : 9
interface_body       : 30 31
list_access          : 95 96 97
matrix_dimension     : 39 40 41
print                : 17
return               : 16
start                : 0
type                 : 31 32 33 34 35 39 40 61 63 65
values_list          : 39 40 43 45
vector_functions     : 8
while                : 11

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . block
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . assignment
    (5) instruction -> . declaration
    (6) instruction -> . declaration_array
    (7) instruction -> . declaration_matrix
    (8) instruction -> . vector_functions
    (9) instruction -> . interface
    (10) instruction -> . if_statement
    (11) instruction -> . while
    (12) instruction -> . for
    (13) instruction -> . foreach
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (66) assignment -> . ID EQUAL exp SEMICOLON
    (67) assignment -> . ID PLUS_EQUAL exp SEMICOLON
    (68) assignment -> . ID MINUS_EQUAL exp SEMICOLON
    (69) assignment -> . ID index_list EQUAL exp SEMICOLON
    (61) declaration -> . CONST ID COLON type EQUAL exp SEMICOLON
    (62) declaration -> . CONST ID EQUAL exp SEMICOLON
    (63) declaration -> . VAR ID COLON type EQUAL exp SEMICOLON
    (64) declaration -> . VAR ID EQUAL exp SEMICOLON
    (65) declaration -> . VAR ID COLON type SEMICOLON
    (33) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (34) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON
    (35) declaration_array -> . CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (39) declaration_matrix -> . VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (40) declaration_matrix -> . CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (47) vector_functions -> . ID DOT PUSH LPAREN exp RPAREN SEMICOLON
    (30) interface -> . INTERFACE ID LBRACE interface_body RBRACE
    (18) if_statement -> . if
    (22) while -> . WHILE LPAREN exp RPAREN block
    (23) for -> . FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block
    (24) foreach -> . FOR LPAREN VAR ID OF ID RPAREN block
    (25) break -> . BREAK SEMICOLON
    (26) continue -> . CONTINUE SEMICOLON
    (27) return -> . RETURN exp SEMICOLON
    (28) return -> . RETURN SEMICOLON
    (29) print -> . CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON
    (19) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if
    (20) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE
    (21) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE

    ID              shift and go to state 18
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    INTERFACE       shift and go to state 21
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 27
    CONSOLE         shift and go to state 28
    IF              shift and go to state 29

    start                          shift and go to state 1
    block                          shift and go to state 2
    instruction                    shift and go to state 3
    assignment                     shift and go to state 4
    declaration                    shift and go to state 5
    declaration_array              shift and go to state 6
    declaration_matrix             shift and go to state 7
    vector_functions               shift and go to state 8
    interface                      shift and go to state 9
    if_statement                   shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    foreach                        shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    if                             shift and go to state 22

state 1

    (0) S' -> start .



state 2

    (1) start -> block .
    (2) block -> block . instruction
    (4) instruction -> . assignment
    (5) instruction -> . declaration
    (6) instruction -> . declaration_array
    (7) instruction -> . declaration_matrix
    (8) instruction -> . vector_functions
    (9) instruction -> . interface
    (10) instruction -> . if_statement
    (11) instruction -> . while
    (12) instruction -> . for
    (13) instruction -> . foreach
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (66) assignment -> . ID EQUAL exp SEMICOLON
    (67) assignment -> . ID PLUS_EQUAL exp SEMICOLON
    (68) assignment -> . ID MINUS_EQUAL exp SEMICOLON
    (69) assignment -> . ID index_list EQUAL exp SEMICOLON
    (61) declaration -> . CONST ID COLON type EQUAL exp SEMICOLON
    (62) declaration -> . CONST ID EQUAL exp SEMICOLON
    (63) declaration -> . VAR ID COLON type EQUAL exp SEMICOLON
    (64) declaration -> . VAR ID EQUAL exp SEMICOLON
    (65) declaration -> . VAR ID COLON type SEMICOLON
    (33) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (34) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON
    (35) declaration_array -> . CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (39) declaration_matrix -> . VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (40) declaration_matrix -> . CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (47) vector_functions -> . ID DOT PUSH LPAREN exp RPAREN SEMICOLON
    (30) interface -> . INTERFACE ID LBRACE interface_body RBRACE
    (18) if_statement -> . if
    (22) while -> . WHILE LPAREN exp RPAREN block
    (23) for -> . FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block
    (24) foreach -> . FOR LPAREN VAR ID OF ID RPAREN block
    (25) break -> . BREAK SEMICOLON
    (26) continue -> . CONTINUE SEMICOLON
    (27) return -> . RETURN exp SEMICOLON
    (28) return -> . RETURN SEMICOLON
    (29) print -> . CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON
    (19) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if
    (20) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE
    (21) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE

    $end            reduce using rule 1 (start -> block .)
    ID              shift and go to state 18
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    INTERFACE       shift and go to state 21
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 27
    CONSOLE         shift and go to state 28
    IF              shift and go to state 29

    instruction                    shift and go to state 30
    assignment                     shift and go to state 4
    declaration                    shift and go to state 5
    declaration_array              shift and go to state 6
    declaration_matrix             shift and go to state 7
    vector_functions               shift and go to state 8
    interface                      shift and go to state 9
    if_statement                   shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    foreach                        shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    if                             shift and go to state 22

state 3

    (3) block -> instruction .

    ID              reduce using rule 3 (block -> instruction .)
    CONST           reduce using rule 3 (block -> instruction .)
    VAR             reduce using rule 3 (block -> instruction .)
    INTERFACE       reduce using rule 3 (block -> instruction .)
    WHILE           reduce using rule 3 (block -> instruction .)
    FOR             reduce using rule 3 (block -> instruction .)
    BREAK           reduce using rule 3 (block -> instruction .)
    CONTINUE        reduce using rule 3 (block -> instruction .)
    RETURN          reduce using rule 3 (block -> instruction .)
    CONSOLE         reduce using rule 3 (block -> instruction .)
    IF              reduce using rule 3 (block -> instruction .)
    $end            reduce using rule 3 (block -> instruction .)
    RBRACE          reduce using rule 3 (block -> instruction .)


state 4

    (4) instruction -> assignment .

    ID              reduce using rule 4 (instruction -> assignment .)
    CONST           reduce using rule 4 (instruction -> assignment .)
    VAR             reduce using rule 4 (instruction -> assignment .)
    INTERFACE       reduce using rule 4 (instruction -> assignment .)
    WHILE           reduce using rule 4 (instruction -> assignment .)
    FOR             reduce using rule 4 (instruction -> assignment .)
    BREAK           reduce using rule 4 (instruction -> assignment .)
    CONTINUE        reduce using rule 4 (instruction -> assignment .)
    RETURN          reduce using rule 4 (instruction -> assignment .)
    CONSOLE         reduce using rule 4 (instruction -> assignment .)
    IF              reduce using rule 4 (instruction -> assignment .)
    $end            reduce using rule 4 (instruction -> assignment .)
    RBRACE          reduce using rule 4 (instruction -> assignment .)


state 5

    (5) instruction -> declaration .

    ID              reduce using rule 5 (instruction -> declaration .)
    CONST           reduce using rule 5 (instruction -> declaration .)
    VAR             reduce using rule 5 (instruction -> declaration .)
    INTERFACE       reduce using rule 5 (instruction -> declaration .)
    WHILE           reduce using rule 5 (instruction -> declaration .)
    FOR             reduce using rule 5 (instruction -> declaration .)
    BREAK           reduce using rule 5 (instruction -> declaration .)
    CONTINUE        reduce using rule 5 (instruction -> declaration .)
    RETURN          reduce using rule 5 (instruction -> declaration .)
    CONSOLE         reduce using rule 5 (instruction -> declaration .)
    IF              reduce using rule 5 (instruction -> declaration .)
    $end            reduce using rule 5 (instruction -> declaration .)
    RBRACE          reduce using rule 5 (instruction -> declaration .)


state 6

    (6) instruction -> declaration_array .

    ID              reduce using rule 6 (instruction -> declaration_array .)
    CONST           reduce using rule 6 (instruction -> declaration_array .)
    VAR             reduce using rule 6 (instruction -> declaration_array .)
    INTERFACE       reduce using rule 6 (instruction -> declaration_array .)
    WHILE           reduce using rule 6 (instruction -> declaration_array .)
    FOR             reduce using rule 6 (instruction -> declaration_array .)
    BREAK           reduce using rule 6 (instruction -> declaration_array .)
    CONTINUE        reduce using rule 6 (instruction -> declaration_array .)
    RETURN          reduce using rule 6 (instruction -> declaration_array .)
    CONSOLE         reduce using rule 6 (instruction -> declaration_array .)
    IF              reduce using rule 6 (instruction -> declaration_array .)
    $end            reduce using rule 6 (instruction -> declaration_array .)
    RBRACE          reduce using rule 6 (instruction -> declaration_array .)


state 7

    (7) instruction -> declaration_matrix .

    ID              reduce using rule 7 (instruction -> declaration_matrix .)
    CONST           reduce using rule 7 (instruction -> declaration_matrix .)
    VAR             reduce using rule 7 (instruction -> declaration_matrix .)
    INTERFACE       reduce using rule 7 (instruction -> declaration_matrix .)
    WHILE           reduce using rule 7 (instruction -> declaration_matrix .)
    FOR             reduce using rule 7 (instruction -> declaration_matrix .)
    BREAK           reduce using rule 7 (instruction -> declaration_matrix .)
    CONTINUE        reduce using rule 7 (instruction -> declaration_matrix .)
    RETURN          reduce using rule 7 (instruction -> declaration_matrix .)
    CONSOLE         reduce using rule 7 (instruction -> declaration_matrix .)
    IF              reduce using rule 7 (instruction -> declaration_matrix .)
    $end            reduce using rule 7 (instruction -> declaration_matrix .)
    RBRACE          reduce using rule 7 (instruction -> declaration_matrix .)


state 8

    (8) instruction -> vector_functions .

    ID              reduce using rule 8 (instruction -> vector_functions .)
    CONST           reduce using rule 8 (instruction -> vector_functions .)
    VAR             reduce using rule 8 (instruction -> vector_functions .)
    INTERFACE       reduce using rule 8 (instruction -> vector_functions .)
    WHILE           reduce using rule 8 (instruction -> vector_functions .)
    FOR             reduce using rule 8 (instruction -> vector_functions .)
    BREAK           reduce using rule 8 (instruction -> vector_functions .)
    CONTINUE        reduce using rule 8 (instruction -> vector_functions .)
    RETURN          reduce using rule 8 (instruction -> vector_functions .)
    CONSOLE         reduce using rule 8 (instruction -> vector_functions .)
    IF              reduce using rule 8 (instruction -> vector_functions .)
    $end            reduce using rule 8 (instruction -> vector_functions .)
    RBRACE          reduce using rule 8 (instruction -> vector_functions .)


state 9

    (9) instruction -> interface .

    ID              reduce using rule 9 (instruction -> interface .)
    CONST           reduce using rule 9 (instruction -> interface .)
    VAR             reduce using rule 9 (instruction -> interface .)
    INTERFACE       reduce using rule 9 (instruction -> interface .)
    WHILE           reduce using rule 9 (instruction -> interface .)
    FOR             reduce using rule 9 (instruction -> interface .)
    BREAK           reduce using rule 9 (instruction -> interface .)
    CONTINUE        reduce using rule 9 (instruction -> interface .)
    RETURN          reduce using rule 9 (instruction -> interface .)
    CONSOLE         reduce using rule 9 (instruction -> interface .)
    IF              reduce using rule 9 (instruction -> interface .)
    $end            reduce using rule 9 (instruction -> interface .)
    RBRACE          reduce using rule 9 (instruction -> interface .)


state 10

    (10) instruction -> if_statement .

    ID              reduce using rule 10 (instruction -> if_statement .)
    CONST           reduce using rule 10 (instruction -> if_statement .)
    VAR             reduce using rule 10 (instruction -> if_statement .)
    INTERFACE       reduce using rule 10 (instruction -> if_statement .)
    WHILE           reduce using rule 10 (instruction -> if_statement .)
    FOR             reduce using rule 10 (instruction -> if_statement .)
    BREAK           reduce using rule 10 (instruction -> if_statement .)
    CONTINUE        reduce using rule 10 (instruction -> if_statement .)
    RETURN          reduce using rule 10 (instruction -> if_statement .)
    CONSOLE         reduce using rule 10 (instruction -> if_statement .)
    IF              reduce using rule 10 (instruction -> if_statement .)
    $end            reduce using rule 10 (instruction -> if_statement .)
    RBRACE          reduce using rule 10 (instruction -> if_statement .)


state 11

    (11) instruction -> while .

    ID              reduce using rule 11 (instruction -> while .)
    CONST           reduce using rule 11 (instruction -> while .)
    VAR             reduce using rule 11 (instruction -> while .)
    INTERFACE       reduce using rule 11 (instruction -> while .)
    WHILE           reduce using rule 11 (instruction -> while .)
    FOR             reduce using rule 11 (instruction -> while .)
    BREAK           reduce using rule 11 (instruction -> while .)
    CONTINUE        reduce using rule 11 (instruction -> while .)
    RETURN          reduce using rule 11 (instruction -> while .)
    CONSOLE         reduce using rule 11 (instruction -> while .)
    IF              reduce using rule 11 (instruction -> while .)
    $end            reduce using rule 11 (instruction -> while .)
    RBRACE          reduce using rule 11 (instruction -> while .)


state 12

    (12) instruction -> for .

    ID              reduce using rule 12 (instruction -> for .)
    CONST           reduce using rule 12 (instruction -> for .)
    VAR             reduce using rule 12 (instruction -> for .)
    INTERFACE       reduce using rule 12 (instruction -> for .)
    WHILE           reduce using rule 12 (instruction -> for .)
    FOR             reduce using rule 12 (instruction -> for .)
    BREAK           reduce using rule 12 (instruction -> for .)
    CONTINUE        reduce using rule 12 (instruction -> for .)
    RETURN          reduce using rule 12 (instruction -> for .)
    CONSOLE         reduce using rule 12 (instruction -> for .)
    IF              reduce using rule 12 (instruction -> for .)
    $end            reduce using rule 12 (instruction -> for .)
    RBRACE          reduce using rule 12 (instruction -> for .)


state 13

    (13) instruction -> foreach .

    ID              reduce using rule 13 (instruction -> foreach .)
    CONST           reduce using rule 13 (instruction -> foreach .)
    VAR             reduce using rule 13 (instruction -> foreach .)
    INTERFACE       reduce using rule 13 (instruction -> foreach .)
    WHILE           reduce using rule 13 (instruction -> foreach .)
    FOR             reduce using rule 13 (instruction -> foreach .)
    BREAK           reduce using rule 13 (instruction -> foreach .)
    CONTINUE        reduce using rule 13 (instruction -> foreach .)
    RETURN          reduce using rule 13 (instruction -> foreach .)
    CONSOLE         reduce using rule 13 (instruction -> foreach .)
    IF              reduce using rule 13 (instruction -> foreach .)
    $end            reduce using rule 13 (instruction -> foreach .)
    RBRACE          reduce using rule 13 (instruction -> foreach .)


state 14

    (14) instruction -> break .

    ID              reduce using rule 14 (instruction -> break .)
    CONST           reduce using rule 14 (instruction -> break .)
    VAR             reduce using rule 14 (instruction -> break .)
    INTERFACE       reduce using rule 14 (instruction -> break .)
    WHILE           reduce using rule 14 (instruction -> break .)
    FOR             reduce using rule 14 (instruction -> break .)
    BREAK           reduce using rule 14 (instruction -> break .)
    CONTINUE        reduce using rule 14 (instruction -> break .)
    RETURN          reduce using rule 14 (instruction -> break .)
    CONSOLE         reduce using rule 14 (instruction -> break .)
    IF              reduce using rule 14 (instruction -> break .)
    $end            reduce using rule 14 (instruction -> break .)
    RBRACE          reduce using rule 14 (instruction -> break .)


state 15

    (15) instruction -> continue .

    ID              reduce using rule 15 (instruction -> continue .)
    CONST           reduce using rule 15 (instruction -> continue .)
    VAR             reduce using rule 15 (instruction -> continue .)
    INTERFACE       reduce using rule 15 (instruction -> continue .)
    WHILE           reduce using rule 15 (instruction -> continue .)
    FOR             reduce using rule 15 (instruction -> continue .)
    BREAK           reduce using rule 15 (instruction -> continue .)
    CONTINUE        reduce using rule 15 (instruction -> continue .)
    RETURN          reduce using rule 15 (instruction -> continue .)
    CONSOLE         reduce using rule 15 (instruction -> continue .)
    IF              reduce using rule 15 (instruction -> continue .)
    $end            reduce using rule 15 (instruction -> continue .)
    RBRACE          reduce using rule 15 (instruction -> continue .)


state 16

    (16) instruction -> return .

    ID              reduce using rule 16 (instruction -> return .)
    CONST           reduce using rule 16 (instruction -> return .)
    VAR             reduce using rule 16 (instruction -> return .)
    INTERFACE       reduce using rule 16 (instruction -> return .)
    WHILE           reduce using rule 16 (instruction -> return .)
    FOR             reduce using rule 16 (instruction -> return .)
    BREAK           reduce using rule 16 (instruction -> return .)
    CONTINUE        reduce using rule 16 (instruction -> return .)
    RETURN          reduce using rule 16 (instruction -> return .)
    CONSOLE         reduce using rule 16 (instruction -> return .)
    IF              reduce using rule 16 (instruction -> return .)
    $end            reduce using rule 16 (instruction -> return .)
    RBRACE          reduce using rule 16 (instruction -> return .)


state 17

    (17) instruction -> print .

    ID              reduce using rule 17 (instruction -> print .)
    CONST           reduce using rule 17 (instruction -> print .)
    VAR             reduce using rule 17 (instruction -> print .)
    INTERFACE       reduce using rule 17 (instruction -> print .)
    WHILE           reduce using rule 17 (instruction -> print .)
    FOR             reduce using rule 17 (instruction -> print .)
    BREAK           reduce using rule 17 (instruction -> print .)
    CONTINUE        reduce using rule 17 (instruction -> print .)
    RETURN          reduce using rule 17 (instruction -> print .)
    CONSOLE         reduce using rule 17 (instruction -> print .)
    IF              reduce using rule 17 (instruction -> print .)
    $end            reduce using rule 17 (instruction -> print .)
    RBRACE          reduce using rule 17 (instruction -> print .)


state 18

    (66) assignment -> ID . EQUAL exp SEMICOLON
    (67) assignment -> ID . PLUS_EQUAL exp SEMICOLON
    (68) assignment -> ID . MINUS_EQUAL exp SEMICOLON
    (69) assignment -> ID . index_list EQUAL exp SEMICOLON
    (47) vector_functions -> ID . DOT PUSH LPAREN exp RPAREN SEMICOLON
    (70) index_list -> . index_list LBRACKET exp RBRACKET
    (71) index_list -> . LBRACKET exp RBRACKET

    EQUAL           shift and go to state 31
    PLUS_EQUAL      shift and go to state 32
    MINUS_EQUAL     shift and go to state 33
    DOT             shift and go to state 35
    LBRACKET        shift and go to state 36

    index_list                     shift and go to state 34

state 19

    (61) declaration -> CONST . ID COLON type EQUAL exp SEMICOLON
    (62) declaration -> CONST . ID EQUAL exp SEMICOLON
    (35) declaration_array -> CONST . ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (40) declaration_matrix -> CONST . ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON

    ID              shift and go to state 37


state 20

    (63) declaration -> VAR . ID COLON type EQUAL exp SEMICOLON
    (64) declaration -> VAR . ID EQUAL exp SEMICOLON
    (65) declaration -> VAR . ID COLON type SEMICOLON
    (33) declaration_array -> VAR . ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (34) declaration_array -> VAR . ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON
    (39) declaration_matrix -> VAR . ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON

    ID              shift and go to state 38


state 21

    (30) interface -> INTERFACE . ID LBRACE interface_body RBRACE

    ID              shift and go to state 39


state 22

    (18) if_statement -> if .

    ID              reduce using rule 18 (if_statement -> if .)
    CONST           reduce using rule 18 (if_statement -> if .)
    VAR             reduce using rule 18 (if_statement -> if .)
    INTERFACE       reduce using rule 18 (if_statement -> if .)
    WHILE           reduce using rule 18 (if_statement -> if .)
    FOR             reduce using rule 18 (if_statement -> if .)
    BREAK           reduce using rule 18 (if_statement -> if .)
    CONTINUE        reduce using rule 18 (if_statement -> if .)
    RETURN          reduce using rule 18 (if_statement -> if .)
    CONSOLE         reduce using rule 18 (if_statement -> if .)
    IF              reduce using rule 18 (if_statement -> if .)
    $end            reduce using rule 18 (if_statement -> if .)
    RBRACE          reduce using rule 18 (if_statement -> if .)


state 23

    (22) while -> WHILE . LPAREN exp RPAREN block

    LPAREN          shift and go to state 40


state 24

    (23) for -> FOR . LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block
    (24) foreach -> FOR . LPAREN VAR ID OF ID RPAREN block

    LPAREN          shift and go to state 41


state 25

    (25) break -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 42


state 26

    (26) continue -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 43


state 27

    (27) return -> RETURN . exp SEMICOLON
    (28) return -> RETURN . SEMICOLON
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    SEMICOLON       shift and go to state 45
    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 44
    list_access                    shift and go to state 58

state 28

    (29) print -> CONSOLE . DOT LOG LPAREN exp_list RPAREN SEMICOLON

    DOT             shift and go to state 59


state 29

    (19) if -> IF . LPAREN exp RPAREN LBRACE block RBRACE ELSE if
    (20) if -> IF . LPAREN exp RPAREN LBRACE block RBRACE
    (21) if -> IF . LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE

    LPAREN          shift and go to state 60


state 30

    (2) block -> block instruction .

    ID              reduce using rule 2 (block -> block instruction .)
    CONST           reduce using rule 2 (block -> block instruction .)
    VAR             reduce using rule 2 (block -> block instruction .)
    INTERFACE       reduce using rule 2 (block -> block instruction .)
    WHILE           reduce using rule 2 (block -> block instruction .)
    FOR             reduce using rule 2 (block -> block instruction .)
    BREAK           reduce using rule 2 (block -> block instruction .)
    CONTINUE        reduce using rule 2 (block -> block instruction .)
    RETURN          reduce using rule 2 (block -> block instruction .)
    CONSOLE         reduce using rule 2 (block -> block instruction .)
    IF              reduce using rule 2 (block -> block instruction .)
    $end            reduce using rule 2 (block -> block instruction .)
    RBRACE          reduce using rule 2 (block -> block instruction .)


state 31

    (66) assignment -> ID EQUAL . exp SEMICOLON
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 61
    list_access                    shift and go to state 58

state 32

    (67) assignment -> ID PLUS_EQUAL . exp SEMICOLON
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 62
    list_access                    shift and go to state 58

state 33

    (68) assignment -> ID MINUS_EQUAL . exp SEMICOLON
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 63
    list_access                    shift and go to state 58

state 34

    (69) assignment -> ID index_list . EQUAL exp SEMICOLON
    (70) index_list -> index_list . LBRACKET exp RBRACKET

    EQUAL           shift and go to state 64
    LBRACKET        shift and go to state 65


state 35

    (47) vector_functions -> ID DOT . PUSH LPAREN exp RPAREN SEMICOLON

    PUSH            shift and go to state 66


state 36

    (71) index_list -> LBRACKET . exp RBRACKET
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 67
    list_access                    shift and go to state 58

state 37

    (61) declaration -> CONST ID . COLON type EQUAL exp SEMICOLON
    (62) declaration -> CONST ID . EQUAL exp SEMICOLON
    (35) declaration_array -> CONST ID . COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (40) declaration_matrix -> CONST ID . COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON

    COLON           shift and go to state 68
    EQUAL           shift and go to state 69


state 38

    (63) declaration -> VAR ID . COLON type EQUAL exp SEMICOLON
    (64) declaration -> VAR ID . EQUAL exp SEMICOLON
    (65) declaration -> VAR ID . COLON type SEMICOLON
    (33) declaration_array -> VAR ID . COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (34) declaration_array -> VAR ID . COLON type LBRACKET RBRACKET EQUAL error SEMICOLON
    (39) declaration_matrix -> VAR ID . COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON

    COLON           shift and go to state 70
    EQUAL           shift and go to state 71


state 39

    (30) interface -> INTERFACE ID . LBRACE interface_body RBRACE

    LBRACE          shift and go to state 72


state 40

    (22) while -> WHILE LPAREN . exp RPAREN block
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 73
    list_access                    shift and go to state 58

state 41

    (23) for -> FOR LPAREN . declaration SEMICOLON exp SEMICOLON declaration RPAREN block
    (24) foreach -> FOR LPAREN . VAR ID OF ID RPAREN block
    (61) declaration -> . CONST ID COLON type EQUAL exp SEMICOLON
    (62) declaration -> . CONST ID EQUAL exp SEMICOLON
    (63) declaration -> . VAR ID COLON type EQUAL exp SEMICOLON
    (64) declaration -> . VAR ID EQUAL exp SEMICOLON
    (65) declaration -> . VAR ID COLON type SEMICOLON

    VAR             shift and go to state 75
    CONST           shift and go to state 76

    declaration                    shift and go to state 74

state 42

    (25) break -> BREAK SEMICOLON .

    ID              reduce using rule 25 (break -> BREAK SEMICOLON .)
    CONST           reduce using rule 25 (break -> BREAK SEMICOLON .)
    VAR             reduce using rule 25 (break -> BREAK SEMICOLON .)
    INTERFACE       reduce using rule 25 (break -> BREAK SEMICOLON .)
    WHILE           reduce using rule 25 (break -> BREAK SEMICOLON .)
    FOR             reduce using rule 25 (break -> BREAK SEMICOLON .)
    BREAK           reduce using rule 25 (break -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 25 (break -> BREAK SEMICOLON .)
    RETURN          reduce using rule 25 (break -> BREAK SEMICOLON .)
    CONSOLE         reduce using rule 25 (break -> BREAK SEMICOLON .)
    IF              reduce using rule 25 (break -> BREAK SEMICOLON .)
    $end            reduce using rule 25 (break -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 25 (break -> BREAK SEMICOLON .)


state 43

    (26) continue -> CONTINUE SEMICOLON .

    ID              reduce using rule 26 (continue -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 26 (continue -> CONTINUE SEMICOLON .)
    VAR             reduce using rule 26 (continue -> CONTINUE SEMICOLON .)
    INTERFACE       reduce using rule 26 (continue -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 26 (continue -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 26 (continue -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 26 (continue -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 26 (continue -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 26 (continue -> CONTINUE SEMICOLON .)
    CONSOLE         reduce using rule 26 (continue -> CONTINUE SEMICOLON .)
    IF              reduce using rule 26 (continue -> CONTINUE SEMICOLON .)
    $end            reduce using rule 26 (continue -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 26 (continue -> CONTINUE SEMICOLON .)


state 44

    (27) return -> RETURN exp . SEMICOLON
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       shift and go to state 77
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 45

    (28) return -> RETURN SEMICOLON .

    ID              reduce using rule 28 (return -> RETURN SEMICOLON .)
    CONST           reduce using rule 28 (return -> RETURN SEMICOLON .)
    VAR             reduce using rule 28 (return -> RETURN SEMICOLON .)
    INTERFACE       reduce using rule 28 (return -> RETURN SEMICOLON .)
    WHILE           reduce using rule 28 (return -> RETURN SEMICOLON .)
    FOR             reduce using rule 28 (return -> RETURN SEMICOLON .)
    BREAK           reduce using rule 28 (return -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 28 (return -> RETURN SEMICOLON .)
    RETURN          reduce using rule 28 (return -> RETURN SEMICOLON .)
    CONSOLE         reduce using rule 28 (return -> RETURN SEMICOLON .)
    IF              reduce using rule 28 (return -> RETURN SEMICOLON .)
    $end            reduce using rule 28 (return -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 28 (return -> RETURN SEMICOLON .)


state 46

    (48) exp -> ID . DOT POP LPAREN RPAREN
    (49) exp -> ID . DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> ID . DOT JOIN LPAREN RPAREN
    (51) exp -> ID . DOT LENGTH
    (55) exp -> ID . DOT TOSTRING LPAREN RPAREN
    (57) exp -> ID . DOT TOLOWERCASE LPAREN RPAREN
    (59) exp -> ID . DOT TOUPPERCASE LPAREN RPAREN
    (98) list_access -> ID .

  ! shift/reduce conflict for DOT resolved as shift
    DOT             shift and go to state 93
    LBRACKET        reduce using rule 98 (list_access -> ID .)
    SEMICOLON       reduce using rule 98 (list_access -> ID .)
    PLUS            reduce using rule 98 (list_access -> ID .)
    MINUS           reduce using rule 98 (list_access -> ID .)
    TIMES           reduce using rule 98 (list_access -> ID .)
    DIVIDE          reduce using rule 98 (list_access -> ID .)
    MOD             reduce using rule 98 (list_access -> ID .)
    COMPARASION     reduce using rule 98 (list_access -> ID .)
    DIFFERENT       reduce using rule 98 (list_access -> ID .)
    GREATER         reduce using rule 98 (list_access -> ID .)
    LESS            reduce using rule 98 (list_access -> ID .)
    GREATER_EQUAL   reduce using rule 98 (list_access -> ID .)
    LESS_EQUAL      reduce using rule 98 (list_access -> ID .)
    AND             reduce using rule 98 (list_access -> ID .)
    OR              reduce using rule 98 (list_access -> ID .)
    QUESTION        reduce using rule 98 (list_access -> ID .)
    RBRACKET        reduce using rule 98 (list_access -> ID .)
    RPAREN          reduce using rule 98 (list_access -> ID .)
    COLON           reduce using rule 98 (list_access -> ID .)
    COMMA           reduce using rule 98 (list_access -> ID .)

  ! DOT             [ reduce using rule 98 (list_access -> ID .) ]


state 47

    (99) exp -> LPAREN . exp RPAREN
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 94
    list_access                    shift and go to state 58

state 48

    (52) exp -> PARSEINT . LPAREN exp RPAREN

    LPAREN          shift and go to state 95


state 49

    (53) exp -> PARSEFLOAT . LPAREN exp RPAREN

    LPAREN          shift and go to state 96


state 50

    (60) exp -> TYPEOF . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 97
    list_access                    shift and go to state 58

state 51

    (80) exp -> MINUS . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 98
    list_access                    shift and go to state 58

state 52

    (81) exp -> NOT . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 99
    list_access                    shift and go to state 58

state 53

    (90) exp -> NUMBER_LEX .

    SEMICOLON       reduce using rule 90 (exp -> NUMBER_LEX .)
    DOT             reduce using rule 90 (exp -> NUMBER_LEX .)
    PLUS            reduce using rule 90 (exp -> NUMBER_LEX .)
    MINUS           reduce using rule 90 (exp -> NUMBER_LEX .)
    TIMES           reduce using rule 90 (exp -> NUMBER_LEX .)
    DIVIDE          reduce using rule 90 (exp -> NUMBER_LEX .)
    MOD             reduce using rule 90 (exp -> NUMBER_LEX .)
    COMPARASION     reduce using rule 90 (exp -> NUMBER_LEX .)
    DIFFERENT       reduce using rule 90 (exp -> NUMBER_LEX .)
    GREATER         reduce using rule 90 (exp -> NUMBER_LEX .)
    LESS            reduce using rule 90 (exp -> NUMBER_LEX .)
    GREATER_EQUAL   reduce using rule 90 (exp -> NUMBER_LEX .)
    LESS_EQUAL      reduce using rule 90 (exp -> NUMBER_LEX .)
    AND             reduce using rule 90 (exp -> NUMBER_LEX .)
    OR              reduce using rule 90 (exp -> NUMBER_LEX .)
    QUESTION        reduce using rule 90 (exp -> NUMBER_LEX .)
    RBRACKET        reduce using rule 90 (exp -> NUMBER_LEX .)
    RPAREN          reduce using rule 90 (exp -> NUMBER_LEX .)
    COLON           reduce using rule 90 (exp -> NUMBER_LEX .)
    COMMA           reduce using rule 90 (exp -> NUMBER_LEX .)


state 54

    (91) exp -> FLOAT_LEX .

    SEMICOLON       reduce using rule 91 (exp -> FLOAT_LEX .)
    DOT             reduce using rule 91 (exp -> FLOAT_LEX .)
    PLUS            reduce using rule 91 (exp -> FLOAT_LEX .)
    MINUS           reduce using rule 91 (exp -> FLOAT_LEX .)
    TIMES           reduce using rule 91 (exp -> FLOAT_LEX .)
    DIVIDE          reduce using rule 91 (exp -> FLOAT_LEX .)
    MOD             reduce using rule 91 (exp -> FLOAT_LEX .)
    COMPARASION     reduce using rule 91 (exp -> FLOAT_LEX .)
    DIFFERENT       reduce using rule 91 (exp -> FLOAT_LEX .)
    GREATER         reduce using rule 91 (exp -> FLOAT_LEX .)
    LESS            reduce using rule 91 (exp -> FLOAT_LEX .)
    GREATER_EQUAL   reduce using rule 91 (exp -> FLOAT_LEX .)
    LESS_EQUAL      reduce using rule 91 (exp -> FLOAT_LEX .)
    AND             reduce using rule 91 (exp -> FLOAT_LEX .)
    OR              reduce using rule 91 (exp -> FLOAT_LEX .)
    QUESTION        reduce using rule 91 (exp -> FLOAT_LEX .)
    RBRACKET        reduce using rule 91 (exp -> FLOAT_LEX .)
    RPAREN          reduce using rule 91 (exp -> FLOAT_LEX .)
    COLON           reduce using rule 91 (exp -> FLOAT_LEX .)
    COMMA           reduce using rule 91 (exp -> FLOAT_LEX .)


state 55

    (92) exp -> STRING_LEX .

    SEMICOLON       reduce using rule 92 (exp -> STRING_LEX .)
    DOT             reduce using rule 92 (exp -> STRING_LEX .)
    PLUS            reduce using rule 92 (exp -> STRING_LEX .)
    MINUS           reduce using rule 92 (exp -> STRING_LEX .)
    TIMES           reduce using rule 92 (exp -> STRING_LEX .)
    DIVIDE          reduce using rule 92 (exp -> STRING_LEX .)
    MOD             reduce using rule 92 (exp -> STRING_LEX .)
    COMPARASION     reduce using rule 92 (exp -> STRING_LEX .)
    DIFFERENT       reduce using rule 92 (exp -> STRING_LEX .)
    GREATER         reduce using rule 92 (exp -> STRING_LEX .)
    LESS            reduce using rule 92 (exp -> STRING_LEX .)
    GREATER_EQUAL   reduce using rule 92 (exp -> STRING_LEX .)
    LESS_EQUAL      reduce using rule 92 (exp -> STRING_LEX .)
    AND             reduce using rule 92 (exp -> STRING_LEX .)
    OR              reduce using rule 92 (exp -> STRING_LEX .)
    QUESTION        reduce using rule 92 (exp -> STRING_LEX .)
    RBRACKET        reduce using rule 92 (exp -> STRING_LEX .)
    RPAREN          reduce using rule 92 (exp -> STRING_LEX .)
    COLON           reduce using rule 92 (exp -> STRING_LEX .)
    COMMA           reduce using rule 92 (exp -> STRING_LEX .)


state 56

    (93) exp -> CHAR_LEX .

    SEMICOLON       reduce using rule 93 (exp -> CHAR_LEX .)
    DOT             reduce using rule 93 (exp -> CHAR_LEX .)
    PLUS            reduce using rule 93 (exp -> CHAR_LEX .)
    MINUS           reduce using rule 93 (exp -> CHAR_LEX .)
    TIMES           reduce using rule 93 (exp -> CHAR_LEX .)
    DIVIDE          reduce using rule 93 (exp -> CHAR_LEX .)
    MOD             reduce using rule 93 (exp -> CHAR_LEX .)
    COMPARASION     reduce using rule 93 (exp -> CHAR_LEX .)
    DIFFERENT       reduce using rule 93 (exp -> CHAR_LEX .)
    GREATER         reduce using rule 93 (exp -> CHAR_LEX .)
    LESS            reduce using rule 93 (exp -> CHAR_LEX .)
    GREATER_EQUAL   reduce using rule 93 (exp -> CHAR_LEX .)
    LESS_EQUAL      reduce using rule 93 (exp -> CHAR_LEX .)
    AND             reduce using rule 93 (exp -> CHAR_LEX .)
    OR              reduce using rule 93 (exp -> CHAR_LEX .)
    QUESTION        reduce using rule 93 (exp -> CHAR_LEX .)
    RBRACKET        reduce using rule 93 (exp -> CHAR_LEX .)
    RPAREN          reduce using rule 93 (exp -> CHAR_LEX .)
    COLON           reduce using rule 93 (exp -> CHAR_LEX .)
    COMMA           reduce using rule 93 (exp -> CHAR_LEX .)


state 57

    (94) exp -> BOOLEAN .

    SEMICOLON       reduce using rule 94 (exp -> BOOLEAN .)
    DOT             reduce using rule 94 (exp -> BOOLEAN .)
    PLUS            reduce using rule 94 (exp -> BOOLEAN .)
    MINUS           reduce using rule 94 (exp -> BOOLEAN .)
    TIMES           reduce using rule 94 (exp -> BOOLEAN .)
    DIVIDE          reduce using rule 94 (exp -> BOOLEAN .)
    MOD             reduce using rule 94 (exp -> BOOLEAN .)
    COMPARASION     reduce using rule 94 (exp -> BOOLEAN .)
    DIFFERENT       reduce using rule 94 (exp -> BOOLEAN .)
    GREATER         reduce using rule 94 (exp -> BOOLEAN .)
    LESS            reduce using rule 94 (exp -> BOOLEAN .)
    GREATER_EQUAL   reduce using rule 94 (exp -> BOOLEAN .)
    LESS_EQUAL      reduce using rule 94 (exp -> BOOLEAN .)
    AND             reduce using rule 94 (exp -> BOOLEAN .)
    OR              reduce using rule 94 (exp -> BOOLEAN .)
    QUESTION        reduce using rule 94 (exp -> BOOLEAN .)
    RBRACKET        reduce using rule 94 (exp -> BOOLEAN .)
    RPAREN          reduce using rule 94 (exp -> BOOLEAN .)
    COLON           reduce using rule 94 (exp -> BOOLEAN .)
    COMMA           reduce using rule 94 (exp -> BOOLEAN .)


state 58

    (95) exp -> list_access .
    (96) list_access -> list_access . LBRACKET exp RBRACKET
    (97) list_access -> list_access . DOT ID

  ! shift/reduce conflict for DOT resolved as shift
    SEMICOLON       reduce using rule 95 (exp -> list_access .)
    PLUS            reduce using rule 95 (exp -> list_access .)
    MINUS           reduce using rule 95 (exp -> list_access .)
    TIMES           reduce using rule 95 (exp -> list_access .)
    DIVIDE          reduce using rule 95 (exp -> list_access .)
    MOD             reduce using rule 95 (exp -> list_access .)
    COMPARASION     reduce using rule 95 (exp -> list_access .)
    DIFFERENT       reduce using rule 95 (exp -> list_access .)
    GREATER         reduce using rule 95 (exp -> list_access .)
    LESS            reduce using rule 95 (exp -> list_access .)
    GREATER_EQUAL   reduce using rule 95 (exp -> list_access .)
    LESS_EQUAL      reduce using rule 95 (exp -> list_access .)
    AND             reduce using rule 95 (exp -> list_access .)
    OR              reduce using rule 95 (exp -> list_access .)
    QUESTION        reduce using rule 95 (exp -> list_access .)
    RBRACKET        reduce using rule 95 (exp -> list_access .)
    RPAREN          reduce using rule 95 (exp -> list_access .)
    COLON           reduce using rule 95 (exp -> list_access .)
    COMMA           reduce using rule 95 (exp -> list_access .)
    LBRACKET        shift and go to state 100
    DOT             shift and go to state 101

  ! DOT             [ reduce using rule 95 (exp -> list_access .) ]


state 59

    (29) print -> CONSOLE DOT . LOG LPAREN exp_list RPAREN SEMICOLON

    LOG             shift and go to state 102


state 60

    (19) if -> IF LPAREN . exp RPAREN LBRACE block RBRACE ELSE if
    (20) if -> IF LPAREN . exp RPAREN LBRACE block RBRACE
    (21) if -> IF LPAREN . exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 103
    list_access                    shift and go to state 58

state 61

    (66) assignment -> ID EQUAL exp . SEMICOLON
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       shift and go to state 104
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 62

    (67) assignment -> ID PLUS_EQUAL exp . SEMICOLON
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       shift and go to state 105
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 63

    (68) assignment -> ID MINUS_EQUAL exp . SEMICOLON
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       shift and go to state 106
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 64

    (69) assignment -> ID index_list EQUAL . exp SEMICOLON
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 107
    list_access                    shift and go to state 58

state 65

    (70) index_list -> index_list LBRACKET . exp RBRACKET
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 108
    list_access                    shift and go to state 58

state 66

    (47) vector_functions -> ID DOT PUSH . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 109


state 67

    (71) index_list -> LBRACKET exp . RBRACKET
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    RBRACKET        shift and go to state 110
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 68

    (61) declaration -> CONST ID COLON . type EQUAL exp SEMICOLON
    (35) declaration_array -> CONST ID COLON . type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (40) declaration_matrix -> CONST ID COLON . type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (72) type -> . TYPES

    TYPES           shift and go to state 112

    type                           shift and go to state 111

state 69

    (62) declaration -> CONST ID EQUAL . exp SEMICOLON
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 113
    list_access                    shift and go to state 58

state 70

    (63) declaration -> VAR ID COLON . type EQUAL exp SEMICOLON
    (65) declaration -> VAR ID COLON . type SEMICOLON
    (33) declaration_array -> VAR ID COLON . type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (34) declaration_array -> VAR ID COLON . type LBRACKET RBRACKET EQUAL error SEMICOLON
    (39) declaration_matrix -> VAR ID COLON . type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (72) type -> . TYPES

    TYPES           shift and go to state 112

    type                           shift and go to state 114

state 71

    (64) declaration -> VAR ID EQUAL . exp SEMICOLON
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 115
    list_access                    shift and go to state 58

state 72

    (30) interface -> INTERFACE ID LBRACE . interface_body RBRACE
    (31) interface_body -> . interface_body SEMICOLON ID COLON type
    (32) interface_body -> . ID COLON type

    ID              shift and go to state 116

    interface_body                 shift and go to state 117

state 73

    (22) while -> WHILE LPAREN exp . RPAREN block
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    RPAREN          shift and go to state 118
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 74

    (23) for -> FOR LPAREN declaration . SEMICOLON exp SEMICOLON declaration RPAREN block

    SEMICOLON       shift and go to state 119


state 75

    (24) foreach -> FOR LPAREN VAR . ID OF ID RPAREN block
    (63) declaration -> VAR . ID COLON type EQUAL exp SEMICOLON
    (64) declaration -> VAR . ID EQUAL exp SEMICOLON
    (65) declaration -> VAR . ID COLON type SEMICOLON

    ID              shift and go to state 120


state 76

    (61) declaration -> CONST . ID COLON type EQUAL exp SEMICOLON
    (62) declaration -> CONST . ID EQUAL exp SEMICOLON

    ID              shift and go to state 121


state 77

    (27) return -> RETURN exp SEMICOLON .

    ID              reduce using rule 27 (return -> RETURN exp SEMICOLON .)
    CONST           reduce using rule 27 (return -> RETURN exp SEMICOLON .)
    VAR             reduce using rule 27 (return -> RETURN exp SEMICOLON .)
    INTERFACE       reduce using rule 27 (return -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 27 (return -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 27 (return -> RETURN exp SEMICOLON .)
    BREAK           reduce using rule 27 (return -> RETURN exp SEMICOLON .)
    CONTINUE        reduce using rule 27 (return -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 27 (return -> RETURN exp SEMICOLON .)
    CONSOLE         reduce using rule 27 (return -> RETURN exp SEMICOLON .)
    IF              reduce using rule 27 (return -> RETURN exp SEMICOLON .)
    $end            reduce using rule 27 (return -> RETURN exp SEMICOLON .)
    RBRACE          reduce using rule 27 (return -> RETURN exp SEMICOLON .)


state 78

    (54) exp -> exp DOT . TOSTRING LPAREN RPAREN
    (56) exp -> exp DOT . TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp DOT . TOUPPERCASE LPAREN RPAREN

    TOSTRING        shift and go to state 122
    TOLOWERCASE     shift and go to state 123
    TOUPPERCASE     shift and go to state 124


state 79

    (75) exp -> exp PLUS . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 125
    list_access                    shift and go to state 58

state 80

    (76) exp -> exp MINUS . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 126
    list_access                    shift and go to state 58

state 81

    (77) exp -> exp TIMES . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 127
    list_access                    shift and go to state 58

state 82

    (78) exp -> exp DIVIDE . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 128
    list_access                    shift and go to state 58

state 83

    (79) exp -> exp MOD . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 129
    list_access                    shift and go to state 58

state 84

    (82) exp -> exp COMPARASION . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 130
    list_access                    shift and go to state 58

state 85

    (83) exp -> exp DIFFERENT . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 131
    list_access                    shift and go to state 58

state 86

    (84) exp -> exp GREATER . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 132
    list_access                    shift and go to state 58

state 87

    (85) exp -> exp LESS . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 133
    list_access                    shift and go to state 58

state 88

    (86) exp -> exp GREATER_EQUAL . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 134
    list_access                    shift and go to state 58

state 89

    (87) exp -> exp LESS_EQUAL . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 135
    list_access                    shift and go to state 58

state 90

    (88) exp -> exp AND . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 136
    list_access                    shift and go to state 58

state 91

    (89) exp -> exp OR . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 137
    list_access                    shift and go to state 58

state 92

    (100) exp -> exp QUESTION . exp COLON exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 138
    list_access                    shift and go to state 58

state 93

    (48) exp -> ID DOT . POP LPAREN RPAREN
    (49) exp -> ID DOT . INDEXOF LPAREN exp RPAREN
    (50) exp -> ID DOT . JOIN LPAREN RPAREN
    (51) exp -> ID DOT . LENGTH
    (55) exp -> ID DOT . TOSTRING LPAREN RPAREN
    (57) exp -> ID DOT . TOLOWERCASE LPAREN RPAREN
    (59) exp -> ID DOT . TOUPPERCASE LPAREN RPAREN

    POP             shift and go to state 139
    INDEXOF         shift and go to state 140
    JOIN            shift and go to state 141
    LENGTH          shift and go to state 142
    TOSTRING        shift and go to state 143
    TOLOWERCASE     shift and go to state 144
    TOUPPERCASE     shift and go to state 145


state 94

    (99) exp -> LPAREN exp . RPAREN
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    RPAREN          shift and go to state 146
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 95

    (52) exp -> PARSEINT LPAREN . exp RPAREN
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 147
    list_access                    shift and go to state 58

state 96

    (53) exp -> PARSEFLOAT LPAREN . exp RPAREN
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 148
    list_access                    shift and go to state 58

state 97

    (60) exp -> TYPEOF exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for COMPARASION resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for QUESTION resolved as shift
    SEMICOLON       reduce using rule 60 (exp -> TYPEOF exp .)
    RBRACKET        reduce using rule 60 (exp -> TYPEOF exp .)
    RPAREN          reduce using rule 60 (exp -> TYPEOF exp .)
    COLON           reduce using rule 60 (exp -> TYPEOF exp .)
    COMMA           reduce using rule 60 (exp -> TYPEOF exp .)
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92

  ! DOT             [ reduce using rule 60 (exp -> TYPEOF exp .) ]
  ! PLUS            [ reduce using rule 60 (exp -> TYPEOF exp .) ]
  ! MINUS           [ reduce using rule 60 (exp -> TYPEOF exp .) ]
  ! TIMES           [ reduce using rule 60 (exp -> TYPEOF exp .) ]
  ! DIVIDE          [ reduce using rule 60 (exp -> TYPEOF exp .) ]
  ! MOD             [ reduce using rule 60 (exp -> TYPEOF exp .) ]
  ! COMPARASION     [ reduce using rule 60 (exp -> TYPEOF exp .) ]
  ! DIFFERENT       [ reduce using rule 60 (exp -> TYPEOF exp .) ]
  ! GREATER         [ reduce using rule 60 (exp -> TYPEOF exp .) ]
  ! LESS            [ reduce using rule 60 (exp -> TYPEOF exp .) ]
  ! GREATER_EQUAL   [ reduce using rule 60 (exp -> TYPEOF exp .) ]
  ! LESS_EQUAL      [ reduce using rule 60 (exp -> TYPEOF exp .) ]
  ! AND             [ reduce using rule 60 (exp -> TYPEOF exp .) ]
  ! OR              [ reduce using rule 60 (exp -> TYPEOF exp .) ]
  ! QUESTION        [ reduce using rule 60 (exp -> TYPEOF exp .) ]


state 98

    (80) exp -> MINUS exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 80 (exp -> MINUS exp .)
    DOT             reduce using rule 80 (exp -> MINUS exp .)
    PLUS            reduce using rule 80 (exp -> MINUS exp .)
    MINUS           reduce using rule 80 (exp -> MINUS exp .)
    TIMES           reduce using rule 80 (exp -> MINUS exp .)
    DIVIDE          reduce using rule 80 (exp -> MINUS exp .)
    MOD             reduce using rule 80 (exp -> MINUS exp .)
    COMPARASION     reduce using rule 80 (exp -> MINUS exp .)
    DIFFERENT       reduce using rule 80 (exp -> MINUS exp .)
    GREATER         reduce using rule 80 (exp -> MINUS exp .)
    LESS            reduce using rule 80 (exp -> MINUS exp .)
    GREATER_EQUAL   reduce using rule 80 (exp -> MINUS exp .)
    LESS_EQUAL      reduce using rule 80 (exp -> MINUS exp .)
    AND             reduce using rule 80 (exp -> MINUS exp .)
    OR              reduce using rule 80 (exp -> MINUS exp .)
    QUESTION        reduce using rule 80 (exp -> MINUS exp .)
    RBRACKET        reduce using rule 80 (exp -> MINUS exp .)
    RPAREN          reduce using rule 80 (exp -> MINUS exp .)
    COLON           reduce using rule 80 (exp -> MINUS exp .)
    COMMA           reduce using rule 80 (exp -> MINUS exp .)

  ! DOT             [ shift and go to state 78 ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! TIMES           [ shift and go to state 81 ]
  ! DIVIDE          [ shift and go to state 82 ]
  ! MOD             [ shift and go to state 83 ]
  ! COMPARASION     [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]
  ! GREATER         [ shift and go to state 86 ]
  ! LESS            [ shift and go to state 87 ]
  ! GREATER_EQUAL   [ shift and go to state 88 ]
  ! LESS_EQUAL      [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]
  ! QUESTION        [ shift and go to state 92 ]


state 99

    (81) exp -> NOT exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 81 (exp -> NOT exp .)
    DOT             reduce using rule 81 (exp -> NOT exp .)
    PLUS            reduce using rule 81 (exp -> NOT exp .)
    MINUS           reduce using rule 81 (exp -> NOT exp .)
    TIMES           reduce using rule 81 (exp -> NOT exp .)
    DIVIDE          reduce using rule 81 (exp -> NOT exp .)
    MOD             reduce using rule 81 (exp -> NOT exp .)
    COMPARASION     reduce using rule 81 (exp -> NOT exp .)
    DIFFERENT       reduce using rule 81 (exp -> NOT exp .)
    GREATER         reduce using rule 81 (exp -> NOT exp .)
    LESS            reduce using rule 81 (exp -> NOT exp .)
    GREATER_EQUAL   reduce using rule 81 (exp -> NOT exp .)
    LESS_EQUAL      reduce using rule 81 (exp -> NOT exp .)
    AND             reduce using rule 81 (exp -> NOT exp .)
    OR              reduce using rule 81 (exp -> NOT exp .)
    QUESTION        reduce using rule 81 (exp -> NOT exp .)
    RBRACKET        reduce using rule 81 (exp -> NOT exp .)
    RPAREN          reduce using rule 81 (exp -> NOT exp .)
    COLON           reduce using rule 81 (exp -> NOT exp .)
    COMMA           reduce using rule 81 (exp -> NOT exp .)

  ! DOT             [ shift and go to state 78 ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! TIMES           [ shift and go to state 81 ]
  ! DIVIDE          [ shift and go to state 82 ]
  ! MOD             [ shift and go to state 83 ]
  ! COMPARASION     [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]
  ! GREATER         [ shift and go to state 86 ]
  ! LESS            [ shift and go to state 87 ]
  ! GREATER_EQUAL   [ shift and go to state 88 ]
  ! LESS_EQUAL      [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]
  ! QUESTION        [ shift and go to state 92 ]


state 100

    (96) list_access -> list_access LBRACKET . exp RBRACKET
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    list_access                    shift and go to state 58
    exp                            shift and go to state 149

state 101

    (97) list_access -> list_access DOT . ID

    ID              shift and go to state 150


state 102

    (29) print -> CONSOLE DOT LOG . LPAREN exp_list RPAREN SEMICOLON

    LPAREN          shift and go to state 151


state 103

    (19) if -> IF LPAREN exp . RPAREN LBRACE block RBRACE ELSE if
    (20) if -> IF LPAREN exp . RPAREN LBRACE block RBRACE
    (21) if -> IF LPAREN exp . RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    RPAREN          shift and go to state 152
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 104

    (66) assignment -> ID EQUAL exp SEMICOLON .

    ID              reduce using rule 66 (assignment -> ID EQUAL exp SEMICOLON .)
    CONST           reduce using rule 66 (assignment -> ID EQUAL exp SEMICOLON .)
    VAR             reduce using rule 66 (assignment -> ID EQUAL exp SEMICOLON .)
    INTERFACE       reduce using rule 66 (assignment -> ID EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 66 (assignment -> ID EQUAL exp SEMICOLON .)
    FOR             reduce using rule 66 (assignment -> ID EQUAL exp SEMICOLON .)
    BREAK           reduce using rule 66 (assignment -> ID EQUAL exp SEMICOLON .)
    CONTINUE        reduce using rule 66 (assignment -> ID EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 66 (assignment -> ID EQUAL exp SEMICOLON .)
    CONSOLE         reduce using rule 66 (assignment -> ID EQUAL exp SEMICOLON .)
    IF              reduce using rule 66 (assignment -> ID EQUAL exp SEMICOLON .)
    $end            reduce using rule 66 (assignment -> ID EQUAL exp SEMICOLON .)
    RBRACE          reduce using rule 66 (assignment -> ID EQUAL exp SEMICOLON .)


state 105

    (67) assignment -> ID PLUS_EQUAL exp SEMICOLON .

    ID              reduce using rule 67 (assignment -> ID PLUS_EQUAL exp SEMICOLON .)
    CONST           reduce using rule 67 (assignment -> ID PLUS_EQUAL exp SEMICOLON .)
    VAR             reduce using rule 67 (assignment -> ID PLUS_EQUAL exp SEMICOLON .)
    INTERFACE       reduce using rule 67 (assignment -> ID PLUS_EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 67 (assignment -> ID PLUS_EQUAL exp SEMICOLON .)
    FOR             reduce using rule 67 (assignment -> ID PLUS_EQUAL exp SEMICOLON .)
    BREAK           reduce using rule 67 (assignment -> ID PLUS_EQUAL exp SEMICOLON .)
    CONTINUE        reduce using rule 67 (assignment -> ID PLUS_EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 67 (assignment -> ID PLUS_EQUAL exp SEMICOLON .)
    CONSOLE         reduce using rule 67 (assignment -> ID PLUS_EQUAL exp SEMICOLON .)
    IF              reduce using rule 67 (assignment -> ID PLUS_EQUAL exp SEMICOLON .)
    $end            reduce using rule 67 (assignment -> ID PLUS_EQUAL exp SEMICOLON .)
    RBRACE          reduce using rule 67 (assignment -> ID PLUS_EQUAL exp SEMICOLON .)


state 106

    (68) assignment -> ID MINUS_EQUAL exp SEMICOLON .

    ID              reduce using rule 68 (assignment -> ID MINUS_EQUAL exp SEMICOLON .)
    CONST           reduce using rule 68 (assignment -> ID MINUS_EQUAL exp SEMICOLON .)
    VAR             reduce using rule 68 (assignment -> ID MINUS_EQUAL exp SEMICOLON .)
    INTERFACE       reduce using rule 68 (assignment -> ID MINUS_EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 68 (assignment -> ID MINUS_EQUAL exp SEMICOLON .)
    FOR             reduce using rule 68 (assignment -> ID MINUS_EQUAL exp SEMICOLON .)
    BREAK           reduce using rule 68 (assignment -> ID MINUS_EQUAL exp SEMICOLON .)
    CONTINUE        reduce using rule 68 (assignment -> ID MINUS_EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 68 (assignment -> ID MINUS_EQUAL exp SEMICOLON .)
    CONSOLE         reduce using rule 68 (assignment -> ID MINUS_EQUAL exp SEMICOLON .)
    IF              reduce using rule 68 (assignment -> ID MINUS_EQUAL exp SEMICOLON .)
    $end            reduce using rule 68 (assignment -> ID MINUS_EQUAL exp SEMICOLON .)
    RBRACE          reduce using rule 68 (assignment -> ID MINUS_EQUAL exp SEMICOLON .)


state 107

    (69) assignment -> ID index_list EQUAL exp . SEMICOLON
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       shift and go to state 153
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 108

    (70) index_list -> index_list LBRACKET exp . RBRACKET
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    RBRACKET        shift and go to state 154
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 109

    (47) vector_functions -> ID DOT PUSH LPAREN . exp RPAREN SEMICOLON
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 155
    list_access                    shift and go to state 58

state 110

    (71) index_list -> LBRACKET exp RBRACKET .

    EQUAL           reduce using rule 71 (index_list -> LBRACKET exp RBRACKET .)
    LBRACKET        reduce using rule 71 (index_list -> LBRACKET exp RBRACKET .)


state 111

    (61) declaration -> CONST ID COLON type . EQUAL exp SEMICOLON
    (35) declaration_array -> CONST ID COLON type . LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (40) declaration_matrix -> CONST ID COLON type . matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (41) matrix_dimension -> . matrix_dimension LBRACKET RBRACKET
    (42) matrix_dimension -> . LBRACKET RBRACKET LBRACKET RBRACKET

    EQUAL           shift and go to state 156
    LBRACKET        shift and go to state 157

    matrix_dimension               shift and go to state 158

state 112

    (72) type -> TYPES .

    EQUAL           reduce using rule 72 (type -> TYPES .)
    LBRACKET        reduce using rule 72 (type -> TYPES .)
    SEMICOLON       reduce using rule 72 (type -> TYPES .)
    RBRACE          reduce using rule 72 (type -> TYPES .)


state 113

    (62) declaration -> CONST ID EQUAL exp . SEMICOLON
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       shift and go to state 159
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 114

    (63) declaration -> VAR ID COLON type . EQUAL exp SEMICOLON
    (65) declaration -> VAR ID COLON type . SEMICOLON
    (33) declaration_array -> VAR ID COLON type . LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (34) declaration_array -> VAR ID COLON type . LBRACKET RBRACKET EQUAL error SEMICOLON
    (39) declaration_matrix -> VAR ID COLON type . matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (41) matrix_dimension -> . matrix_dimension LBRACKET RBRACKET
    (42) matrix_dimension -> . LBRACKET RBRACKET LBRACKET RBRACKET

    EQUAL           shift and go to state 160
    SEMICOLON       shift and go to state 161
    LBRACKET        shift and go to state 162

    matrix_dimension               shift and go to state 163

state 115

    (64) declaration -> VAR ID EQUAL exp . SEMICOLON
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       shift and go to state 164
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 116

    (32) interface_body -> ID . COLON type

    COLON           shift and go to state 165


state 117

    (30) interface -> INTERFACE ID LBRACE interface_body . RBRACE
    (31) interface_body -> interface_body . SEMICOLON ID COLON type

    RBRACE          shift and go to state 166
    SEMICOLON       shift and go to state 167


state 118

    (22) while -> WHILE LPAREN exp RPAREN . block
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . assignment
    (5) instruction -> . declaration
    (6) instruction -> . declaration_array
    (7) instruction -> . declaration_matrix
    (8) instruction -> . vector_functions
    (9) instruction -> . interface
    (10) instruction -> . if_statement
    (11) instruction -> . while
    (12) instruction -> . for
    (13) instruction -> . foreach
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (66) assignment -> . ID EQUAL exp SEMICOLON
    (67) assignment -> . ID PLUS_EQUAL exp SEMICOLON
    (68) assignment -> . ID MINUS_EQUAL exp SEMICOLON
    (69) assignment -> . ID index_list EQUAL exp SEMICOLON
    (61) declaration -> . CONST ID COLON type EQUAL exp SEMICOLON
    (62) declaration -> . CONST ID EQUAL exp SEMICOLON
    (63) declaration -> . VAR ID COLON type EQUAL exp SEMICOLON
    (64) declaration -> . VAR ID EQUAL exp SEMICOLON
    (65) declaration -> . VAR ID COLON type SEMICOLON
    (33) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (34) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON
    (35) declaration_array -> . CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (39) declaration_matrix -> . VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (40) declaration_matrix -> . CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (47) vector_functions -> . ID DOT PUSH LPAREN exp RPAREN SEMICOLON
    (30) interface -> . INTERFACE ID LBRACE interface_body RBRACE
    (18) if_statement -> . if
    (22) while -> . WHILE LPAREN exp RPAREN block
    (23) for -> . FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block
    (24) foreach -> . FOR LPAREN VAR ID OF ID RPAREN block
    (25) break -> . BREAK SEMICOLON
    (26) continue -> . CONTINUE SEMICOLON
    (27) return -> . RETURN exp SEMICOLON
    (28) return -> . RETURN SEMICOLON
    (29) print -> . CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON
    (19) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if
    (20) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE
    (21) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE

    ID              shift and go to state 18
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    INTERFACE       shift and go to state 21
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 27
    CONSOLE         shift and go to state 28
    IF              shift and go to state 29

    block                          shift and go to state 168
    instruction                    shift and go to state 3
    assignment                     shift and go to state 4
    declaration                    shift and go to state 5
    declaration_array              shift and go to state 6
    declaration_matrix             shift and go to state 7
    vector_functions               shift and go to state 8
    interface                      shift and go to state 9
    if_statement                   shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    foreach                        shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    if                             shift and go to state 22

state 119

    (23) for -> FOR LPAREN declaration SEMICOLON . exp SEMICOLON declaration RPAREN block
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 169
    list_access                    shift and go to state 58

state 120

    (24) foreach -> FOR LPAREN VAR ID . OF ID RPAREN block
    (63) declaration -> VAR ID . COLON type EQUAL exp SEMICOLON
    (64) declaration -> VAR ID . EQUAL exp SEMICOLON
    (65) declaration -> VAR ID . COLON type SEMICOLON

    OF              shift and go to state 170
    COLON           shift and go to state 171
    EQUAL           shift and go to state 71


state 121

    (61) declaration -> CONST ID . COLON type EQUAL exp SEMICOLON
    (62) declaration -> CONST ID . EQUAL exp SEMICOLON

    COLON           shift and go to state 172
    EQUAL           shift and go to state 69


state 122

    (54) exp -> exp DOT TOSTRING . LPAREN RPAREN

    LPAREN          shift and go to state 173


state 123

    (56) exp -> exp DOT TOLOWERCASE . LPAREN RPAREN

    LPAREN          shift and go to state 174


state 124

    (58) exp -> exp DOT TOUPPERCASE . LPAREN RPAREN

    LPAREN          shift and go to state 175


state 125

    (75) exp -> exp PLUS exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 75 (exp -> exp PLUS exp .)
    DOT             reduce using rule 75 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 75 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 75 (exp -> exp PLUS exp .)
    COMPARASION     reduce using rule 75 (exp -> exp PLUS exp .)
    DIFFERENT       reduce using rule 75 (exp -> exp PLUS exp .)
    GREATER         reduce using rule 75 (exp -> exp PLUS exp .)
    LESS            reduce using rule 75 (exp -> exp PLUS exp .)
    GREATER_EQUAL   reduce using rule 75 (exp -> exp PLUS exp .)
    LESS_EQUAL      reduce using rule 75 (exp -> exp PLUS exp .)
    AND             reduce using rule 75 (exp -> exp PLUS exp .)
    OR              reduce using rule 75 (exp -> exp PLUS exp .)
    QUESTION        reduce using rule 75 (exp -> exp PLUS exp .)
    RBRACKET        reduce using rule 75 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 75 (exp -> exp PLUS exp .)
    COLON           reduce using rule 75 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 75 (exp -> exp PLUS exp .)
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83

  ! TIMES           [ reduce using rule 75 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 75 (exp -> exp PLUS exp .) ]
  ! MOD             [ reduce using rule 75 (exp -> exp PLUS exp .) ]
  ! DOT             [ shift and go to state 78 ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! COMPARASION     [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]
  ! GREATER         [ shift and go to state 86 ]
  ! LESS            [ shift and go to state 87 ]
  ! GREATER_EQUAL   [ shift and go to state 88 ]
  ! LESS_EQUAL      [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]
  ! QUESTION        [ shift and go to state 92 ]


state 126

    (76) exp -> exp MINUS exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 76 (exp -> exp MINUS exp .)
    DOT             reduce using rule 76 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 76 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 76 (exp -> exp MINUS exp .)
    COMPARASION     reduce using rule 76 (exp -> exp MINUS exp .)
    DIFFERENT       reduce using rule 76 (exp -> exp MINUS exp .)
    GREATER         reduce using rule 76 (exp -> exp MINUS exp .)
    LESS            reduce using rule 76 (exp -> exp MINUS exp .)
    GREATER_EQUAL   reduce using rule 76 (exp -> exp MINUS exp .)
    LESS_EQUAL      reduce using rule 76 (exp -> exp MINUS exp .)
    AND             reduce using rule 76 (exp -> exp MINUS exp .)
    OR              reduce using rule 76 (exp -> exp MINUS exp .)
    QUESTION        reduce using rule 76 (exp -> exp MINUS exp .)
    RBRACKET        reduce using rule 76 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 76 (exp -> exp MINUS exp .)
    COLON           reduce using rule 76 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 76 (exp -> exp MINUS exp .)
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83

  ! TIMES           [ reduce using rule 76 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 76 (exp -> exp MINUS exp .) ]
  ! MOD             [ reduce using rule 76 (exp -> exp MINUS exp .) ]
  ! DOT             [ shift and go to state 78 ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! COMPARASION     [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]
  ! GREATER         [ shift and go to state 86 ]
  ! LESS            [ shift and go to state 87 ]
  ! GREATER_EQUAL   [ shift and go to state 88 ]
  ! LESS_EQUAL      [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]
  ! QUESTION        [ shift and go to state 92 ]


state 127

    (77) exp -> exp TIMES exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 77 (exp -> exp TIMES exp .)
    DOT             reduce using rule 77 (exp -> exp TIMES exp .)
    PLUS            reduce using rule 77 (exp -> exp TIMES exp .)
    MINUS           reduce using rule 77 (exp -> exp TIMES exp .)
    TIMES           reduce using rule 77 (exp -> exp TIMES exp .)
    DIVIDE          reduce using rule 77 (exp -> exp TIMES exp .)
    MOD             reduce using rule 77 (exp -> exp TIMES exp .)
    COMPARASION     reduce using rule 77 (exp -> exp TIMES exp .)
    DIFFERENT       reduce using rule 77 (exp -> exp TIMES exp .)
    GREATER         reduce using rule 77 (exp -> exp TIMES exp .)
    LESS            reduce using rule 77 (exp -> exp TIMES exp .)
    GREATER_EQUAL   reduce using rule 77 (exp -> exp TIMES exp .)
    LESS_EQUAL      reduce using rule 77 (exp -> exp TIMES exp .)
    AND             reduce using rule 77 (exp -> exp TIMES exp .)
    OR              reduce using rule 77 (exp -> exp TIMES exp .)
    QUESTION        reduce using rule 77 (exp -> exp TIMES exp .)
    RBRACKET        reduce using rule 77 (exp -> exp TIMES exp .)
    RPAREN          reduce using rule 77 (exp -> exp TIMES exp .)
    COLON           reduce using rule 77 (exp -> exp TIMES exp .)
    COMMA           reduce using rule 77 (exp -> exp TIMES exp .)

  ! DOT             [ shift and go to state 78 ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! TIMES           [ shift and go to state 81 ]
  ! DIVIDE          [ shift and go to state 82 ]
  ! MOD             [ shift and go to state 83 ]
  ! COMPARASION     [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]
  ! GREATER         [ shift and go to state 86 ]
  ! LESS            [ shift and go to state 87 ]
  ! GREATER_EQUAL   [ shift and go to state 88 ]
  ! LESS_EQUAL      [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]
  ! QUESTION        [ shift and go to state 92 ]


state 128

    (78) exp -> exp DIVIDE exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 78 (exp -> exp DIVIDE exp .)
    DOT             reduce using rule 78 (exp -> exp DIVIDE exp .)
    PLUS            reduce using rule 78 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 78 (exp -> exp DIVIDE exp .)
    TIMES           reduce using rule 78 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 78 (exp -> exp DIVIDE exp .)
    MOD             reduce using rule 78 (exp -> exp DIVIDE exp .)
    COMPARASION     reduce using rule 78 (exp -> exp DIVIDE exp .)
    DIFFERENT       reduce using rule 78 (exp -> exp DIVIDE exp .)
    GREATER         reduce using rule 78 (exp -> exp DIVIDE exp .)
    LESS            reduce using rule 78 (exp -> exp DIVIDE exp .)
    GREATER_EQUAL   reduce using rule 78 (exp -> exp DIVIDE exp .)
    LESS_EQUAL      reduce using rule 78 (exp -> exp DIVIDE exp .)
    AND             reduce using rule 78 (exp -> exp DIVIDE exp .)
    OR              reduce using rule 78 (exp -> exp DIVIDE exp .)
    QUESTION        reduce using rule 78 (exp -> exp DIVIDE exp .)
    RBRACKET        reduce using rule 78 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 78 (exp -> exp DIVIDE exp .)
    COLON           reduce using rule 78 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 78 (exp -> exp DIVIDE exp .)

  ! DOT             [ shift and go to state 78 ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! TIMES           [ shift and go to state 81 ]
  ! DIVIDE          [ shift and go to state 82 ]
  ! MOD             [ shift and go to state 83 ]
  ! COMPARASION     [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]
  ! GREATER         [ shift and go to state 86 ]
  ! LESS            [ shift and go to state 87 ]
  ! GREATER_EQUAL   [ shift and go to state 88 ]
  ! LESS_EQUAL      [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]
  ! QUESTION        [ shift and go to state 92 ]


state 129

    (79) exp -> exp MOD exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 79 (exp -> exp MOD exp .)
    DOT             reduce using rule 79 (exp -> exp MOD exp .)
    PLUS            reduce using rule 79 (exp -> exp MOD exp .)
    MINUS           reduce using rule 79 (exp -> exp MOD exp .)
    TIMES           reduce using rule 79 (exp -> exp MOD exp .)
    DIVIDE          reduce using rule 79 (exp -> exp MOD exp .)
    MOD             reduce using rule 79 (exp -> exp MOD exp .)
    COMPARASION     reduce using rule 79 (exp -> exp MOD exp .)
    DIFFERENT       reduce using rule 79 (exp -> exp MOD exp .)
    GREATER         reduce using rule 79 (exp -> exp MOD exp .)
    LESS            reduce using rule 79 (exp -> exp MOD exp .)
    GREATER_EQUAL   reduce using rule 79 (exp -> exp MOD exp .)
    LESS_EQUAL      reduce using rule 79 (exp -> exp MOD exp .)
    AND             reduce using rule 79 (exp -> exp MOD exp .)
    OR              reduce using rule 79 (exp -> exp MOD exp .)
    QUESTION        reduce using rule 79 (exp -> exp MOD exp .)
    RBRACKET        reduce using rule 79 (exp -> exp MOD exp .)
    RPAREN          reduce using rule 79 (exp -> exp MOD exp .)
    COLON           reduce using rule 79 (exp -> exp MOD exp .)
    COMMA           reduce using rule 79 (exp -> exp MOD exp .)

  ! DOT             [ shift and go to state 78 ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! TIMES           [ shift and go to state 81 ]
  ! DIVIDE          [ shift and go to state 82 ]
  ! MOD             [ shift and go to state 83 ]
  ! COMPARASION     [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]
  ! GREATER         [ shift and go to state 86 ]
  ! LESS            [ shift and go to state 87 ]
  ! GREATER_EQUAL   [ shift and go to state 88 ]
  ! LESS_EQUAL      [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]
  ! QUESTION        [ shift and go to state 92 ]


state 130

    (82) exp -> exp COMPARASION exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 82 (exp -> exp COMPARASION exp .)
    DOT             reduce using rule 82 (exp -> exp COMPARASION exp .)
    COMPARASION     reduce using rule 82 (exp -> exp COMPARASION exp .)
    DIFFERENT       reduce using rule 82 (exp -> exp COMPARASION exp .)
    AND             reduce using rule 82 (exp -> exp COMPARASION exp .)
    OR              reduce using rule 82 (exp -> exp COMPARASION exp .)
    QUESTION        reduce using rule 82 (exp -> exp COMPARASION exp .)
    RBRACKET        reduce using rule 82 (exp -> exp COMPARASION exp .)
    RPAREN          reduce using rule 82 (exp -> exp COMPARASION exp .)
    COLON           reduce using rule 82 (exp -> exp COMPARASION exp .)
    COMMA           reduce using rule 82 (exp -> exp COMPARASION exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89

  ! PLUS            [ reduce using rule 82 (exp -> exp COMPARASION exp .) ]
  ! MINUS           [ reduce using rule 82 (exp -> exp COMPARASION exp .) ]
  ! TIMES           [ reduce using rule 82 (exp -> exp COMPARASION exp .) ]
  ! DIVIDE          [ reduce using rule 82 (exp -> exp COMPARASION exp .) ]
  ! MOD             [ reduce using rule 82 (exp -> exp COMPARASION exp .) ]
  ! GREATER         [ reduce using rule 82 (exp -> exp COMPARASION exp .) ]
  ! LESS            [ reduce using rule 82 (exp -> exp COMPARASION exp .) ]
  ! GREATER_EQUAL   [ reduce using rule 82 (exp -> exp COMPARASION exp .) ]
  ! LESS_EQUAL      [ reduce using rule 82 (exp -> exp COMPARASION exp .) ]
  ! DOT             [ shift and go to state 78 ]
  ! COMPARASION     [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]
  ! QUESTION        [ shift and go to state 92 ]


state 131

    (83) exp -> exp DIFFERENT exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 83 (exp -> exp DIFFERENT exp .)
    DOT             reduce using rule 83 (exp -> exp DIFFERENT exp .)
    COMPARASION     reduce using rule 83 (exp -> exp DIFFERENT exp .)
    DIFFERENT       reduce using rule 83 (exp -> exp DIFFERENT exp .)
    AND             reduce using rule 83 (exp -> exp DIFFERENT exp .)
    OR              reduce using rule 83 (exp -> exp DIFFERENT exp .)
    QUESTION        reduce using rule 83 (exp -> exp DIFFERENT exp .)
    RBRACKET        reduce using rule 83 (exp -> exp DIFFERENT exp .)
    RPAREN          reduce using rule 83 (exp -> exp DIFFERENT exp .)
    COLON           reduce using rule 83 (exp -> exp DIFFERENT exp .)
    COMMA           reduce using rule 83 (exp -> exp DIFFERENT exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89

  ! PLUS            [ reduce using rule 83 (exp -> exp DIFFERENT exp .) ]
  ! MINUS           [ reduce using rule 83 (exp -> exp DIFFERENT exp .) ]
  ! TIMES           [ reduce using rule 83 (exp -> exp DIFFERENT exp .) ]
  ! DIVIDE          [ reduce using rule 83 (exp -> exp DIFFERENT exp .) ]
  ! MOD             [ reduce using rule 83 (exp -> exp DIFFERENT exp .) ]
  ! GREATER         [ reduce using rule 83 (exp -> exp DIFFERENT exp .) ]
  ! LESS            [ reduce using rule 83 (exp -> exp DIFFERENT exp .) ]
  ! GREATER_EQUAL   [ reduce using rule 83 (exp -> exp DIFFERENT exp .) ]
  ! LESS_EQUAL      [ reduce using rule 83 (exp -> exp DIFFERENT exp .) ]
  ! DOT             [ shift and go to state 78 ]
  ! COMPARASION     [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]
  ! QUESTION        [ shift and go to state 92 ]


state 132

    (84) exp -> exp GREATER exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 84 (exp -> exp GREATER exp .)
    DOT             reduce using rule 84 (exp -> exp GREATER exp .)
    COMPARASION     reduce using rule 84 (exp -> exp GREATER exp .)
    DIFFERENT       reduce using rule 84 (exp -> exp GREATER exp .)
    GREATER         reduce using rule 84 (exp -> exp GREATER exp .)
    LESS            reduce using rule 84 (exp -> exp GREATER exp .)
    GREATER_EQUAL   reduce using rule 84 (exp -> exp GREATER exp .)
    LESS_EQUAL      reduce using rule 84 (exp -> exp GREATER exp .)
    AND             reduce using rule 84 (exp -> exp GREATER exp .)
    OR              reduce using rule 84 (exp -> exp GREATER exp .)
    QUESTION        reduce using rule 84 (exp -> exp GREATER exp .)
    RBRACKET        reduce using rule 84 (exp -> exp GREATER exp .)
    RPAREN          reduce using rule 84 (exp -> exp GREATER exp .)
    COLON           reduce using rule 84 (exp -> exp GREATER exp .)
    COMMA           reduce using rule 84 (exp -> exp GREATER exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83

  ! PLUS            [ reduce using rule 84 (exp -> exp GREATER exp .) ]
  ! MINUS           [ reduce using rule 84 (exp -> exp GREATER exp .) ]
  ! TIMES           [ reduce using rule 84 (exp -> exp GREATER exp .) ]
  ! DIVIDE          [ reduce using rule 84 (exp -> exp GREATER exp .) ]
  ! MOD             [ reduce using rule 84 (exp -> exp GREATER exp .) ]
  ! DOT             [ shift and go to state 78 ]
  ! COMPARASION     [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]
  ! GREATER         [ shift and go to state 86 ]
  ! LESS            [ shift and go to state 87 ]
  ! GREATER_EQUAL   [ shift and go to state 88 ]
  ! LESS_EQUAL      [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]
  ! QUESTION        [ shift and go to state 92 ]


state 133

    (85) exp -> exp LESS exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 85 (exp -> exp LESS exp .)
    DOT             reduce using rule 85 (exp -> exp LESS exp .)
    COMPARASION     reduce using rule 85 (exp -> exp LESS exp .)
    DIFFERENT       reduce using rule 85 (exp -> exp LESS exp .)
    GREATER         reduce using rule 85 (exp -> exp LESS exp .)
    LESS            reduce using rule 85 (exp -> exp LESS exp .)
    GREATER_EQUAL   reduce using rule 85 (exp -> exp LESS exp .)
    LESS_EQUAL      reduce using rule 85 (exp -> exp LESS exp .)
    AND             reduce using rule 85 (exp -> exp LESS exp .)
    OR              reduce using rule 85 (exp -> exp LESS exp .)
    QUESTION        reduce using rule 85 (exp -> exp LESS exp .)
    RBRACKET        reduce using rule 85 (exp -> exp LESS exp .)
    RPAREN          reduce using rule 85 (exp -> exp LESS exp .)
    COLON           reduce using rule 85 (exp -> exp LESS exp .)
    COMMA           reduce using rule 85 (exp -> exp LESS exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83

  ! PLUS            [ reduce using rule 85 (exp -> exp LESS exp .) ]
  ! MINUS           [ reduce using rule 85 (exp -> exp LESS exp .) ]
  ! TIMES           [ reduce using rule 85 (exp -> exp LESS exp .) ]
  ! DIVIDE          [ reduce using rule 85 (exp -> exp LESS exp .) ]
  ! MOD             [ reduce using rule 85 (exp -> exp LESS exp .) ]
  ! DOT             [ shift and go to state 78 ]
  ! COMPARASION     [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]
  ! GREATER         [ shift and go to state 86 ]
  ! LESS            [ shift and go to state 87 ]
  ! GREATER_EQUAL   [ shift and go to state 88 ]
  ! LESS_EQUAL      [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]
  ! QUESTION        [ shift and go to state 92 ]


state 134

    (86) exp -> exp GREATER_EQUAL exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 86 (exp -> exp GREATER_EQUAL exp .)
    DOT             reduce using rule 86 (exp -> exp GREATER_EQUAL exp .)
    COMPARASION     reduce using rule 86 (exp -> exp GREATER_EQUAL exp .)
    DIFFERENT       reduce using rule 86 (exp -> exp GREATER_EQUAL exp .)
    GREATER         reduce using rule 86 (exp -> exp GREATER_EQUAL exp .)
    LESS            reduce using rule 86 (exp -> exp GREATER_EQUAL exp .)
    GREATER_EQUAL   reduce using rule 86 (exp -> exp GREATER_EQUAL exp .)
    LESS_EQUAL      reduce using rule 86 (exp -> exp GREATER_EQUAL exp .)
    AND             reduce using rule 86 (exp -> exp GREATER_EQUAL exp .)
    OR              reduce using rule 86 (exp -> exp GREATER_EQUAL exp .)
    QUESTION        reduce using rule 86 (exp -> exp GREATER_EQUAL exp .)
    RBRACKET        reduce using rule 86 (exp -> exp GREATER_EQUAL exp .)
    RPAREN          reduce using rule 86 (exp -> exp GREATER_EQUAL exp .)
    COLON           reduce using rule 86 (exp -> exp GREATER_EQUAL exp .)
    COMMA           reduce using rule 86 (exp -> exp GREATER_EQUAL exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83

  ! PLUS            [ reduce using rule 86 (exp -> exp GREATER_EQUAL exp .) ]
  ! MINUS           [ reduce using rule 86 (exp -> exp GREATER_EQUAL exp .) ]
  ! TIMES           [ reduce using rule 86 (exp -> exp GREATER_EQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 86 (exp -> exp GREATER_EQUAL exp .) ]
  ! MOD             [ reduce using rule 86 (exp -> exp GREATER_EQUAL exp .) ]
  ! DOT             [ shift and go to state 78 ]
  ! COMPARASION     [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]
  ! GREATER         [ shift and go to state 86 ]
  ! LESS            [ shift and go to state 87 ]
  ! GREATER_EQUAL   [ shift and go to state 88 ]
  ! LESS_EQUAL      [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]
  ! QUESTION        [ shift and go to state 92 ]


state 135

    (87) exp -> exp LESS_EQUAL exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 87 (exp -> exp LESS_EQUAL exp .)
    DOT             reduce using rule 87 (exp -> exp LESS_EQUAL exp .)
    COMPARASION     reduce using rule 87 (exp -> exp LESS_EQUAL exp .)
    DIFFERENT       reduce using rule 87 (exp -> exp LESS_EQUAL exp .)
    GREATER         reduce using rule 87 (exp -> exp LESS_EQUAL exp .)
    LESS            reduce using rule 87 (exp -> exp LESS_EQUAL exp .)
    GREATER_EQUAL   reduce using rule 87 (exp -> exp LESS_EQUAL exp .)
    LESS_EQUAL      reduce using rule 87 (exp -> exp LESS_EQUAL exp .)
    AND             reduce using rule 87 (exp -> exp LESS_EQUAL exp .)
    OR              reduce using rule 87 (exp -> exp LESS_EQUAL exp .)
    QUESTION        reduce using rule 87 (exp -> exp LESS_EQUAL exp .)
    RBRACKET        reduce using rule 87 (exp -> exp LESS_EQUAL exp .)
    RPAREN          reduce using rule 87 (exp -> exp LESS_EQUAL exp .)
    COLON           reduce using rule 87 (exp -> exp LESS_EQUAL exp .)
    COMMA           reduce using rule 87 (exp -> exp LESS_EQUAL exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83

  ! PLUS            [ reduce using rule 87 (exp -> exp LESS_EQUAL exp .) ]
  ! MINUS           [ reduce using rule 87 (exp -> exp LESS_EQUAL exp .) ]
  ! TIMES           [ reduce using rule 87 (exp -> exp LESS_EQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 87 (exp -> exp LESS_EQUAL exp .) ]
  ! MOD             [ reduce using rule 87 (exp -> exp LESS_EQUAL exp .) ]
  ! DOT             [ shift and go to state 78 ]
  ! COMPARASION     [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]
  ! GREATER         [ shift and go to state 86 ]
  ! LESS            [ shift and go to state 87 ]
  ! GREATER_EQUAL   [ shift and go to state 88 ]
  ! LESS_EQUAL      [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]
  ! QUESTION        [ shift and go to state 92 ]


state 136

    (88) exp -> exp AND exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 88 (exp -> exp AND exp .)
    DOT             reduce using rule 88 (exp -> exp AND exp .)
    AND             reduce using rule 88 (exp -> exp AND exp .)
    OR              reduce using rule 88 (exp -> exp AND exp .)
    QUESTION        reduce using rule 88 (exp -> exp AND exp .)
    RBRACKET        reduce using rule 88 (exp -> exp AND exp .)
    RPAREN          reduce using rule 88 (exp -> exp AND exp .)
    COLON           reduce using rule 88 (exp -> exp AND exp .)
    COMMA           reduce using rule 88 (exp -> exp AND exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89

  ! PLUS            [ reduce using rule 88 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 88 (exp -> exp AND exp .) ]
  ! TIMES           [ reduce using rule 88 (exp -> exp AND exp .) ]
  ! DIVIDE          [ reduce using rule 88 (exp -> exp AND exp .) ]
  ! MOD             [ reduce using rule 88 (exp -> exp AND exp .) ]
  ! COMPARASION     [ reduce using rule 88 (exp -> exp AND exp .) ]
  ! DIFFERENT       [ reduce using rule 88 (exp -> exp AND exp .) ]
  ! GREATER         [ reduce using rule 88 (exp -> exp AND exp .) ]
  ! LESS            [ reduce using rule 88 (exp -> exp AND exp .) ]
  ! GREATER_EQUAL   [ reduce using rule 88 (exp -> exp AND exp .) ]
  ! LESS_EQUAL      [ reduce using rule 88 (exp -> exp AND exp .) ]
  ! DOT             [ shift and go to state 78 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]
  ! QUESTION        [ shift and go to state 92 ]


state 137

    (89) exp -> exp OR exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 89 (exp -> exp OR exp .)
    DOT             reduce using rule 89 (exp -> exp OR exp .)
    OR              reduce using rule 89 (exp -> exp OR exp .)
    QUESTION        reduce using rule 89 (exp -> exp OR exp .)
    RBRACKET        reduce using rule 89 (exp -> exp OR exp .)
    RPAREN          reduce using rule 89 (exp -> exp OR exp .)
    COLON           reduce using rule 89 (exp -> exp OR exp .)
    COMMA           reduce using rule 89 (exp -> exp OR exp .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90

  ! PLUS            [ reduce using rule 89 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 89 (exp -> exp OR exp .) ]
  ! TIMES           [ reduce using rule 89 (exp -> exp OR exp .) ]
  ! DIVIDE          [ reduce using rule 89 (exp -> exp OR exp .) ]
  ! MOD             [ reduce using rule 89 (exp -> exp OR exp .) ]
  ! COMPARASION     [ reduce using rule 89 (exp -> exp OR exp .) ]
  ! DIFFERENT       [ reduce using rule 89 (exp -> exp OR exp .) ]
  ! GREATER         [ reduce using rule 89 (exp -> exp OR exp .) ]
  ! LESS            [ reduce using rule 89 (exp -> exp OR exp .) ]
  ! GREATER_EQUAL   [ reduce using rule 89 (exp -> exp OR exp .) ]
  ! LESS_EQUAL      [ reduce using rule 89 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 89 (exp -> exp OR exp .) ]
  ! DOT             [ shift and go to state 78 ]
  ! OR              [ shift and go to state 91 ]
  ! QUESTION        [ shift and go to state 92 ]


state 138

    (100) exp -> exp QUESTION exp . COLON exp
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    COLON           shift and go to state 176
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 139

    (48) exp -> ID DOT POP . LPAREN RPAREN

    LPAREN          shift and go to state 177


state 140

    (49) exp -> ID DOT INDEXOF . LPAREN exp RPAREN

    LPAREN          shift and go to state 178


state 141

    (50) exp -> ID DOT JOIN . LPAREN RPAREN

    LPAREN          shift and go to state 179


state 142

    (51) exp -> ID DOT LENGTH .

    SEMICOLON       reduce using rule 51 (exp -> ID DOT LENGTH .)
    DOT             reduce using rule 51 (exp -> ID DOT LENGTH .)
    PLUS            reduce using rule 51 (exp -> ID DOT LENGTH .)
    MINUS           reduce using rule 51 (exp -> ID DOT LENGTH .)
    TIMES           reduce using rule 51 (exp -> ID DOT LENGTH .)
    DIVIDE          reduce using rule 51 (exp -> ID DOT LENGTH .)
    MOD             reduce using rule 51 (exp -> ID DOT LENGTH .)
    COMPARASION     reduce using rule 51 (exp -> ID DOT LENGTH .)
    DIFFERENT       reduce using rule 51 (exp -> ID DOT LENGTH .)
    GREATER         reduce using rule 51 (exp -> ID DOT LENGTH .)
    LESS            reduce using rule 51 (exp -> ID DOT LENGTH .)
    GREATER_EQUAL   reduce using rule 51 (exp -> ID DOT LENGTH .)
    LESS_EQUAL      reduce using rule 51 (exp -> ID DOT LENGTH .)
    AND             reduce using rule 51 (exp -> ID DOT LENGTH .)
    OR              reduce using rule 51 (exp -> ID DOT LENGTH .)
    QUESTION        reduce using rule 51 (exp -> ID DOT LENGTH .)
    RBRACKET        reduce using rule 51 (exp -> ID DOT LENGTH .)
    RPAREN          reduce using rule 51 (exp -> ID DOT LENGTH .)
    COLON           reduce using rule 51 (exp -> ID DOT LENGTH .)
    COMMA           reduce using rule 51 (exp -> ID DOT LENGTH .)


state 143

    (55) exp -> ID DOT TOSTRING . LPAREN RPAREN

    LPAREN          shift and go to state 180


state 144

    (57) exp -> ID DOT TOLOWERCASE . LPAREN RPAREN

    LPAREN          shift and go to state 181


state 145

    (59) exp -> ID DOT TOUPPERCASE . LPAREN RPAREN

    LPAREN          shift and go to state 182


state 146

    (99) exp -> LPAREN exp RPAREN .

    SEMICOLON       reduce using rule 99 (exp -> LPAREN exp RPAREN .)
    DOT             reduce using rule 99 (exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 99 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 99 (exp -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 99 (exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 99 (exp -> LPAREN exp RPAREN .)
    MOD             reduce using rule 99 (exp -> LPAREN exp RPAREN .)
    COMPARASION     reduce using rule 99 (exp -> LPAREN exp RPAREN .)
    DIFFERENT       reduce using rule 99 (exp -> LPAREN exp RPAREN .)
    GREATER         reduce using rule 99 (exp -> LPAREN exp RPAREN .)
    LESS            reduce using rule 99 (exp -> LPAREN exp RPAREN .)
    GREATER_EQUAL   reduce using rule 99 (exp -> LPAREN exp RPAREN .)
    LESS_EQUAL      reduce using rule 99 (exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 99 (exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 99 (exp -> LPAREN exp RPAREN .)
    QUESTION        reduce using rule 99 (exp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 99 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 99 (exp -> LPAREN exp RPAREN .)
    COLON           reduce using rule 99 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 99 (exp -> LPAREN exp RPAREN .)


state 147

    (52) exp -> PARSEINT LPAREN exp . RPAREN
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    RPAREN          shift and go to state 183
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 148

    (53) exp -> PARSEFLOAT LPAREN exp . RPAREN
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    RPAREN          shift and go to state 184
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 149

    (96) list_access -> list_access LBRACKET exp . RBRACKET
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    RBRACKET        shift and go to state 185
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 150

    (97) list_access -> list_access DOT ID .

    LBRACKET        reduce using rule 97 (list_access -> list_access DOT ID .)
    DOT             reduce using rule 97 (list_access -> list_access DOT ID .)
    SEMICOLON       reduce using rule 97 (list_access -> list_access DOT ID .)
    PLUS            reduce using rule 97 (list_access -> list_access DOT ID .)
    MINUS           reduce using rule 97 (list_access -> list_access DOT ID .)
    TIMES           reduce using rule 97 (list_access -> list_access DOT ID .)
    DIVIDE          reduce using rule 97 (list_access -> list_access DOT ID .)
    MOD             reduce using rule 97 (list_access -> list_access DOT ID .)
    COMPARASION     reduce using rule 97 (list_access -> list_access DOT ID .)
    DIFFERENT       reduce using rule 97 (list_access -> list_access DOT ID .)
    GREATER         reduce using rule 97 (list_access -> list_access DOT ID .)
    LESS            reduce using rule 97 (list_access -> list_access DOT ID .)
    GREATER_EQUAL   reduce using rule 97 (list_access -> list_access DOT ID .)
    LESS_EQUAL      reduce using rule 97 (list_access -> list_access DOT ID .)
    AND             reduce using rule 97 (list_access -> list_access DOT ID .)
    OR              reduce using rule 97 (list_access -> list_access DOT ID .)
    QUESTION        reduce using rule 97 (list_access -> list_access DOT ID .)
    RBRACKET        reduce using rule 97 (list_access -> list_access DOT ID .)
    RPAREN          reduce using rule 97 (list_access -> list_access DOT ID .)
    COLON           reduce using rule 97 (list_access -> list_access DOT ID .)
    COMMA           reduce using rule 97 (list_access -> list_access DOT ID .)


state 151

    (29) print -> CONSOLE DOT LOG LPAREN . exp_list RPAREN SEMICOLON
    (73) exp_list -> . exp_list COMMA exp
    (74) exp_list -> . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp_list                       shift and go to state 186
    exp                            shift and go to state 187
    list_access                    shift and go to state 58

state 152

    (19) if -> IF LPAREN exp RPAREN . LBRACE block RBRACE ELSE if
    (20) if -> IF LPAREN exp RPAREN . LBRACE block RBRACE
    (21) if -> IF LPAREN exp RPAREN . LBRACE block RBRACE ELSE LBRACE block RBRACE

    LBRACE          shift and go to state 188


state 153

    (69) assignment -> ID index_list EQUAL exp SEMICOLON .

    ID              reduce using rule 69 (assignment -> ID index_list EQUAL exp SEMICOLON .)
    CONST           reduce using rule 69 (assignment -> ID index_list EQUAL exp SEMICOLON .)
    VAR             reduce using rule 69 (assignment -> ID index_list EQUAL exp SEMICOLON .)
    INTERFACE       reduce using rule 69 (assignment -> ID index_list EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 69 (assignment -> ID index_list EQUAL exp SEMICOLON .)
    FOR             reduce using rule 69 (assignment -> ID index_list EQUAL exp SEMICOLON .)
    BREAK           reduce using rule 69 (assignment -> ID index_list EQUAL exp SEMICOLON .)
    CONTINUE        reduce using rule 69 (assignment -> ID index_list EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 69 (assignment -> ID index_list EQUAL exp SEMICOLON .)
    CONSOLE         reduce using rule 69 (assignment -> ID index_list EQUAL exp SEMICOLON .)
    IF              reduce using rule 69 (assignment -> ID index_list EQUAL exp SEMICOLON .)
    $end            reduce using rule 69 (assignment -> ID index_list EQUAL exp SEMICOLON .)
    RBRACE          reduce using rule 69 (assignment -> ID index_list EQUAL exp SEMICOLON .)


state 154

    (70) index_list -> index_list LBRACKET exp RBRACKET .

    EQUAL           reduce using rule 70 (index_list -> index_list LBRACKET exp RBRACKET .)
    LBRACKET        reduce using rule 70 (index_list -> index_list LBRACKET exp RBRACKET .)


state 155

    (47) vector_functions -> ID DOT PUSH LPAREN exp . RPAREN SEMICOLON
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    RPAREN          shift and go to state 189
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 156

    (61) declaration -> CONST ID COLON type EQUAL . exp SEMICOLON
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 190
    list_access                    shift and go to state 58

state 157

    (35) declaration_array -> CONST ID COLON type LBRACKET . RBRACKET EQUAL definition_array SEMICOLON
    (42) matrix_dimension -> LBRACKET . RBRACKET LBRACKET RBRACKET

    RBRACKET        shift and go to state 191


state 158

    (40) declaration_matrix -> CONST ID COLON type matrix_dimension . EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (41) matrix_dimension -> matrix_dimension . LBRACKET RBRACKET

    EQUAL           shift and go to state 192
    LBRACKET        shift and go to state 193


state 159

    (62) declaration -> CONST ID EQUAL exp SEMICOLON .

    ID              reduce using rule 62 (declaration -> CONST ID EQUAL exp SEMICOLON .)
    CONST           reduce using rule 62 (declaration -> CONST ID EQUAL exp SEMICOLON .)
    VAR             reduce using rule 62 (declaration -> CONST ID EQUAL exp SEMICOLON .)
    INTERFACE       reduce using rule 62 (declaration -> CONST ID EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 62 (declaration -> CONST ID EQUAL exp SEMICOLON .)
    FOR             reduce using rule 62 (declaration -> CONST ID EQUAL exp SEMICOLON .)
    BREAK           reduce using rule 62 (declaration -> CONST ID EQUAL exp SEMICOLON .)
    CONTINUE        reduce using rule 62 (declaration -> CONST ID EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 62 (declaration -> CONST ID EQUAL exp SEMICOLON .)
    CONSOLE         reduce using rule 62 (declaration -> CONST ID EQUAL exp SEMICOLON .)
    IF              reduce using rule 62 (declaration -> CONST ID EQUAL exp SEMICOLON .)
    $end            reduce using rule 62 (declaration -> CONST ID EQUAL exp SEMICOLON .)
    SEMICOLON       reduce using rule 62 (declaration -> CONST ID EQUAL exp SEMICOLON .)
    RBRACE          reduce using rule 62 (declaration -> CONST ID EQUAL exp SEMICOLON .)
    RPAREN          reduce using rule 62 (declaration -> CONST ID EQUAL exp SEMICOLON .)


state 160

    (63) declaration -> VAR ID COLON type EQUAL . exp SEMICOLON
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 194
    list_access                    shift and go to state 58

state 161

    (65) declaration -> VAR ID COLON type SEMICOLON .

    ID              reduce using rule 65 (declaration -> VAR ID COLON type SEMICOLON .)
    CONST           reduce using rule 65 (declaration -> VAR ID COLON type SEMICOLON .)
    VAR             reduce using rule 65 (declaration -> VAR ID COLON type SEMICOLON .)
    INTERFACE       reduce using rule 65 (declaration -> VAR ID COLON type SEMICOLON .)
    WHILE           reduce using rule 65 (declaration -> VAR ID COLON type SEMICOLON .)
    FOR             reduce using rule 65 (declaration -> VAR ID COLON type SEMICOLON .)
    BREAK           reduce using rule 65 (declaration -> VAR ID COLON type SEMICOLON .)
    CONTINUE        reduce using rule 65 (declaration -> VAR ID COLON type SEMICOLON .)
    RETURN          reduce using rule 65 (declaration -> VAR ID COLON type SEMICOLON .)
    CONSOLE         reduce using rule 65 (declaration -> VAR ID COLON type SEMICOLON .)
    IF              reduce using rule 65 (declaration -> VAR ID COLON type SEMICOLON .)
    $end            reduce using rule 65 (declaration -> VAR ID COLON type SEMICOLON .)
    SEMICOLON       reduce using rule 65 (declaration -> VAR ID COLON type SEMICOLON .)
    RBRACE          reduce using rule 65 (declaration -> VAR ID COLON type SEMICOLON .)
    RPAREN          reduce using rule 65 (declaration -> VAR ID COLON type SEMICOLON .)


state 162

    (33) declaration_array -> VAR ID COLON type LBRACKET . RBRACKET EQUAL definition_array SEMICOLON
    (34) declaration_array -> VAR ID COLON type LBRACKET . RBRACKET EQUAL error SEMICOLON
    (42) matrix_dimension -> LBRACKET . RBRACKET LBRACKET RBRACKET

    RBRACKET        shift and go to state 195


state 163

    (39) declaration_matrix -> VAR ID COLON type matrix_dimension . EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (41) matrix_dimension -> matrix_dimension . LBRACKET RBRACKET

    EQUAL           shift and go to state 196
    LBRACKET        shift and go to state 193


state 164

    (64) declaration -> VAR ID EQUAL exp SEMICOLON .

    ID              reduce using rule 64 (declaration -> VAR ID EQUAL exp SEMICOLON .)
    CONST           reduce using rule 64 (declaration -> VAR ID EQUAL exp SEMICOLON .)
    VAR             reduce using rule 64 (declaration -> VAR ID EQUAL exp SEMICOLON .)
    INTERFACE       reduce using rule 64 (declaration -> VAR ID EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 64 (declaration -> VAR ID EQUAL exp SEMICOLON .)
    FOR             reduce using rule 64 (declaration -> VAR ID EQUAL exp SEMICOLON .)
    BREAK           reduce using rule 64 (declaration -> VAR ID EQUAL exp SEMICOLON .)
    CONTINUE        reduce using rule 64 (declaration -> VAR ID EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 64 (declaration -> VAR ID EQUAL exp SEMICOLON .)
    CONSOLE         reduce using rule 64 (declaration -> VAR ID EQUAL exp SEMICOLON .)
    IF              reduce using rule 64 (declaration -> VAR ID EQUAL exp SEMICOLON .)
    $end            reduce using rule 64 (declaration -> VAR ID EQUAL exp SEMICOLON .)
    SEMICOLON       reduce using rule 64 (declaration -> VAR ID EQUAL exp SEMICOLON .)
    RBRACE          reduce using rule 64 (declaration -> VAR ID EQUAL exp SEMICOLON .)
    RPAREN          reduce using rule 64 (declaration -> VAR ID EQUAL exp SEMICOLON .)


state 165

    (32) interface_body -> ID COLON . type
    (72) type -> . TYPES

    TYPES           shift and go to state 112

    type                           shift and go to state 197

state 166

    (30) interface -> INTERFACE ID LBRACE interface_body RBRACE .

    ID              reduce using rule 30 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    CONST           reduce using rule 30 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    VAR             reduce using rule 30 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    INTERFACE       reduce using rule 30 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    WHILE           reduce using rule 30 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    FOR             reduce using rule 30 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    BREAK           reduce using rule 30 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    CONTINUE        reduce using rule 30 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    RETURN          reduce using rule 30 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    CONSOLE         reduce using rule 30 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    IF              reduce using rule 30 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    $end            reduce using rule 30 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)
    RBRACE          reduce using rule 30 (interface -> INTERFACE ID LBRACE interface_body RBRACE .)


state 167

    (31) interface_body -> interface_body SEMICOLON . ID COLON type

    ID              shift and go to state 198


state 168

    (22) while -> WHILE LPAREN exp RPAREN block .
    (2) block -> block . instruction
    (4) instruction -> . assignment
    (5) instruction -> . declaration
    (6) instruction -> . declaration_array
    (7) instruction -> . declaration_matrix
    (8) instruction -> . vector_functions
    (9) instruction -> . interface
    (10) instruction -> . if_statement
    (11) instruction -> . while
    (12) instruction -> . for
    (13) instruction -> . foreach
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (66) assignment -> . ID EQUAL exp SEMICOLON
    (67) assignment -> . ID PLUS_EQUAL exp SEMICOLON
    (68) assignment -> . ID MINUS_EQUAL exp SEMICOLON
    (69) assignment -> . ID index_list EQUAL exp SEMICOLON
    (61) declaration -> . CONST ID COLON type EQUAL exp SEMICOLON
    (62) declaration -> . CONST ID EQUAL exp SEMICOLON
    (63) declaration -> . VAR ID COLON type EQUAL exp SEMICOLON
    (64) declaration -> . VAR ID EQUAL exp SEMICOLON
    (65) declaration -> . VAR ID COLON type SEMICOLON
    (33) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (34) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON
    (35) declaration_array -> . CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (39) declaration_matrix -> . VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (40) declaration_matrix -> . CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (47) vector_functions -> . ID DOT PUSH LPAREN exp RPAREN SEMICOLON
    (30) interface -> . INTERFACE ID LBRACE interface_body RBRACE
    (18) if_statement -> . if
    (22) while -> . WHILE LPAREN exp RPAREN block
    (23) for -> . FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block
    (24) foreach -> . FOR LPAREN VAR ID OF ID RPAREN block
    (25) break -> . BREAK SEMICOLON
    (26) continue -> . CONTINUE SEMICOLON
    (27) return -> . RETURN exp SEMICOLON
    (28) return -> . RETURN SEMICOLON
    (29) print -> . CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON
    (19) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if
    (20) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE
    (21) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 22 (while -> WHILE LPAREN exp RPAREN block .)
    RBRACE          reduce using rule 22 (while -> WHILE LPAREN exp RPAREN block .)
    ID              shift and go to state 18
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    INTERFACE       shift and go to state 21
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 27
    CONSOLE         shift and go to state 28
    IF              shift and go to state 29

  ! ID              [ reduce using rule 22 (while -> WHILE LPAREN exp RPAREN block .) ]
  ! CONST           [ reduce using rule 22 (while -> WHILE LPAREN exp RPAREN block .) ]
  ! VAR             [ reduce using rule 22 (while -> WHILE LPAREN exp RPAREN block .) ]
  ! INTERFACE       [ reduce using rule 22 (while -> WHILE LPAREN exp RPAREN block .) ]
  ! WHILE           [ reduce using rule 22 (while -> WHILE LPAREN exp RPAREN block .) ]
  ! FOR             [ reduce using rule 22 (while -> WHILE LPAREN exp RPAREN block .) ]
  ! BREAK           [ reduce using rule 22 (while -> WHILE LPAREN exp RPAREN block .) ]
  ! CONTINUE        [ reduce using rule 22 (while -> WHILE LPAREN exp RPAREN block .) ]
  ! RETURN          [ reduce using rule 22 (while -> WHILE LPAREN exp RPAREN block .) ]
  ! CONSOLE         [ reduce using rule 22 (while -> WHILE LPAREN exp RPAREN block .) ]
  ! IF              [ reduce using rule 22 (while -> WHILE LPAREN exp RPAREN block .) ]

    instruction                    shift and go to state 30
    assignment                     shift and go to state 4
    declaration                    shift and go to state 5
    declaration_array              shift and go to state 6
    declaration_matrix             shift and go to state 7
    vector_functions               shift and go to state 8
    interface                      shift and go to state 9
    if_statement                   shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    foreach                        shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    if                             shift and go to state 22

state 169

    (23) for -> FOR LPAREN declaration SEMICOLON exp . SEMICOLON declaration RPAREN block
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       shift and go to state 199
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 170

    (24) foreach -> FOR LPAREN VAR ID OF . ID RPAREN block

    ID              shift and go to state 200


state 171

    (63) declaration -> VAR ID COLON . type EQUAL exp SEMICOLON
    (65) declaration -> VAR ID COLON . type SEMICOLON
    (72) type -> . TYPES

    TYPES           shift and go to state 112

    type                           shift and go to state 201

state 172

    (61) declaration -> CONST ID COLON . type EQUAL exp SEMICOLON
    (72) type -> . TYPES

    TYPES           shift and go to state 112

    type                           shift and go to state 202

state 173

    (54) exp -> exp DOT TOSTRING LPAREN . RPAREN

    RPAREN          shift and go to state 203


state 174

    (56) exp -> exp DOT TOLOWERCASE LPAREN . RPAREN

    RPAREN          shift and go to state 204


state 175

    (58) exp -> exp DOT TOUPPERCASE LPAREN . RPAREN

    RPAREN          shift and go to state 205


state 176

    (100) exp -> exp QUESTION exp COLON . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 206
    list_access                    shift and go to state 58

state 177

    (48) exp -> ID DOT POP LPAREN . RPAREN

    RPAREN          shift and go to state 207


state 178

    (49) exp -> ID DOT INDEXOF LPAREN . exp RPAREN
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 208
    list_access                    shift and go to state 58

state 179

    (50) exp -> ID DOT JOIN LPAREN . RPAREN

    RPAREN          shift and go to state 209


state 180

    (55) exp -> ID DOT TOSTRING LPAREN . RPAREN

    RPAREN          shift and go to state 210


state 181

    (57) exp -> ID DOT TOLOWERCASE LPAREN . RPAREN

    RPAREN          shift and go to state 211


state 182

    (59) exp -> ID DOT TOUPPERCASE LPAREN . RPAREN

    RPAREN          shift and go to state 212


state 183

    (52) exp -> PARSEINT LPAREN exp RPAREN .

    SEMICOLON       reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)
    DOT             reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)
    PLUS            reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)
    MINUS           reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)
    TIMES           reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)
    MOD             reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)
    COMPARASION     reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)
    DIFFERENT       reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)
    GREATER         reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)
    LESS            reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)
    GREATER_EQUAL   reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)
    LESS_EQUAL      reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)
    AND             reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)
    OR              reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)
    QUESTION        reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)
    RPAREN          reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)
    COLON           reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)
    COMMA           reduce using rule 52 (exp -> PARSEINT LPAREN exp RPAREN .)


state 184

    (53) exp -> PARSEFLOAT LPAREN exp RPAREN .

    SEMICOLON       reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)
    DOT             reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)
    PLUS            reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)
    MINUS           reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)
    TIMES           reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)
    MOD             reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)
    COMPARASION     reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)
    DIFFERENT       reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)
    GREATER         reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)
    LESS            reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)
    GREATER_EQUAL   reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)
    LESS_EQUAL      reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)
    AND             reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)
    OR              reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)
    QUESTION        reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)
    RPAREN          reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)
    COLON           reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)
    COMMA           reduce using rule 53 (exp -> PARSEFLOAT LPAREN exp RPAREN .)


state 185

    (96) list_access -> list_access LBRACKET exp RBRACKET .

    LBRACKET        reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    DOT             reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    TIMES           reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    DIVIDE          reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    MOD             reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    COMPARASION     reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    DIFFERENT       reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    GREATER         reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    LESS            reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    GREATER_EQUAL   reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    LESS_EQUAL      reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    AND             reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    OR              reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    QUESTION        reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    COLON           reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 96 (list_access -> list_access LBRACKET exp RBRACKET .)


state 186

    (29) print -> CONSOLE DOT LOG LPAREN exp_list . RPAREN SEMICOLON
    (73) exp_list -> exp_list . COMMA exp

    RPAREN          shift and go to state 213
    COMMA           shift and go to state 214


state 187

    (74) exp_list -> exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    RPAREN          reduce using rule 74 (exp_list -> exp .)
    COMMA           reduce using rule 74 (exp_list -> exp .)
    RBRACKET        reduce using rule 74 (exp_list -> exp .)
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 188

    (19) if -> IF LPAREN exp RPAREN LBRACE . block RBRACE ELSE if
    (20) if -> IF LPAREN exp RPAREN LBRACE . block RBRACE
    (21) if -> IF LPAREN exp RPAREN LBRACE . block RBRACE ELSE LBRACE block RBRACE
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . assignment
    (5) instruction -> . declaration
    (6) instruction -> . declaration_array
    (7) instruction -> . declaration_matrix
    (8) instruction -> . vector_functions
    (9) instruction -> . interface
    (10) instruction -> . if_statement
    (11) instruction -> . while
    (12) instruction -> . for
    (13) instruction -> . foreach
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (66) assignment -> . ID EQUAL exp SEMICOLON
    (67) assignment -> . ID PLUS_EQUAL exp SEMICOLON
    (68) assignment -> . ID MINUS_EQUAL exp SEMICOLON
    (69) assignment -> . ID index_list EQUAL exp SEMICOLON
    (61) declaration -> . CONST ID COLON type EQUAL exp SEMICOLON
    (62) declaration -> . CONST ID EQUAL exp SEMICOLON
    (63) declaration -> . VAR ID COLON type EQUAL exp SEMICOLON
    (64) declaration -> . VAR ID EQUAL exp SEMICOLON
    (65) declaration -> . VAR ID COLON type SEMICOLON
    (33) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (34) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON
    (35) declaration_array -> . CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (39) declaration_matrix -> . VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (40) declaration_matrix -> . CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (47) vector_functions -> . ID DOT PUSH LPAREN exp RPAREN SEMICOLON
    (30) interface -> . INTERFACE ID LBRACE interface_body RBRACE
    (18) if_statement -> . if
    (22) while -> . WHILE LPAREN exp RPAREN block
    (23) for -> . FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block
    (24) foreach -> . FOR LPAREN VAR ID OF ID RPAREN block
    (25) break -> . BREAK SEMICOLON
    (26) continue -> . CONTINUE SEMICOLON
    (27) return -> . RETURN exp SEMICOLON
    (28) return -> . RETURN SEMICOLON
    (29) print -> . CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON
    (19) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if
    (20) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE
    (21) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE

    ID              shift and go to state 18
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    INTERFACE       shift and go to state 21
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 27
    CONSOLE         shift and go to state 28
    IF              shift and go to state 29

    block                          shift and go to state 215
    if                             shift and go to state 22
    instruction                    shift and go to state 3
    assignment                     shift and go to state 4
    declaration                    shift and go to state 5
    declaration_array              shift and go to state 6
    declaration_matrix             shift and go to state 7
    vector_functions               shift and go to state 8
    interface                      shift and go to state 9
    if_statement                   shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    foreach                        shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17

state 189

    (47) vector_functions -> ID DOT PUSH LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 216


state 190

    (61) declaration -> CONST ID COLON type EQUAL exp . SEMICOLON
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       shift and go to state 217
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 191

    (35) declaration_array -> CONST ID COLON type LBRACKET RBRACKET . EQUAL definition_array SEMICOLON
    (42) matrix_dimension -> LBRACKET RBRACKET . LBRACKET RBRACKET

    EQUAL           shift and go to state 219
    LBRACKET        shift and go to state 218


state 192

    (40) declaration_matrix -> CONST ID COLON type matrix_dimension EQUAL . LBRACKET values_list RBRACKET SEMICOLON

    LBRACKET        shift and go to state 220


state 193

    (41) matrix_dimension -> matrix_dimension LBRACKET . RBRACKET

    RBRACKET        shift and go to state 221


state 194

    (63) declaration -> VAR ID COLON type EQUAL exp . SEMICOLON
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       shift and go to state 222
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 195

    (33) declaration_array -> VAR ID COLON type LBRACKET RBRACKET . EQUAL definition_array SEMICOLON
    (34) declaration_array -> VAR ID COLON type LBRACKET RBRACKET . EQUAL error SEMICOLON
    (42) matrix_dimension -> LBRACKET RBRACKET . LBRACKET RBRACKET

    EQUAL           shift and go to state 223
    LBRACKET        shift and go to state 218


state 196

    (39) declaration_matrix -> VAR ID COLON type matrix_dimension EQUAL . LBRACKET values_list RBRACKET SEMICOLON

    LBRACKET        shift and go to state 224


state 197

    (32) interface_body -> ID COLON type .

    RBRACE          reduce using rule 32 (interface_body -> ID COLON type .)
    SEMICOLON       reduce using rule 32 (interface_body -> ID COLON type .)


state 198

    (31) interface_body -> interface_body SEMICOLON ID . COLON type

    COLON           shift and go to state 225


state 199

    (23) for -> FOR LPAREN declaration SEMICOLON exp SEMICOLON . declaration RPAREN block
    (61) declaration -> . CONST ID COLON type EQUAL exp SEMICOLON
    (62) declaration -> . CONST ID EQUAL exp SEMICOLON
    (63) declaration -> . VAR ID COLON type EQUAL exp SEMICOLON
    (64) declaration -> . VAR ID EQUAL exp SEMICOLON
    (65) declaration -> . VAR ID COLON type SEMICOLON

    CONST           shift and go to state 76
    VAR             shift and go to state 227

    declaration                    shift and go to state 226

state 200

    (24) foreach -> FOR LPAREN VAR ID OF ID . RPAREN block

    RPAREN          shift and go to state 228


state 201

    (63) declaration -> VAR ID COLON type . EQUAL exp SEMICOLON
    (65) declaration -> VAR ID COLON type . SEMICOLON

    EQUAL           shift and go to state 160
    SEMICOLON       shift and go to state 161


state 202

    (61) declaration -> CONST ID COLON type . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 156


state 203

    (54) exp -> exp DOT TOSTRING LPAREN RPAREN .

    SEMICOLON       reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)
    DOT             reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)
    PLUS            reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)
    MINUS           reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)
    TIMES           reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)
    DIVIDE          reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)
    MOD             reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)
    COMPARASION     reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)
    DIFFERENT       reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)
    GREATER         reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)
    LESS            reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)
    AND             reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)
    OR              reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)
    QUESTION        reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)
    RBRACKET        reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)
    RPAREN          reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)
    COLON           reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)
    COMMA           reduce using rule 54 (exp -> exp DOT TOSTRING LPAREN RPAREN .)


state 204

    (56) exp -> exp DOT TOLOWERCASE LPAREN RPAREN .

    SEMICOLON       reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)
    DOT             reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)
    PLUS            reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)
    MINUS           reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)
    TIMES           reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)
    DIVIDE          reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)
    MOD             reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)
    COMPARASION     reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)
    DIFFERENT       reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)
    GREATER         reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)
    LESS            reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)
    AND             reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)
    OR              reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)
    QUESTION        reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)
    RBRACKET        reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)
    RPAREN          reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)
    COLON           reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)
    COMMA           reduce using rule 56 (exp -> exp DOT TOLOWERCASE LPAREN RPAREN .)


state 205

    (58) exp -> exp DOT TOUPPERCASE LPAREN RPAREN .

    SEMICOLON       reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)
    DOT             reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)
    PLUS            reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)
    MINUS           reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)
    TIMES           reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)
    DIVIDE          reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)
    MOD             reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)
    COMPARASION     reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)
    DIFFERENT       reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)
    GREATER         reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)
    LESS            reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)
    AND             reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)
    OR              reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)
    QUESTION        reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)
    RBRACKET        reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)
    RPAREN          reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)
    COLON           reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)
    COMMA           reduce using rule 58 (exp -> exp DOT TOUPPERCASE LPAREN RPAREN .)


state 206

    (100) exp -> exp QUESTION exp COLON exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for COMPARASION resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for QUESTION resolved as shift
    SEMICOLON       reduce using rule 100 (exp -> exp QUESTION exp COLON exp .)
    RBRACKET        reduce using rule 100 (exp -> exp QUESTION exp COLON exp .)
    RPAREN          reduce using rule 100 (exp -> exp QUESTION exp COLON exp .)
    COLON           reduce using rule 100 (exp -> exp QUESTION exp COLON exp .)
    COMMA           reduce using rule 100 (exp -> exp QUESTION exp COLON exp .)
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92

  ! DOT             [ reduce using rule 100 (exp -> exp QUESTION exp COLON exp .) ]
  ! PLUS            [ reduce using rule 100 (exp -> exp QUESTION exp COLON exp .) ]
  ! MINUS           [ reduce using rule 100 (exp -> exp QUESTION exp COLON exp .) ]
  ! TIMES           [ reduce using rule 100 (exp -> exp QUESTION exp COLON exp .) ]
  ! DIVIDE          [ reduce using rule 100 (exp -> exp QUESTION exp COLON exp .) ]
  ! MOD             [ reduce using rule 100 (exp -> exp QUESTION exp COLON exp .) ]
  ! COMPARASION     [ reduce using rule 100 (exp -> exp QUESTION exp COLON exp .) ]
  ! DIFFERENT       [ reduce using rule 100 (exp -> exp QUESTION exp COLON exp .) ]
  ! GREATER         [ reduce using rule 100 (exp -> exp QUESTION exp COLON exp .) ]
  ! LESS            [ reduce using rule 100 (exp -> exp QUESTION exp COLON exp .) ]
  ! GREATER_EQUAL   [ reduce using rule 100 (exp -> exp QUESTION exp COLON exp .) ]
  ! LESS_EQUAL      [ reduce using rule 100 (exp -> exp QUESTION exp COLON exp .) ]
  ! AND             [ reduce using rule 100 (exp -> exp QUESTION exp COLON exp .) ]
  ! OR              [ reduce using rule 100 (exp -> exp QUESTION exp COLON exp .) ]
  ! QUESTION        [ reduce using rule 100 (exp -> exp QUESTION exp COLON exp .) ]


state 207

    (48) exp -> ID DOT POP LPAREN RPAREN .

    SEMICOLON       reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)
    DOT             reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)
    PLUS            reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)
    MINUS           reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)
    TIMES           reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)
    DIVIDE          reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)
    MOD             reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)
    COMPARASION     reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)
    DIFFERENT       reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)
    GREATER         reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)
    LESS            reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)
    AND             reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)
    OR              reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)
    QUESTION        reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)
    RBRACKET        reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)
    RPAREN          reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)
    COLON           reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)
    COMMA           reduce using rule 48 (exp -> ID DOT POP LPAREN RPAREN .)


state 208

    (49) exp -> ID DOT INDEXOF LPAREN exp . RPAREN
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    RPAREN          shift and go to state 229
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 209

    (50) exp -> ID DOT JOIN LPAREN RPAREN .

    SEMICOLON       reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)
    DOT             reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)
    PLUS            reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)
    MINUS           reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)
    TIMES           reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)
    DIVIDE          reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)
    MOD             reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)
    COMPARASION     reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)
    DIFFERENT       reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)
    GREATER         reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)
    LESS            reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)
    AND             reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)
    OR              reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)
    QUESTION        reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)
    RBRACKET        reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)
    RPAREN          reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)
    COLON           reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)
    COMMA           reduce using rule 50 (exp -> ID DOT JOIN LPAREN RPAREN .)


state 210

    (55) exp -> ID DOT TOSTRING LPAREN RPAREN .

    SEMICOLON       reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)
    DOT             reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)
    PLUS            reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)
    MINUS           reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)
    TIMES           reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)
    DIVIDE          reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)
    MOD             reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)
    COMPARASION     reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)
    DIFFERENT       reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)
    GREATER         reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)
    LESS            reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)
    AND             reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)
    OR              reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)
    QUESTION        reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)
    RBRACKET        reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)
    RPAREN          reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)
    COLON           reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)
    COMMA           reduce using rule 55 (exp -> ID DOT TOSTRING LPAREN RPAREN .)


state 211

    (57) exp -> ID DOT TOLOWERCASE LPAREN RPAREN .

    SEMICOLON       reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)
    DOT             reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)
    PLUS            reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)
    MINUS           reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)
    TIMES           reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)
    DIVIDE          reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)
    MOD             reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)
    COMPARASION     reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)
    DIFFERENT       reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)
    GREATER         reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)
    LESS            reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)
    AND             reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)
    OR              reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)
    QUESTION        reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)
    RBRACKET        reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)
    RPAREN          reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)
    COLON           reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)
    COMMA           reduce using rule 57 (exp -> ID DOT TOLOWERCASE LPAREN RPAREN .)


state 212

    (59) exp -> ID DOT TOUPPERCASE LPAREN RPAREN .

    SEMICOLON       reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)
    DOT             reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)
    PLUS            reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)
    MINUS           reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)
    TIMES           reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)
    DIVIDE          reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)
    MOD             reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)
    COMPARASION     reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)
    DIFFERENT       reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)
    GREATER         reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)
    LESS            reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)
    AND             reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)
    OR              reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)
    QUESTION        reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)
    RBRACKET        reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)
    RPAREN          reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)
    COLON           reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)
    COMMA           reduce using rule 59 (exp -> ID DOT TOUPPERCASE LPAREN RPAREN .)


state 213

    (29) print -> CONSOLE DOT LOG LPAREN exp_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 230


state 214

    (73) exp_list -> exp_list COMMA . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp                            shift and go to state 231
    list_access                    shift and go to state 58

state 215

    (19) if -> IF LPAREN exp RPAREN LBRACE block . RBRACE ELSE if
    (20) if -> IF LPAREN exp RPAREN LBRACE block . RBRACE
    (21) if -> IF LPAREN exp RPAREN LBRACE block . RBRACE ELSE LBRACE block RBRACE
    (2) block -> block . instruction
    (4) instruction -> . assignment
    (5) instruction -> . declaration
    (6) instruction -> . declaration_array
    (7) instruction -> . declaration_matrix
    (8) instruction -> . vector_functions
    (9) instruction -> . interface
    (10) instruction -> . if_statement
    (11) instruction -> . while
    (12) instruction -> . for
    (13) instruction -> . foreach
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (66) assignment -> . ID EQUAL exp SEMICOLON
    (67) assignment -> . ID PLUS_EQUAL exp SEMICOLON
    (68) assignment -> . ID MINUS_EQUAL exp SEMICOLON
    (69) assignment -> . ID index_list EQUAL exp SEMICOLON
    (61) declaration -> . CONST ID COLON type EQUAL exp SEMICOLON
    (62) declaration -> . CONST ID EQUAL exp SEMICOLON
    (63) declaration -> . VAR ID COLON type EQUAL exp SEMICOLON
    (64) declaration -> . VAR ID EQUAL exp SEMICOLON
    (65) declaration -> . VAR ID COLON type SEMICOLON
    (33) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (34) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON
    (35) declaration_array -> . CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (39) declaration_matrix -> . VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (40) declaration_matrix -> . CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (47) vector_functions -> . ID DOT PUSH LPAREN exp RPAREN SEMICOLON
    (30) interface -> . INTERFACE ID LBRACE interface_body RBRACE
    (18) if_statement -> . if
    (22) while -> . WHILE LPAREN exp RPAREN block
    (23) for -> . FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block
    (24) foreach -> . FOR LPAREN VAR ID OF ID RPAREN block
    (25) break -> . BREAK SEMICOLON
    (26) continue -> . CONTINUE SEMICOLON
    (27) return -> . RETURN exp SEMICOLON
    (28) return -> . RETURN SEMICOLON
    (29) print -> . CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON
    (19) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if
    (20) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE
    (21) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE

    RBRACE          shift and go to state 232
    ID              shift and go to state 18
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    INTERFACE       shift and go to state 21
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 27
    CONSOLE         shift and go to state 28
    IF              shift and go to state 29

    if                             shift and go to state 22
    instruction                    shift and go to state 30
    assignment                     shift and go to state 4
    declaration                    shift and go to state 5
    declaration_array              shift and go to state 6
    declaration_matrix             shift and go to state 7
    vector_functions               shift and go to state 8
    interface                      shift and go to state 9
    if_statement                   shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    foreach                        shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17

state 216

    (47) vector_functions -> ID DOT PUSH LPAREN exp RPAREN SEMICOLON .

    ID              reduce using rule 47 (vector_functions -> ID DOT PUSH LPAREN exp RPAREN SEMICOLON .)
    CONST           reduce using rule 47 (vector_functions -> ID DOT PUSH LPAREN exp RPAREN SEMICOLON .)
    VAR             reduce using rule 47 (vector_functions -> ID DOT PUSH LPAREN exp RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 47 (vector_functions -> ID DOT PUSH LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 47 (vector_functions -> ID DOT PUSH LPAREN exp RPAREN SEMICOLON .)
    FOR             reduce using rule 47 (vector_functions -> ID DOT PUSH LPAREN exp RPAREN SEMICOLON .)
    BREAK           reduce using rule 47 (vector_functions -> ID DOT PUSH LPAREN exp RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 47 (vector_functions -> ID DOT PUSH LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 47 (vector_functions -> ID DOT PUSH LPAREN exp RPAREN SEMICOLON .)
    CONSOLE         reduce using rule 47 (vector_functions -> ID DOT PUSH LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 47 (vector_functions -> ID DOT PUSH LPAREN exp RPAREN SEMICOLON .)
    $end            reduce using rule 47 (vector_functions -> ID DOT PUSH LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 47 (vector_functions -> ID DOT PUSH LPAREN exp RPAREN SEMICOLON .)


state 217

    (61) declaration -> CONST ID COLON type EQUAL exp SEMICOLON .

    ID              reduce using rule 61 (declaration -> CONST ID COLON type EQUAL exp SEMICOLON .)
    CONST           reduce using rule 61 (declaration -> CONST ID COLON type EQUAL exp SEMICOLON .)
    VAR             reduce using rule 61 (declaration -> CONST ID COLON type EQUAL exp SEMICOLON .)
    INTERFACE       reduce using rule 61 (declaration -> CONST ID COLON type EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 61 (declaration -> CONST ID COLON type EQUAL exp SEMICOLON .)
    FOR             reduce using rule 61 (declaration -> CONST ID COLON type EQUAL exp SEMICOLON .)
    BREAK           reduce using rule 61 (declaration -> CONST ID COLON type EQUAL exp SEMICOLON .)
    CONTINUE        reduce using rule 61 (declaration -> CONST ID COLON type EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 61 (declaration -> CONST ID COLON type EQUAL exp SEMICOLON .)
    CONSOLE         reduce using rule 61 (declaration -> CONST ID COLON type EQUAL exp SEMICOLON .)
    IF              reduce using rule 61 (declaration -> CONST ID COLON type EQUAL exp SEMICOLON .)
    $end            reduce using rule 61 (declaration -> CONST ID COLON type EQUAL exp SEMICOLON .)
    SEMICOLON       reduce using rule 61 (declaration -> CONST ID COLON type EQUAL exp SEMICOLON .)
    RBRACE          reduce using rule 61 (declaration -> CONST ID COLON type EQUAL exp SEMICOLON .)
    RPAREN          reduce using rule 61 (declaration -> CONST ID COLON type EQUAL exp SEMICOLON .)


state 218

    (42) matrix_dimension -> LBRACKET RBRACKET LBRACKET . RBRACKET

    RBRACKET        shift and go to state 233


state 219

    (35) declaration_array -> CONST ID COLON type LBRACKET RBRACKET EQUAL . definition_array SEMICOLON
    (36) definition_array -> . LBRACKET exp_list RBRACKET
    (37) definition_array -> . LBRACKET RBRACKET
    (38) definition_array -> . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    LBRACKET        shift and go to state 234
    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    definition_array               shift and go to state 235
    exp                            shift and go to state 236
    list_access                    shift and go to state 58

state 220

    (40) declaration_matrix -> CONST ID COLON type matrix_dimension EQUAL LBRACKET . values_list RBRACKET SEMICOLON
    (43) values_list -> . values_list COMMA LBRACKET arg RBRACKET
    (44) values_list -> . LBRACKET arg RBRACKET

    LBRACKET        shift and go to state 237

    values_list                    shift and go to state 238

state 221

    (41) matrix_dimension -> matrix_dimension LBRACKET RBRACKET .

    EQUAL           reduce using rule 41 (matrix_dimension -> matrix_dimension LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 41 (matrix_dimension -> matrix_dimension LBRACKET RBRACKET .)


state 222

    (63) declaration -> VAR ID COLON type EQUAL exp SEMICOLON .

    ID              reduce using rule 63 (declaration -> VAR ID COLON type EQUAL exp SEMICOLON .)
    CONST           reduce using rule 63 (declaration -> VAR ID COLON type EQUAL exp SEMICOLON .)
    VAR             reduce using rule 63 (declaration -> VAR ID COLON type EQUAL exp SEMICOLON .)
    INTERFACE       reduce using rule 63 (declaration -> VAR ID COLON type EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 63 (declaration -> VAR ID COLON type EQUAL exp SEMICOLON .)
    FOR             reduce using rule 63 (declaration -> VAR ID COLON type EQUAL exp SEMICOLON .)
    BREAK           reduce using rule 63 (declaration -> VAR ID COLON type EQUAL exp SEMICOLON .)
    CONTINUE        reduce using rule 63 (declaration -> VAR ID COLON type EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 63 (declaration -> VAR ID COLON type EQUAL exp SEMICOLON .)
    CONSOLE         reduce using rule 63 (declaration -> VAR ID COLON type EQUAL exp SEMICOLON .)
    IF              reduce using rule 63 (declaration -> VAR ID COLON type EQUAL exp SEMICOLON .)
    $end            reduce using rule 63 (declaration -> VAR ID COLON type EQUAL exp SEMICOLON .)
    SEMICOLON       reduce using rule 63 (declaration -> VAR ID COLON type EQUAL exp SEMICOLON .)
    RBRACE          reduce using rule 63 (declaration -> VAR ID COLON type EQUAL exp SEMICOLON .)
    RPAREN          reduce using rule 63 (declaration -> VAR ID COLON type EQUAL exp SEMICOLON .)


state 223

    (33) declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL . definition_array SEMICOLON
    (34) declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL . error SEMICOLON
    (36) definition_array -> . LBRACKET exp_list RBRACKET
    (37) definition_array -> . LBRACKET RBRACKET
    (38) definition_array -> . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    error           shift and go to state 240
    LBRACKET        shift and go to state 234
    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    definition_array               shift and go to state 239
    exp                            shift and go to state 236
    list_access                    shift and go to state 58

state 224

    (39) declaration_matrix -> VAR ID COLON type matrix_dimension EQUAL LBRACKET . values_list RBRACKET SEMICOLON
    (43) values_list -> . values_list COMMA LBRACKET arg RBRACKET
    (44) values_list -> . LBRACKET arg RBRACKET

    LBRACKET        shift and go to state 237

    values_list                    shift and go to state 241

state 225

    (31) interface_body -> interface_body SEMICOLON ID COLON . type
    (72) type -> . TYPES

    TYPES           shift and go to state 112

    type                           shift and go to state 242

state 226

    (23) for -> FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration . RPAREN block

    RPAREN          shift and go to state 243


state 227

    (63) declaration -> VAR . ID COLON type EQUAL exp SEMICOLON
    (64) declaration -> VAR . ID EQUAL exp SEMICOLON
    (65) declaration -> VAR . ID COLON type SEMICOLON

    ID              shift and go to state 244


state 228

    (24) foreach -> FOR LPAREN VAR ID OF ID RPAREN . block
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . assignment
    (5) instruction -> . declaration
    (6) instruction -> . declaration_array
    (7) instruction -> . declaration_matrix
    (8) instruction -> . vector_functions
    (9) instruction -> . interface
    (10) instruction -> . if_statement
    (11) instruction -> . while
    (12) instruction -> . for
    (13) instruction -> . foreach
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (66) assignment -> . ID EQUAL exp SEMICOLON
    (67) assignment -> . ID PLUS_EQUAL exp SEMICOLON
    (68) assignment -> . ID MINUS_EQUAL exp SEMICOLON
    (69) assignment -> . ID index_list EQUAL exp SEMICOLON
    (61) declaration -> . CONST ID COLON type EQUAL exp SEMICOLON
    (62) declaration -> . CONST ID EQUAL exp SEMICOLON
    (63) declaration -> . VAR ID COLON type EQUAL exp SEMICOLON
    (64) declaration -> . VAR ID EQUAL exp SEMICOLON
    (65) declaration -> . VAR ID COLON type SEMICOLON
    (33) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (34) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON
    (35) declaration_array -> . CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (39) declaration_matrix -> . VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (40) declaration_matrix -> . CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (47) vector_functions -> . ID DOT PUSH LPAREN exp RPAREN SEMICOLON
    (30) interface -> . INTERFACE ID LBRACE interface_body RBRACE
    (18) if_statement -> . if
    (22) while -> . WHILE LPAREN exp RPAREN block
    (23) for -> . FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block
    (24) foreach -> . FOR LPAREN VAR ID OF ID RPAREN block
    (25) break -> . BREAK SEMICOLON
    (26) continue -> . CONTINUE SEMICOLON
    (27) return -> . RETURN exp SEMICOLON
    (28) return -> . RETURN SEMICOLON
    (29) print -> . CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON
    (19) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if
    (20) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE
    (21) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE

    ID              shift and go to state 18
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    INTERFACE       shift and go to state 21
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 27
    CONSOLE         shift and go to state 28
    IF              shift and go to state 29

    block                          shift and go to state 245
    instruction                    shift and go to state 3
    assignment                     shift and go to state 4
    declaration                    shift and go to state 5
    declaration_array              shift and go to state 6
    declaration_matrix             shift and go to state 7
    vector_functions               shift and go to state 8
    interface                      shift and go to state 9
    if_statement                   shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    foreach                        shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    if                             shift and go to state 22

state 229

    (49) exp -> ID DOT INDEXOF LPAREN exp RPAREN .

    SEMICOLON       reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)
    DOT             reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)
    PLUS            reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)
    MINUS           reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)
    TIMES           reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)
    MOD             reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)
    COMPARASION     reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)
    DIFFERENT       reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)
    GREATER         reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)
    LESS            reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)
    GREATER_EQUAL   reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)
    LESS_EQUAL      reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)
    AND             reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)
    OR              reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)
    QUESTION        reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)
    RPAREN          reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)
    COLON           reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)
    COMMA           reduce using rule 49 (exp -> ID DOT INDEXOF LPAREN exp RPAREN .)


state 230

    (29) print -> CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON .

    ID              reduce using rule 29 (print -> CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON .)
    CONST           reduce using rule 29 (print -> CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON .)
    VAR             reduce using rule 29 (print -> CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON .)
    INTERFACE       reduce using rule 29 (print -> CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON .)
    WHILE           reduce using rule 29 (print -> CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON .)
    FOR             reduce using rule 29 (print -> CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON .)
    BREAK           reduce using rule 29 (print -> CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 29 (print -> CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON .)
    RETURN          reduce using rule 29 (print -> CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON .)
    CONSOLE         reduce using rule 29 (print -> CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON .)
    IF              reduce using rule 29 (print -> CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON .)
    $end            reduce using rule 29 (print -> CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON .)
    RBRACE          reduce using rule 29 (print -> CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON .)


state 231

    (73) exp_list -> exp_list COMMA exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    RPAREN          reduce using rule 73 (exp_list -> exp_list COMMA exp .)
    COMMA           reduce using rule 73 (exp_list -> exp_list COMMA exp .)
    RBRACKET        reduce using rule 73 (exp_list -> exp_list COMMA exp .)
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 232

    (19) if -> IF LPAREN exp RPAREN LBRACE block RBRACE . ELSE if
    (20) if -> IF LPAREN exp RPAREN LBRACE block RBRACE .
    (21) if -> IF LPAREN exp RPAREN LBRACE block RBRACE . ELSE LBRACE block RBRACE

    ELSE            shift and go to state 246
    ID              reduce using rule 20 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE .)
    CONST           reduce using rule 20 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE .)
    VAR             reduce using rule 20 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE .)
    INTERFACE       reduce using rule 20 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE .)
    WHILE           reduce using rule 20 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE .)
    FOR             reduce using rule 20 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE .)
    BREAK           reduce using rule 20 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE .)
    CONTINUE        reduce using rule 20 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE .)
    RETURN          reduce using rule 20 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE .)
    CONSOLE         reduce using rule 20 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE .)
    IF              reduce using rule 20 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE .)
    $end            reduce using rule 20 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE .)
    RBRACE          reduce using rule 20 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE .)


state 233

    (42) matrix_dimension -> LBRACKET RBRACKET LBRACKET RBRACKET .

    EQUAL           reduce using rule 42 (matrix_dimension -> LBRACKET RBRACKET LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 42 (matrix_dimension -> LBRACKET RBRACKET LBRACKET RBRACKET .)


state 234

    (36) definition_array -> LBRACKET . exp_list RBRACKET
    (37) definition_array -> LBRACKET . RBRACKET
    (73) exp_list -> . exp_list COMMA exp
    (74) exp_list -> . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    RBRACKET        shift and go to state 248
    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    exp_list                       shift and go to state 247
    exp                            shift and go to state 187
    list_access                    shift and go to state 58

state 235

    (35) declaration_array -> CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array . SEMICOLON

    SEMICOLON       shift and go to state 249


state 236

    (38) definition_array -> exp .
    (54) exp -> exp . DOT TOSTRING LPAREN RPAREN
    (56) exp -> exp . DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> exp . DOT TOUPPERCASE LPAREN RPAREN
    (75) exp -> exp . PLUS exp
    (76) exp -> exp . MINUS exp
    (77) exp -> exp . TIMES exp
    (78) exp -> exp . DIVIDE exp
    (79) exp -> exp . MOD exp
    (82) exp -> exp . COMPARASION exp
    (83) exp -> exp . DIFFERENT exp
    (84) exp -> exp . GREATER exp
    (85) exp -> exp . LESS exp
    (86) exp -> exp . GREATER_EQUAL exp
    (87) exp -> exp . LESS_EQUAL exp
    (88) exp -> exp . AND exp
    (89) exp -> exp . OR exp
    (100) exp -> exp . QUESTION exp COLON exp

    SEMICOLON       reduce using rule 38 (definition_array -> exp .)
    DOT             shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 83
    COMPARASION     shift and go to state 84
    DIFFERENT       shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    QUESTION        shift and go to state 92


state 237

    (44) values_list -> LBRACKET . arg RBRACKET
    (45) arg -> . values_list
    (46) arg -> . exp_list
    (43) values_list -> . values_list COMMA LBRACKET arg RBRACKET
    (44) values_list -> . LBRACKET arg RBRACKET
    (73) exp_list -> . exp_list COMMA exp
    (74) exp_list -> . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    LBRACKET        shift and go to state 237
    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    arg                            shift and go to state 250
    values_list                    shift and go to state 251
    exp_list                       shift and go to state 252
    exp                            shift and go to state 187
    list_access                    shift and go to state 58

state 238

    (40) declaration_matrix -> CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list . RBRACKET SEMICOLON
    (43) values_list -> values_list . COMMA LBRACKET arg RBRACKET

    RBRACKET        shift and go to state 253
    COMMA           shift and go to state 254


state 239

    (33) declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array . SEMICOLON

    SEMICOLON       shift and go to state 255


state 240

    (34) declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL error . SEMICOLON

    SEMICOLON       shift and go to state 256


state 241

    (39) declaration_matrix -> VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list . RBRACKET SEMICOLON
    (43) values_list -> values_list . COMMA LBRACKET arg RBRACKET

    RBRACKET        shift and go to state 257
    COMMA           shift and go to state 254


state 242

    (31) interface_body -> interface_body SEMICOLON ID COLON type .

    RBRACE          reduce using rule 31 (interface_body -> interface_body SEMICOLON ID COLON type .)
    SEMICOLON       reduce using rule 31 (interface_body -> interface_body SEMICOLON ID COLON type .)


state 243

    (23) for -> FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN . block
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . assignment
    (5) instruction -> . declaration
    (6) instruction -> . declaration_array
    (7) instruction -> . declaration_matrix
    (8) instruction -> . vector_functions
    (9) instruction -> . interface
    (10) instruction -> . if_statement
    (11) instruction -> . while
    (12) instruction -> . for
    (13) instruction -> . foreach
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (66) assignment -> . ID EQUAL exp SEMICOLON
    (67) assignment -> . ID PLUS_EQUAL exp SEMICOLON
    (68) assignment -> . ID MINUS_EQUAL exp SEMICOLON
    (69) assignment -> . ID index_list EQUAL exp SEMICOLON
    (61) declaration -> . CONST ID COLON type EQUAL exp SEMICOLON
    (62) declaration -> . CONST ID EQUAL exp SEMICOLON
    (63) declaration -> . VAR ID COLON type EQUAL exp SEMICOLON
    (64) declaration -> . VAR ID EQUAL exp SEMICOLON
    (65) declaration -> . VAR ID COLON type SEMICOLON
    (33) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (34) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON
    (35) declaration_array -> . CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (39) declaration_matrix -> . VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (40) declaration_matrix -> . CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (47) vector_functions -> . ID DOT PUSH LPAREN exp RPAREN SEMICOLON
    (30) interface -> . INTERFACE ID LBRACE interface_body RBRACE
    (18) if_statement -> . if
    (22) while -> . WHILE LPAREN exp RPAREN block
    (23) for -> . FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block
    (24) foreach -> . FOR LPAREN VAR ID OF ID RPAREN block
    (25) break -> . BREAK SEMICOLON
    (26) continue -> . CONTINUE SEMICOLON
    (27) return -> . RETURN exp SEMICOLON
    (28) return -> . RETURN SEMICOLON
    (29) print -> . CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON
    (19) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if
    (20) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE
    (21) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE

    ID              shift and go to state 18
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    INTERFACE       shift and go to state 21
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 27
    CONSOLE         shift and go to state 28
    IF              shift and go to state 29

    declaration                    shift and go to state 5
    block                          shift and go to state 258
    instruction                    shift and go to state 3
    assignment                     shift and go to state 4
    declaration_array              shift and go to state 6
    declaration_matrix             shift and go to state 7
    vector_functions               shift and go to state 8
    interface                      shift and go to state 9
    if_statement                   shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    foreach                        shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    if                             shift and go to state 22

state 244

    (63) declaration -> VAR ID . COLON type EQUAL exp SEMICOLON
    (64) declaration -> VAR ID . EQUAL exp SEMICOLON
    (65) declaration -> VAR ID . COLON type SEMICOLON

    COLON           shift and go to state 171
    EQUAL           shift and go to state 71


state 245

    (24) foreach -> FOR LPAREN VAR ID OF ID RPAREN block .
    (2) block -> block . instruction
    (4) instruction -> . assignment
    (5) instruction -> . declaration
    (6) instruction -> . declaration_array
    (7) instruction -> . declaration_matrix
    (8) instruction -> . vector_functions
    (9) instruction -> . interface
    (10) instruction -> . if_statement
    (11) instruction -> . while
    (12) instruction -> . for
    (13) instruction -> . foreach
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (66) assignment -> . ID EQUAL exp SEMICOLON
    (67) assignment -> . ID PLUS_EQUAL exp SEMICOLON
    (68) assignment -> . ID MINUS_EQUAL exp SEMICOLON
    (69) assignment -> . ID index_list EQUAL exp SEMICOLON
    (61) declaration -> . CONST ID COLON type EQUAL exp SEMICOLON
    (62) declaration -> . CONST ID EQUAL exp SEMICOLON
    (63) declaration -> . VAR ID COLON type EQUAL exp SEMICOLON
    (64) declaration -> . VAR ID EQUAL exp SEMICOLON
    (65) declaration -> . VAR ID COLON type SEMICOLON
    (33) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (34) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON
    (35) declaration_array -> . CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (39) declaration_matrix -> . VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (40) declaration_matrix -> . CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (47) vector_functions -> . ID DOT PUSH LPAREN exp RPAREN SEMICOLON
    (30) interface -> . INTERFACE ID LBRACE interface_body RBRACE
    (18) if_statement -> . if
    (22) while -> . WHILE LPAREN exp RPAREN block
    (23) for -> . FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block
    (24) foreach -> . FOR LPAREN VAR ID OF ID RPAREN block
    (25) break -> . BREAK SEMICOLON
    (26) continue -> . CONTINUE SEMICOLON
    (27) return -> . RETURN exp SEMICOLON
    (28) return -> . RETURN SEMICOLON
    (29) print -> . CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON
    (19) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if
    (20) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE
    (21) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 24 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .)
    RBRACE          reduce using rule 24 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .)
    ID              shift and go to state 18
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    INTERFACE       shift and go to state 21
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 27
    CONSOLE         shift and go to state 28
    IF              shift and go to state 29

  ! ID              [ reduce using rule 24 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .) ]
  ! CONST           [ reduce using rule 24 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .) ]
  ! VAR             [ reduce using rule 24 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .) ]
  ! INTERFACE       [ reduce using rule 24 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .) ]
  ! WHILE           [ reduce using rule 24 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .) ]
  ! FOR             [ reduce using rule 24 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .) ]
  ! BREAK           [ reduce using rule 24 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .) ]
  ! CONTINUE        [ reduce using rule 24 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .) ]
  ! RETURN          [ reduce using rule 24 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .) ]
  ! CONSOLE         [ reduce using rule 24 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .) ]
  ! IF              [ reduce using rule 24 (foreach -> FOR LPAREN VAR ID OF ID RPAREN block .) ]

    instruction                    shift and go to state 30
    assignment                     shift and go to state 4
    declaration                    shift and go to state 5
    declaration_array              shift and go to state 6
    declaration_matrix             shift and go to state 7
    vector_functions               shift and go to state 8
    interface                      shift and go to state 9
    if_statement                   shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    foreach                        shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    if                             shift and go to state 22

state 246

    (19) if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE . if
    (21) if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE . LBRACE block RBRACE
    (19) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if
    (20) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE
    (21) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE

    LBRACE          shift and go to state 259
    IF              shift and go to state 29

    if                             shift and go to state 260

state 247

    (36) definition_array -> LBRACKET exp_list . RBRACKET
    (73) exp_list -> exp_list . COMMA exp

    RBRACKET        shift and go to state 261
    COMMA           shift and go to state 214


state 248

    (37) definition_array -> LBRACKET RBRACKET .

    SEMICOLON       reduce using rule 37 (definition_array -> LBRACKET RBRACKET .)


state 249

    (35) declaration_array -> CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .

    ID              reduce using rule 35 (declaration_array -> CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    CONST           reduce using rule 35 (declaration_array -> CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    VAR             reduce using rule 35 (declaration_array -> CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    INTERFACE       reduce using rule 35 (declaration_array -> CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    WHILE           reduce using rule 35 (declaration_array -> CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    FOR             reduce using rule 35 (declaration_array -> CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    BREAK           reduce using rule 35 (declaration_array -> CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    CONTINUE        reduce using rule 35 (declaration_array -> CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    RETURN          reduce using rule 35 (declaration_array -> CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    CONSOLE         reduce using rule 35 (declaration_array -> CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    IF              reduce using rule 35 (declaration_array -> CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    $end            reduce using rule 35 (declaration_array -> CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    RBRACE          reduce using rule 35 (declaration_array -> CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)


state 250

    (44) values_list -> LBRACKET arg . RBRACKET

    RBRACKET        shift and go to state 262


state 251

    (45) arg -> values_list .
    (43) values_list -> values_list . COMMA LBRACKET arg RBRACKET

    RBRACKET        reduce using rule 45 (arg -> values_list .)
    COMMA           shift and go to state 254


state 252

    (46) arg -> exp_list .
    (73) exp_list -> exp_list . COMMA exp

    RBRACKET        reduce using rule 46 (arg -> exp_list .)
    COMMA           shift and go to state 214


state 253

    (40) declaration_matrix -> CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 263


state 254

    (43) values_list -> values_list COMMA . LBRACKET arg RBRACKET

    LBRACKET        shift and go to state 264


state 255

    (33) declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .

    ID              reduce using rule 33 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    CONST           reduce using rule 33 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    VAR             reduce using rule 33 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    INTERFACE       reduce using rule 33 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    WHILE           reduce using rule 33 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    FOR             reduce using rule 33 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    BREAK           reduce using rule 33 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    CONTINUE        reduce using rule 33 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    RETURN          reduce using rule 33 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    CONSOLE         reduce using rule 33 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    IF              reduce using rule 33 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    $end            reduce using rule 33 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)
    RBRACE          reduce using rule 33 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON .)


state 256

    (34) declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON .

    ID              reduce using rule 34 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON .)
    CONST           reduce using rule 34 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON .)
    VAR             reduce using rule 34 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON .)
    INTERFACE       reduce using rule 34 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON .)
    WHILE           reduce using rule 34 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON .)
    FOR             reduce using rule 34 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON .)
    BREAK           reduce using rule 34 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON .)
    CONTINUE        reduce using rule 34 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON .)
    RETURN          reduce using rule 34 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON .)
    CONSOLE         reduce using rule 34 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON .)
    IF              reduce using rule 34 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON .)
    $end            reduce using rule 34 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON .)
    RBRACE          reduce using rule 34 (declaration_array -> VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON .)


state 257

    (39) declaration_matrix -> VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 265


state 258

    (23) for -> FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block .
    (2) block -> block . instruction
    (4) instruction -> . assignment
    (5) instruction -> . declaration
    (6) instruction -> . declaration_array
    (7) instruction -> . declaration_matrix
    (8) instruction -> . vector_functions
    (9) instruction -> . interface
    (10) instruction -> . if_statement
    (11) instruction -> . while
    (12) instruction -> . for
    (13) instruction -> . foreach
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (66) assignment -> . ID EQUAL exp SEMICOLON
    (67) assignment -> . ID PLUS_EQUAL exp SEMICOLON
    (68) assignment -> . ID MINUS_EQUAL exp SEMICOLON
    (69) assignment -> . ID index_list EQUAL exp SEMICOLON
    (61) declaration -> . CONST ID COLON type EQUAL exp SEMICOLON
    (62) declaration -> . CONST ID EQUAL exp SEMICOLON
    (63) declaration -> . VAR ID COLON type EQUAL exp SEMICOLON
    (64) declaration -> . VAR ID EQUAL exp SEMICOLON
    (65) declaration -> . VAR ID COLON type SEMICOLON
    (33) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (34) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON
    (35) declaration_array -> . CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (39) declaration_matrix -> . VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (40) declaration_matrix -> . CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (47) vector_functions -> . ID DOT PUSH LPAREN exp RPAREN SEMICOLON
    (30) interface -> . INTERFACE ID LBRACE interface_body RBRACE
    (18) if_statement -> . if
    (22) while -> . WHILE LPAREN exp RPAREN block
    (23) for -> . FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block
    (24) foreach -> . FOR LPAREN VAR ID OF ID RPAREN block
    (25) break -> . BREAK SEMICOLON
    (26) continue -> . CONTINUE SEMICOLON
    (27) return -> . RETURN exp SEMICOLON
    (28) return -> . RETURN SEMICOLON
    (29) print -> . CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON
    (19) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if
    (20) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE
    (21) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 23 (for -> FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block .)
    RBRACE          reduce using rule 23 (for -> FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block .)
    ID              shift and go to state 18
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    INTERFACE       shift and go to state 21
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 27
    CONSOLE         shift and go to state 28
    IF              shift and go to state 29

  ! ID              [ reduce using rule 23 (for -> FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block .) ]
  ! CONST           [ reduce using rule 23 (for -> FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block .) ]
  ! VAR             [ reduce using rule 23 (for -> FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block .) ]
  ! INTERFACE       [ reduce using rule 23 (for -> FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block .) ]
  ! WHILE           [ reduce using rule 23 (for -> FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block .) ]
  ! FOR             [ reduce using rule 23 (for -> FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block .) ]
  ! BREAK           [ reduce using rule 23 (for -> FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block .) ]
  ! CONTINUE        [ reduce using rule 23 (for -> FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block .) ]
  ! RETURN          [ reduce using rule 23 (for -> FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block .) ]
  ! CONSOLE         [ reduce using rule 23 (for -> FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block .) ]
  ! IF              [ reduce using rule 23 (for -> FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block .) ]

    declaration                    shift and go to state 5
    instruction                    shift and go to state 30
    assignment                     shift and go to state 4
    declaration_array              shift and go to state 6
    declaration_matrix             shift and go to state 7
    vector_functions               shift and go to state 8
    interface                      shift and go to state 9
    if_statement                   shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    foreach                        shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    if                             shift and go to state 22

state 259

    (21) if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE . block RBRACE
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . assignment
    (5) instruction -> . declaration
    (6) instruction -> . declaration_array
    (7) instruction -> . declaration_matrix
    (8) instruction -> . vector_functions
    (9) instruction -> . interface
    (10) instruction -> . if_statement
    (11) instruction -> . while
    (12) instruction -> . for
    (13) instruction -> . foreach
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (66) assignment -> . ID EQUAL exp SEMICOLON
    (67) assignment -> . ID PLUS_EQUAL exp SEMICOLON
    (68) assignment -> . ID MINUS_EQUAL exp SEMICOLON
    (69) assignment -> . ID index_list EQUAL exp SEMICOLON
    (61) declaration -> . CONST ID COLON type EQUAL exp SEMICOLON
    (62) declaration -> . CONST ID EQUAL exp SEMICOLON
    (63) declaration -> . VAR ID COLON type EQUAL exp SEMICOLON
    (64) declaration -> . VAR ID EQUAL exp SEMICOLON
    (65) declaration -> . VAR ID COLON type SEMICOLON
    (33) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (34) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON
    (35) declaration_array -> . CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (39) declaration_matrix -> . VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (40) declaration_matrix -> . CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (47) vector_functions -> . ID DOT PUSH LPAREN exp RPAREN SEMICOLON
    (30) interface -> . INTERFACE ID LBRACE interface_body RBRACE
    (18) if_statement -> . if
    (22) while -> . WHILE LPAREN exp RPAREN block
    (23) for -> . FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block
    (24) foreach -> . FOR LPAREN VAR ID OF ID RPAREN block
    (25) break -> . BREAK SEMICOLON
    (26) continue -> . CONTINUE SEMICOLON
    (27) return -> . RETURN exp SEMICOLON
    (28) return -> . RETURN SEMICOLON
    (29) print -> . CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON
    (19) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if
    (20) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE
    (21) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE

    ID              shift and go to state 18
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    INTERFACE       shift and go to state 21
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 27
    CONSOLE         shift and go to state 28
    IF              shift and go to state 29

    block                          shift and go to state 266
    instruction                    shift and go to state 3
    assignment                     shift and go to state 4
    declaration                    shift and go to state 5
    declaration_array              shift and go to state 6
    declaration_matrix             shift and go to state 7
    vector_functions               shift and go to state 8
    interface                      shift and go to state 9
    if_statement                   shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    foreach                        shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    if                             shift and go to state 22

state 260

    (19) if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if .

    ID              reduce using rule 19 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if .)
    CONST           reduce using rule 19 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if .)
    VAR             reduce using rule 19 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if .)
    INTERFACE       reduce using rule 19 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if .)
    WHILE           reduce using rule 19 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if .)
    FOR             reduce using rule 19 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if .)
    BREAK           reduce using rule 19 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if .)
    CONTINUE        reduce using rule 19 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if .)
    RETURN          reduce using rule 19 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if .)
    CONSOLE         reduce using rule 19 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if .)
    IF              reduce using rule 19 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if .)
    $end            reduce using rule 19 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if .)
    RBRACE          reduce using rule 19 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if .)


state 261

    (36) definition_array -> LBRACKET exp_list RBRACKET .

    SEMICOLON       reduce using rule 36 (definition_array -> LBRACKET exp_list RBRACKET .)


state 262

    (44) values_list -> LBRACKET arg RBRACKET .

    RBRACKET        reduce using rule 44 (values_list -> LBRACKET arg RBRACKET .)
    COMMA           reduce using rule 44 (values_list -> LBRACKET arg RBRACKET .)


state 263

    (40) declaration_matrix -> CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .

    ID              reduce using rule 40 (declaration_matrix -> CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    CONST           reduce using rule 40 (declaration_matrix -> CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    VAR             reduce using rule 40 (declaration_matrix -> CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    INTERFACE       reduce using rule 40 (declaration_matrix -> CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    WHILE           reduce using rule 40 (declaration_matrix -> CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    FOR             reduce using rule 40 (declaration_matrix -> CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    BREAK           reduce using rule 40 (declaration_matrix -> CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    CONTINUE        reduce using rule 40 (declaration_matrix -> CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    RETURN          reduce using rule 40 (declaration_matrix -> CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    CONSOLE         reduce using rule 40 (declaration_matrix -> CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    IF              reduce using rule 40 (declaration_matrix -> CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    $end            reduce using rule 40 (declaration_matrix -> CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 40 (declaration_matrix -> CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)


state 264

    (43) values_list -> values_list COMMA LBRACKET . arg RBRACKET
    (45) arg -> . values_list
    (46) arg -> . exp_list
    (43) values_list -> . values_list COMMA LBRACKET arg RBRACKET
    (44) values_list -> . LBRACKET arg RBRACKET
    (73) exp_list -> . exp_list COMMA exp
    (74) exp_list -> . exp
    (48) exp -> . ID DOT POP LPAREN RPAREN
    (49) exp -> . ID DOT INDEXOF LPAREN exp RPAREN
    (50) exp -> . ID DOT JOIN LPAREN RPAREN
    (51) exp -> . ID DOT LENGTH
    (52) exp -> . PARSEINT LPAREN exp RPAREN
    (53) exp -> . PARSEFLOAT LPAREN exp RPAREN
    (54) exp -> . exp DOT TOSTRING LPAREN RPAREN
    (55) exp -> . ID DOT TOSTRING LPAREN RPAREN
    (56) exp -> . exp DOT TOLOWERCASE LPAREN RPAREN
    (57) exp -> . ID DOT TOLOWERCASE LPAREN RPAREN
    (58) exp -> . exp DOT TOUPPERCASE LPAREN RPAREN
    (59) exp -> . ID DOT TOUPPERCASE LPAREN RPAREN
    (60) exp -> . TYPEOF exp
    (75) exp -> . exp PLUS exp
    (76) exp -> . exp MINUS exp
    (77) exp -> . exp TIMES exp
    (78) exp -> . exp DIVIDE exp
    (79) exp -> . exp MOD exp
    (80) exp -> . MINUS exp
    (81) exp -> . NOT exp
    (82) exp -> . exp COMPARASION exp
    (83) exp -> . exp DIFFERENT exp
    (84) exp -> . exp GREATER exp
    (85) exp -> . exp LESS exp
    (86) exp -> . exp GREATER_EQUAL exp
    (87) exp -> . exp LESS_EQUAL exp
    (88) exp -> . exp AND exp
    (89) exp -> . exp OR exp
    (90) exp -> . NUMBER_LEX
    (91) exp -> . FLOAT_LEX
    (92) exp -> . STRING_LEX
    (93) exp -> . CHAR_LEX
    (94) exp -> . BOOLEAN
    (95) exp -> . list_access
    (99) exp -> . LPAREN exp RPAREN
    (100) exp -> . exp QUESTION exp COLON exp
    (96) list_access -> . list_access LBRACKET exp RBRACKET
    (97) list_access -> . list_access DOT ID
    (98) list_access -> . ID

    LBRACKET        shift and go to state 237
    ID              shift and go to state 46
    PARSEINT        shift and go to state 48
    PARSEFLOAT      shift and go to state 49
    TYPEOF          shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    NUMBER_LEX      shift and go to state 53
    FLOAT_LEX       shift and go to state 54
    STRING_LEX      shift and go to state 55
    CHAR_LEX        shift and go to state 56
    BOOLEAN         shift and go to state 57
    LPAREN          shift and go to state 47

    values_list                    shift and go to state 251
    arg                            shift and go to state 267
    exp_list                       shift and go to state 252
    exp                            shift and go to state 187
    list_access                    shift and go to state 58

state 265

    (39) declaration_matrix -> VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .

    ID              reduce using rule 39 (declaration_matrix -> VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    CONST           reduce using rule 39 (declaration_matrix -> VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    VAR             reduce using rule 39 (declaration_matrix -> VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    INTERFACE       reduce using rule 39 (declaration_matrix -> VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    WHILE           reduce using rule 39 (declaration_matrix -> VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    FOR             reduce using rule 39 (declaration_matrix -> VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    BREAK           reduce using rule 39 (declaration_matrix -> VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    CONTINUE        reduce using rule 39 (declaration_matrix -> VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    RETURN          reduce using rule 39 (declaration_matrix -> VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    CONSOLE         reduce using rule 39 (declaration_matrix -> VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    IF              reduce using rule 39 (declaration_matrix -> VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    $end            reduce using rule 39 (declaration_matrix -> VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 39 (declaration_matrix -> VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON .)


state 266

    (21) if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block . RBRACE
    (2) block -> block . instruction
    (4) instruction -> . assignment
    (5) instruction -> . declaration
    (6) instruction -> . declaration_array
    (7) instruction -> . declaration_matrix
    (8) instruction -> . vector_functions
    (9) instruction -> . interface
    (10) instruction -> . if_statement
    (11) instruction -> . while
    (12) instruction -> . for
    (13) instruction -> . foreach
    (14) instruction -> . break
    (15) instruction -> . continue
    (16) instruction -> . return
    (17) instruction -> . print
    (66) assignment -> . ID EQUAL exp SEMICOLON
    (67) assignment -> . ID PLUS_EQUAL exp SEMICOLON
    (68) assignment -> . ID MINUS_EQUAL exp SEMICOLON
    (69) assignment -> . ID index_list EQUAL exp SEMICOLON
    (61) declaration -> . CONST ID COLON type EQUAL exp SEMICOLON
    (62) declaration -> . CONST ID EQUAL exp SEMICOLON
    (63) declaration -> . VAR ID COLON type EQUAL exp SEMICOLON
    (64) declaration -> . VAR ID EQUAL exp SEMICOLON
    (65) declaration -> . VAR ID COLON type SEMICOLON
    (33) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (34) declaration_array -> . VAR ID COLON type LBRACKET RBRACKET EQUAL error SEMICOLON
    (35) declaration_array -> . CONST ID COLON type LBRACKET RBRACKET EQUAL definition_array SEMICOLON
    (39) declaration_matrix -> . VAR ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (40) declaration_matrix -> . CONST ID COLON type matrix_dimension EQUAL LBRACKET values_list RBRACKET SEMICOLON
    (47) vector_functions -> . ID DOT PUSH LPAREN exp RPAREN SEMICOLON
    (30) interface -> . INTERFACE ID LBRACE interface_body RBRACE
    (18) if_statement -> . if
    (22) while -> . WHILE LPAREN exp RPAREN block
    (23) for -> . FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block
    (24) foreach -> . FOR LPAREN VAR ID OF ID RPAREN block
    (25) break -> . BREAK SEMICOLON
    (26) continue -> . CONTINUE SEMICOLON
    (27) return -> . RETURN exp SEMICOLON
    (28) return -> . RETURN SEMICOLON
    (29) print -> . CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON
    (19) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE if
    (20) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE
    (21) if -> . IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE

    RBRACE          shift and go to state 268
    ID              shift and go to state 18
    CONST           shift and go to state 19
    VAR             shift and go to state 20
    INTERFACE       shift and go to state 21
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 27
    CONSOLE         shift and go to state 28
    IF              shift and go to state 29

    instruction                    shift and go to state 30
    assignment                     shift and go to state 4
    declaration                    shift and go to state 5
    declaration_array              shift and go to state 6
    declaration_matrix             shift and go to state 7
    vector_functions               shift and go to state 8
    interface                      shift and go to state 9
    if_statement                   shift and go to state 10
    while                          shift and go to state 11
    for                            shift and go to state 12
    foreach                        shift and go to state 13
    break                          shift and go to state 14
    continue                       shift and go to state 15
    return                         shift and go to state 16
    print                          shift and go to state 17
    if                             shift and go to state 22

state 267

    (43) values_list -> values_list COMMA LBRACKET arg . RBRACKET

    RBRACKET        shift and go to state 269


state 268

    (21) if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE .

    ID              reduce using rule 21 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE .)
    CONST           reduce using rule 21 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE .)
    VAR             reduce using rule 21 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE .)
    INTERFACE       reduce using rule 21 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE .)
    WHILE           reduce using rule 21 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE .)
    FOR             reduce using rule 21 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE .)
    BREAK           reduce using rule 21 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE .)
    CONTINUE        reduce using rule 21 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE .)
    RETURN          reduce using rule 21 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE .)
    CONSOLE         reduce using rule 21 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE .)
    IF              reduce using rule 21 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE .)
    $end            reduce using rule 21 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE .)
    RBRACE          reduce using rule 21 (if -> IF LPAREN exp RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE .)


state 269

    (43) values_list -> values_list COMMA LBRACKET arg RBRACKET .

    RBRACKET        reduce using rule 43 (values_list -> values_list COMMA LBRACKET arg RBRACKET .)
    COMMA           reduce using rule 43 (values_list -> values_list COMMA LBRACKET arg RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOT in state 46 resolved as shift
WARNING: shift/reduce conflict for DOT in state 58 resolved as shift
WARNING: shift/reduce conflict for DOT in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 97 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 97 resolved as shift
WARNING: shift/reduce conflict for MOD in state 97 resolved as shift
WARNING: shift/reduce conflict for COMPARASION in state 97 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 97 resolved as shift
WARNING: shift/reduce conflict for LESS in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for OR in state 97 resolved as shift
WARNING: shift/reduce conflict for QUESTION in state 97 resolved as shift
WARNING: shift/reduce conflict for ID in state 168 resolved as shift
WARNING: shift/reduce conflict for CONST in state 168 resolved as shift
WARNING: shift/reduce conflict for VAR in state 168 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 168 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 168 resolved as shift
WARNING: shift/reduce conflict for FOR in state 168 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 168 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 168 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 168 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 168 resolved as shift
WARNING: shift/reduce conflict for IF in state 168 resolved as shift
WARNING: shift/reduce conflict for DOT in state 206 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 206 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 206 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 206 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 206 resolved as shift
WARNING: shift/reduce conflict for MOD in state 206 resolved as shift
WARNING: shift/reduce conflict for COMPARASION in state 206 resolved as shift
WARNING: shift/reduce conflict for DIFFERENT in state 206 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 206 resolved as shift
WARNING: shift/reduce conflict for LESS in state 206 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 206 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 206 resolved as shift
WARNING: shift/reduce conflict for AND in state 206 resolved as shift
WARNING: shift/reduce conflict for OR in state 206 resolved as shift
WARNING: shift/reduce conflict for QUESTION in state 206 resolved as shift
WARNING: shift/reduce conflict for ID in state 245 resolved as shift
WARNING: shift/reduce conflict for CONST in state 245 resolved as shift
WARNING: shift/reduce conflict for VAR in state 245 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 245 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 245 resolved as shift
WARNING: shift/reduce conflict for FOR in state 245 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 245 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 245 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 245 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 245 resolved as shift
WARNING: shift/reduce conflict for IF in state 245 resolved as shift
WARNING: shift/reduce conflict for ID in state 258 resolved as shift
WARNING: shift/reduce conflict for CONST in state 258 resolved as shift
WARNING: shift/reduce conflict for VAR in state 258 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 258 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 258 resolved as shift
WARNING: shift/reduce conflict for FOR in state 258 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 258 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 258 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 258 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 258 resolved as shift
WARNING: shift/reduce conflict for IF in state 258 resolved as shift
