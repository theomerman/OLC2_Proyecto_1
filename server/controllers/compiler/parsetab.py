
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftCOMPARASIONDIFFERENTleftGREATERLESSGREATER_EQUALLESS_EQUALleftPLUSMINUSleftDIVIDEMODTIMESrightUNOTUMINUSAND BOOLEAN BREAK CASE CHAR_LEX COLON COMMA COMMENT COMMENT2 COMPARASION CONSOLE CONST CONTINUE DEFAULT DIFFERENT DIVIDE DOT ELSE EQUAL FLOAT_LEX FOR FUNCTION GREATER GREATER_EQUAL ID IF INDEXOF INTERFACE JOIN KEYS LBRACE LBRACKET LENGTH LESS LESS_EQUAL LOG LPAREN MINUS MINUS_EQUAL MOD NOT NULL NUMBER_LEX OBJECT OF OR PARSEFLOAT PARSEINT PLUS PLUS_EQUAL POP PUSH QUESTION RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING_LEX SWITCH TIMES TOLOWERCASE TOSTRING TOUPPERCASE TYPEOF TYPES VALUES VAR WHILEstart : initinit : init instruction\n            | instructioninstruction  : declaration SEMICOLON\n                    | assignment_const SEMICOLON\n                    | assignment\n                    | interface\n                    | if\n                    | while\n                    | for\n                    | foreach\n                    | break\n                    | continue\n                    | return\n                    | print\n    if : IF LPAREN exp RPAREN block\n          | IF LPAREN exp RPAREN block ELSE block\n          | IF LPAREN exp RPAREN block ELSE ifif : IF error while : WHILE LPAREN exp RPAREN blockfor : FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN blockforeach : FOR LPAREN VAR ID OF ID RPAREN blockbreak : BREAK SEMICOLONcontinue : CONTINUE SEMICOLONreturn : RETURN exp SEMICOLON\n              | RETURN SEMICOLONblock : LBRACE init RBRACEassignment_const : CONST ID COLON type EQUAL exp assignment_const : CONST ID EQUAL exp \n    print : CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON\n    interface : INTERFACE ID LBRACE interface_body RBRACEinterface_body : interface_body SEMICOLON ID COLON type\n                      | ID COLON typedeclaration : VAR ID COLON type EQUAL exp declaration : VAR ID EQUAL exp declaration : VAR ID COLON type declaration : VAR error SEMICOLON\n    assignment : ID EQUAL exp SEMICOLON\n                | ID PLUS_EQUAL exp SEMICOLON\n                | ID MINUS_EQUAL exp SEMICOLON type : TYPES exp_list : exp_list COMMA exp\n                | expexp : exp PLUS exp\n            | exp MINUS exp\n            | exp TIMES exp\n            | exp DIVIDE exp\n            | exp MOD expexp : MINUS exp %prec UMINUS\n            | NOT exp %prec UNOTexp : exp COMPARASION exp\n            | exp DIFFERENT exp\n            | exp GREATER exp\n            | exp LESS exp\n            | exp GREATER_EQUAL exp\n            | exp LESS_EQUAL exp\n            | exp AND exp\n            | exp OR exp\n    exp : NUMBER_LEX\n            | FLOAT_LEX\n            | STRING_LEX\n            | CHAR_LEX\n            | BOOLEAN\n            | list_array\n    list_array : list_array LBRACKET exp RBRACKET\n                | list_array DOT ID\n                | ID\n    exp : LPAREN exp RPARENexp : exp QUESTION exp COLON expexp : ID DOT IDempty :'
    
_lr_action_items = {'VAR':([0,2,3,6,7,8,9,10,11,12,13,14,15,27,28,29,38,40,41,42,44,69,94,95,96,127,129,130,131,143,144,150,151,152,155,159,160,],[16,16,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-4,-5,-19,68,-23,-24,-26,-25,-38,-39,-40,-31,-16,16,-20,16,16,-17,-18,-27,-30,-22,-21,]),'CONST':([0,2,3,6,7,8,9,10,11,12,13,14,15,27,28,29,38,41,42,44,69,94,95,96,127,129,130,131,143,150,151,152,155,159,160,],[18,18,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-4,-5,-19,-23,-24,-26,-25,-38,-39,-40,-31,-16,18,-20,18,-17,-18,-27,-30,-22,-21,]),'ID':([0,2,3,6,7,8,9,10,11,12,13,14,15,16,18,19,25,27,28,29,32,33,34,37,38,39,41,42,44,45,46,53,57,63,64,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,86,87,89,94,95,96,103,123,124,125,127,128,129,130,131,133,134,143,148,150,151,152,155,159,160,],[17,17,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,30,35,36,54,-2,-4,-5,54,54,54,54,-19,54,-23,-24,-26,54,54,54,54,54,99,104,-25,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,120,122,-38,-39,-40,54,54,54,54,-31,141,-16,17,-20,145,54,17,54,-17,-18,-27,-30,-22,-21,]),'INTERFACE':([0,2,3,6,7,8,9,10,11,12,13,14,15,27,28,29,38,41,42,44,69,94,95,96,127,129,130,131,143,150,151,152,155,159,160,],[19,19,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-4,-5,-19,-23,-24,-26,-25,-38,-39,-40,-31,-16,19,-20,19,-17,-18,-27,-30,-22,-21,]),'IF':([0,2,3,6,7,8,9,10,11,12,13,14,15,27,28,29,38,41,42,44,69,94,95,96,127,129,130,131,142,143,150,151,152,155,159,160,],[20,20,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-4,-5,-19,-23,-24,-26,-25,-38,-39,-40,-31,-16,20,-20,20,20,-17,-18,-27,-30,-22,-21,]),'WHILE':([0,2,3,6,7,8,9,10,11,12,13,14,15,27,28,29,38,41,42,44,69,94,95,96,127,129,130,131,143,150,151,152,155,159,160,],[21,21,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-4,-5,-19,-23,-24,-26,-25,-38,-39,-40,-31,-16,21,-20,21,-17,-18,-27,-30,-22,-21,]),'FOR':([0,2,3,6,7,8,9,10,11,12,13,14,15,27,28,29,38,41,42,44,69,94,95,96,127,129,130,131,143,150,151,152,155,159,160,],[22,22,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-4,-5,-19,-23,-24,-26,-25,-38,-39,-40,-31,-16,22,-20,22,-17,-18,-27,-30,-22,-21,]),'BREAK':([0,2,3,6,7,8,9,10,11,12,13,14,15,27,28,29,38,41,42,44,69,94,95,96,127,129,130,131,143,150,151,152,155,159,160,],[23,23,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-4,-5,-19,-23,-24,-26,-25,-38,-39,-40,-31,-16,23,-20,23,-17,-18,-27,-30,-22,-21,]),'CONTINUE':([0,2,3,6,7,8,9,10,11,12,13,14,15,27,28,29,38,41,42,44,69,94,95,96,127,129,130,131,143,150,151,152,155,159,160,],[24,24,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-4,-5,-19,-23,-24,-26,-25,-38,-39,-40,-31,-16,24,-20,24,-17,-18,-27,-30,-22,-21,]),'RETURN':([0,2,3,6,7,8,9,10,11,12,13,14,15,27,28,29,38,41,42,44,69,94,95,96,127,129,130,131,143,150,151,152,155,159,160,],[25,25,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-4,-5,-19,-23,-24,-26,-25,-38,-39,-40,-31,-16,25,-20,25,-17,-18,-27,-30,-22,-21,]),'CONSOLE':([0,2,3,6,7,8,9,10,11,12,13,14,15,27,28,29,38,41,42,44,69,94,95,96,127,129,130,131,143,150,151,152,155,159,160,],[26,26,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-4,-5,-19,-23,-24,-26,-25,-38,-39,-40,-31,-16,26,-20,26,-17,-18,-27,-30,-22,-21,]),'$end':([1,2,3,6,7,8,9,10,11,12,13,14,15,27,28,29,38,41,42,44,69,94,95,96,127,129,131,150,151,152,155,159,160,],[0,-1,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-4,-5,-19,-23,-24,-26,-25,-38,-39,-40,-31,-16,-20,-17,-18,-27,-30,-22,-21,]),'RBRACE':([3,6,7,8,9,10,11,12,13,14,15,27,28,29,38,41,42,44,69,92,94,95,96,100,127,129,131,140,143,150,151,152,155,157,159,160,],[-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-4,-5,-19,-23,-24,-26,-25,-41,-38,-39,-40,127,-31,-16,-20,-33,152,-17,-18,-27,-30,-32,-22,-21,]),'SEMICOLON':([4,5,23,24,25,31,43,47,48,49,50,51,52,54,58,59,60,61,67,84,85,91,92,93,98,100,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,132,135,138,139,140,146,147,157,],[28,29,41,42,44,58,69,-59,-60,-61,-62,-63,-64,-67,-37,94,95,96,103,-49,-50,-36,-41,-35,-29,128,-44,-45,-46,-47,-48,-51,-52,-53,-54,-55,-56,-57,-58,-66,-68,-70,144,-65,-34,-28,-33,-69,155,-32,]),'error':([16,20,68,],[31,38,31,]),'EQUAL':([17,30,35,91,92,97,104,],[32,57,63,124,-41,125,57,]),'PLUS_EQUAL':([17,],[33,]),'MINUS_EQUAL':([17,],[34,]),'LPAREN':([20,21,22,25,32,33,34,37,39,45,46,53,57,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,86,90,103,123,124,125,134,148,],[37,39,40,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,123,53,53,53,53,53,53,]),'MINUS':([25,32,33,34,37,39,43,45,46,47,48,49,50,51,52,53,54,57,59,60,61,63,65,66,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,93,98,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,132,134,135,137,138,139,146,148,156,],[45,45,45,45,45,45,71,45,45,-59,-60,-61,-62,-63,-64,45,-67,45,71,71,71,45,71,71,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-49,-50,45,71,71,71,45,-44,-45,-46,-47,-48,71,71,71,71,71,71,71,71,71,71,-66,-68,-70,45,45,45,71,45,-65,71,71,71,71,45,71,]),'NOT':([25,32,33,34,37,39,45,46,53,57,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,86,103,123,124,125,134,148,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'NUMBER_LEX':([25,32,33,34,37,39,45,46,53,57,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,86,103,123,124,125,134,148,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'FLOAT_LEX':([25,32,33,34,37,39,45,46,53,57,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,86,103,123,124,125,134,148,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'STRING_LEX':([25,32,33,34,37,39,45,46,53,57,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,86,103,123,124,125,134,148,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'CHAR_LEX':([25,32,33,34,37,39,45,46,53,57,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,86,103,123,124,125,134,148,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'BOOLEAN':([25,32,33,34,37,39,45,46,53,57,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,86,103,123,124,125,134,148,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'DOT':([26,52,54,120,135,],[55,87,89,-66,-65,]),'COLON':([30,35,47,48,49,50,51,52,54,84,85,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,121,122,135,141,146,],[56,62,-59,-60,-61,-62,-63,-64,-67,-49,-50,126,56,-44,-45,-46,-47,-48,-51,-52,-53,-54,-55,-56,-57,-58,134,-66,-68,-70,-65,149,-69,]),'LBRACE':([36,101,102,142,154,158,],[64,130,130,130,130,130,]),'PLUS':([43,47,48,49,50,51,52,54,59,60,61,65,66,84,85,88,93,98,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,132,135,137,138,139,146,156,],[70,-59,-60,-61,-62,-63,-64,-67,70,70,70,70,70,-49,-50,70,70,70,-44,-45,-46,-47,-48,70,70,70,70,70,70,70,70,70,70,-66,-68,-70,70,-65,70,70,70,70,70,]),'TIMES':([43,47,48,49,50,51,52,54,59,60,61,65,66,84,85,88,93,98,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,132,135,137,138,139,146,156,],[72,-59,-60,-61,-62,-63,-64,-67,72,72,72,72,72,-49,-50,72,72,72,72,72,-46,-47,-48,72,72,72,72,72,72,72,72,72,72,-66,-68,-70,72,-65,72,72,72,72,72,]),'DIVIDE':([43,47,48,49,50,51,52,54,59,60,61,65,66,84,85,88,93,98,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,132,135,137,138,139,146,156,],[73,-59,-60,-61,-62,-63,-64,-67,73,73,73,73,73,-49,-50,73,73,73,73,73,-46,-47,-48,73,73,73,73,73,73,73,73,73,73,-66,-68,-70,73,-65,73,73,73,73,73,]),'MOD':([43,47,48,49,50,51,52,54,59,60,61,65,66,84,85,88,93,98,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,132,135,137,138,139,146,156,],[74,-59,-60,-61,-62,-63,-64,-67,74,74,74,74,74,-49,-50,74,74,74,74,74,-46,-47,-48,74,74,74,74,74,74,74,74,74,74,-66,-68,-70,74,-65,74,74,74,74,74,]),'COMPARASION':([43,47,48,49,50,51,52,54,59,60,61,65,66,84,85,88,93,98,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,132,135,137,138,139,146,156,],[75,-59,-60,-61,-62,-63,-64,-67,75,75,75,75,75,-49,-50,75,75,75,-44,-45,-46,-47,-48,-51,-52,-53,-54,-55,-56,75,75,75,75,-66,-68,-70,75,-65,75,75,75,75,75,]),'DIFFERENT':([43,47,48,49,50,51,52,54,59,60,61,65,66,84,85,88,93,98,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,132,135,137,138,139,146,156,],[76,-59,-60,-61,-62,-63,-64,-67,76,76,76,76,76,-49,-50,76,76,76,-44,-45,-46,-47,-48,-51,-52,-53,-54,-55,-56,76,76,76,76,-66,-68,-70,76,-65,76,76,76,76,76,]),'GREATER':([43,47,48,49,50,51,52,54,59,60,61,65,66,84,85,88,93,98,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,132,135,137,138,139,146,156,],[77,-59,-60,-61,-62,-63,-64,-67,77,77,77,77,77,-49,-50,77,77,77,-44,-45,-46,-47,-48,77,77,-53,-54,-55,-56,77,77,77,77,-66,-68,-70,77,-65,77,77,77,77,77,]),'LESS':([43,47,48,49,50,51,52,54,59,60,61,65,66,84,85,88,93,98,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,132,135,137,138,139,146,156,],[78,-59,-60,-61,-62,-63,-64,-67,78,78,78,78,78,-49,-50,78,78,78,-44,-45,-46,-47,-48,78,78,-53,-54,-55,-56,78,78,78,78,-66,-68,-70,78,-65,78,78,78,78,78,]),'GREATER_EQUAL':([43,47,48,49,50,51,52,54,59,60,61,65,66,84,85,88,93,98,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,132,135,137,138,139,146,156,],[79,-59,-60,-61,-62,-63,-64,-67,79,79,79,79,79,-49,-50,79,79,79,-44,-45,-46,-47,-48,79,79,-53,-54,-55,-56,79,79,79,79,-66,-68,-70,79,-65,79,79,79,79,79,]),'LESS_EQUAL':([43,47,48,49,50,51,52,54,59,60,61,65,66,84,85,88,93,98,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,132,135,137,138,139,146,156,],[80,-59,-60,-61,-62,-63,-64,-67,80,80,80,80,80,-49,-50,80,80,80,-44,-45,-46,-47,-48,80,80,-53,-54,-55,-56,80,80,80,80,-66,-68,-70,80,-65,80,80,80,80,80,]),'AND':([43,47,48,49,50,51,52,54,59,60,61,65,66,84,85,88,93,98,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,132,135,137,138,139,146,156,],[81,-59,-60,-61,-62,-63,-64,-67,81,81,81,81,81,-49,-50,81,81,81,-44,-45,-46,-47,-48,-51,-52,-53,-54,-55,-56,-57,81,81,81,-66,-68,-70,81,-65,81,81,81,81,81,]),'OR':([43,47,48,49,50,51,52,54,59,60,61,65,66,84,85,88,93,98,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,132,135,137,138,139,146,156,],[82,-59,-60,-61,-62,-63,-64,-67,82,82,82,82,82,-49,-50,82,82,82,-44,-45,-46,-47,-48,-51,-52,-53,-54,-55,-56,-57,-58,82,82,-66,-68,-70,82,-65,82,82,82,82,82,]),'QUESTION':([43,47,48,49,50,51,52,54,59,60,61,65,66,84,85,88,93,98,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,132,135,137,138,139,146,156,],[83,-59,-60,-61,-62,-63,-64,-67,83,83,83,83,83,-49,-50,83,83,83,-44,-45,-46,-47,-48,-51,-52,-53,-54,-55,-56,-57,-58,83,83,-66,-68,-70,83,-65,83,83,83,83,83,]),'RPAREN':([47,48,49,50,51,52,54,58,65,66,84,85,88,91,92,93,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,135,136,137,138,145,146,153,156,],[-59,-60,-61,-62,-63,-64,-67,-37,101,102,-49,-50,121,-36,-41,-35,-44,-45,-46,-47,-48,-51,-52,-53,-54,-55,-56,-57,-58,-66,-68,-70,-65,147,-43,-34,154,-69,158,-42,]),'RBRACKET':([47,48,49,50,51,52,54,84,85,105,106,107,108,109,110,111,112,113,114,115,116,117,119,120,121,122,135,146,],[-59,-60,-61,-62,-63,-64,-67,-49,-50,-44,-45,-46,-47,-48,-51,-52,-53,-54,-55,-56,-57,-58,135,-66,-68,-70,-65,-69,]),'COMMA':([47,48,49,50,51,52,54,84,85,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,135,136,137,146,156,],[-59,-60,-61,-62,-63,-64,-67,-49,-50,-44,-45,-46,-47,-48,-51,-52,-53,-54,-55,-56,-57,-58,-66,-68,-70,-65,148,-43,-69,-42,]),'LBRACKET':([52,54,120,135,],[86,-67,-66,-65,]),'LOG':([55,],[90,]),'TYPES':([56,62,126,149,],[92,92,92,92,]),'OF':([104,],[133,]),'ELSE':([129,152,],[142,-27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'init':([0,130,],[2,143,]),'instruction':([0,2,130,143,],[3,27,3,27,]),'declaration':([0,2,40,130,143,144,],[4,4,67,4,4,153,]),'assignment_const':([0,2,130,143,],[5,5,5,5,]),'assignment':([0,2,130,143,],[6,6,6,6,]),'interface':([0,2,130,143,],[7,7,7,7,]),'if':([0,2,130,142,143,],[8,8,8,151,8,]),'while':([0,2,130,143,],[9,9,9,9,]),'for':([0,2,130,143,],[10,10,10,10,]),'foreach':([0,2,130,143,],[11,11,11,11,]),'break':([0,2,130,143,],[12,12,12,12,]),'continue':([0,2,130,143,],[13,13,13,13,]),'return':([0,2,130,143,],[14,14,14,14,]),'print':([0,2,130,143,],[15,15,15,15,]),'exp':([25,32,33,34,37,39,45,46,53,57,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,86,103,123,124,125,134,148,],[43,59,60,61,65,66,84,85,88,93,98,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,132,137,138,139,146,156,]),'list_array':([25,32,33,34,37,39,45,46,53,57,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,86,103,123,124,125,134,148,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'type':([56,62,126,149,],[91,97,140,157,]),'interface_body':([64,],[100,]),'block':([101,102,142,154,158,],[129,131,150,159,160,]),'exp_list':([123,],[136,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> init','start',1,'p_start','parser.py',23),
  ('init -> init instruction','init',2,'p_init','parser.py',28),
  ('init -> instruction','init',1,'p_init','parser.py',29),
  ('instruction -> declaration SEMICOLON','instruction',2,'p_instruction','parser.py',38),
  ('instruction -> assignment_const SEMICOLON','instruction',2,'p_instruction','parser.py',39),
  ('instruction -> assignment','instruction',1,'p_instruction','parser.py',40),
  ('instruction -> interface','instruction',1,'p_instruction','parser.py',41),
  ('instruction -> if','instruction',1,'p_instruction','parser.py',42),
  ('instruction -> while','instruction',1,'p_instruction','parser.py',43),
  ('instruction -> for','instruction',1,'p_instruction','parser.py',44),
  ('instruction -> foreach','instruction',1,'p_instruction','parser.py',45),
  ('instruction -> break','instruction',1,'p_instruction','parser.py',46),
  ('instruction -> continue','instruction',1,'p_instruction','parser.py',47),
  ('instruction -> return','instruction',1,'p_instruction','parser.py',48),
  ('instruction -> print','instruction',1,'p_instruction','parser.py',49),
  ('if -> IF LPAREN exp RPAREN block','if',5,'p_if','parser.py',57),
  ('if -> IF LPAREN exp RPAREN block ELSE block','if',7,'p_if','parser.py',58),
  ('if -> IF LPAREN exp RPAREN block ELSE if','if',7,'p_if','parser.py',59),
  ('if -> IF error','if',2,'p_if_error','parser.py',63),
  ('while -> WHILE LPAREN exp RPAREN block','while',5,'p_while','parser.py',71),
  ('for -> FOR LPAREN declaration SEMICOLON exp SEMICOLON declaration RPAREN block','for',9,'p_for','parser.py',77),
  ('foreach -> FOR LPAREN VAR ID OF ID RPAREN block','foreach',8,'p_foreach','parser.py',83),
  ('break -> BREAK SEMICOLON','break',2,'p_break','parser.py',89),
  ('continue -> CONTINUE SEMICOLON','continue',2,'p_continue','parser.py',95),
  ('return -> RETURN exp SEMICOLON','return',3,'p_return','parser.py',101),
  ('return -> RETURN SEMICOLON','return',2,'p_return','parser.py',102),
  ('block -> LBRACE init RBRACE','block',3,'p_block','parser.py',108),
  ('assignment_const -> CONST ID COLON type EQUAL exp','assignment_const',6,'p_assignment_const','parser.py',117),
  ('assignment_const -> CONST ID EQUAL exp','assignment_const',4,'p_assignment_const2','parser.py',121),
  ('print -> CONSOLE DOT LOG LPAREN exp_list RPAREN SEMICOLON','print',7,'p_instruction_console','parser.py',140),
  ('interface -> INTERFACE ID LBRACE interface_body RBRACE','interface',5,'p_interface','parser.py',148),
  ('interface_body -> interface_body SEMICOLON ID COLON type','interface_body',5,'p_interface_body','parser.py',152),
  ('interface_body -> ID COLON type','interface_body',3,'p_interface_body','parser.py',153),
  ('declaration -> VAR ID COLON type EQUAL exp','declaration',6,'p_declaration','parser.py',161),
  ('declaration -> VAR ID EQUAL exp','declaration',4,'p_declaration2','parser.py',167),
  ('declaration -> VAR ID COLON type','declaration',4,'p_declaration3','parser.py',173),
  ('declaration -> VAR error SEMICOLON','declaration',3,'p_declaration5','parser.py',178),
  ('assignment -> ID EQUAL exp SEMICOLON','assignment',4,'p_declaration4','parser.py',186),
  ('assignment -> ID PLUS_EQUAL exp SEMICOLON','assignment',4,'p_declaration4','parser.py',187),
  ('assignment -> ID MINUS_EQUAL exp SEMICOLON','assignment',4,'p_declaration4','parser.py',188),
  ('type -> TYPES','type',1,'p_type','parser.py',197),
  ('exp_list -> exp_list COMMA exp','exp_list',3,'p_exp_list','parser.py',212),
  ('exp_list -> exp','exp_list',1,'p_exp_list','parser.py',213),
  ('exp -> exp PLUS exp','exp',3,'p_exp_plus','parser.py',222),
  ('exp -> exp MINUS exp','exp',3,'p_exp_plus','parser.py',223),
  ('exp -> exp TIMES exp','exp',3,'p_exp_plus','parser.py',224),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp_plus','parser.py',225),
  ('exp -> exp MOD exp','exp',3,'p_exp_plus','parser.py',226),
  ('exp -> MINUS exp','exp',2,'p_exp_unary','parser.py',232),
  ('exp -> NOT exp','exp',2,'p_exp_unary','parser.py',233),
  ('exp -> exp COMPARASION exp','exp',3,'p_exp_comparation','parser.py',241),
  ('exp -> exp DIFFERENT exp','exp',3,'p_exp_comparation','parser.py',242),
  ('exp -> exp GREATER exp','exp',3,'p_exp_comparation','parser.py',243),
  ('exp -> exp LESS exp','exp',3,'p_exp_comparation','parser.py',244),
  ('exp -> exp GREATER_EQUAL exp','exp',3,'p_exp_comparation','parser.py',245),
  ('exp -> exp LESS_EQUAL exp','exp',3,'p_exp_comparation','parser.py',246),
  ('exp -> exp AND exp','exp',3,'p_exp_comparation','parser.py',247),
  ('exp -> exp OR exp','exp',3,'p_exp_comparation','parser.py',248),
  ('exp -> NUMBER_LEX','exp',1,'p_exp_literals','parser.py',254),
  ('exp -> FLOAT_LEX','exp',1,'p_exp_literals','parser.py',255),
  ('exp -> STRING_LEX','exp',1,'p_exp_literals','parser.py',256),
  ('exp -> CHAR_LEX','exp',1,'p_exp_literals','parser.py',257),
  ('exp -> BOOLEAN','exp',1,'p_exp_literals','parser.py',258),
  ('exp -> list_array','exp',1,'p_exp_literals','parser.py',259),
  ('list_array -> list_array LBRACKET exp RBRACKET','list_array',4,'p_list_array','parser.py',265),
  ('list_array -> list_array DOT ID','list_array',3,'p_list_array','parser.py',266),
  ('list_array -> ID','list_array',1,'p_list_array','parser.py',267),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_exp_group','parser.py',278),
  ('exp -> exp QUESTION exp COLON exp','exp',5,'p_exp_ternary','parser.py',283),
  ('exp -> ID DOT ID','exp',3,'p_access_attribute','parser.py',287),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',293),
]
