
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftCOMPARASIONDIFFERENTleftGREATERLESSGREATER_EQUALLESS_EQUALleftPLUSMINUSleftDIVIDEMODTIMESrightUNOTUMINUSAND BOOL BREAK CASE CHAR CHAR_LEX COLON COMMA COMMENT COMMENT2 COMPARASION CONSOLE CONST CONTINUE DEFAULT DIFFERENT DIVIDE DOT ELSE EQUAL FALSE FLOAT FLOAT_LEX FOR FUNCTION GREATER GREATER_EQUAL ID IF INDEXOF INTERFACE JOIN KEYS LBRACE LBRACKET LENGTH LESS LESS_EQUAL LOG LPAREN MINUS MINUS_EQUAL MOD NOT NULL NUMBER NUMBER_LEX OBJECT OF OR PARSEFLOAT PARSEINT PLUS PLUS_EQUAL POP PUSH QUESTION RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STRING_LEX SWITCH TIMES TOLOWERCASE TOSTRING TOUPPERCASE TRUE TYPEOF VALUES VAR WHILEinit : init instruction\n            | empty\n            | instructioninstruction  : assignation SEMICOLON\n                    | assignation_const SEMICOLON\n                    | interface\n                    | if\n                    | while\n                    | for\n                    | foreach\n                    | break\n                    | continue\n                    | return\n    if : IF LPAREN exp RPAREN block\n          | IF LPAREN exp RPAREN block ELSE block\n          | IF LPAREN exp RPAREN block ELSE ifwhile : WHILE LPAREN exp RPAREN blockfor : FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN blockforeach : FOR LPAREN VAR ID OF ID RPAREN blockbreak : BREAK SEMICOLONcontinue : CONTINUE SEMICOLONreturn : RETURN exp SEMICOLON\n              | RETURN SEMICOLONblock : LBRACE init RBRACEassignation_const : CONST ID COLON type EQUAL exp assignation_const : CONST ID EQUAL exp interface : INTERFACE ID LBRACE interface_body RBRACEinterface_body : interface_body SEMICOLON ID COLON type\n                      | ID COLON typeassignation : VAR ID COLON type EQUAL exp assignation : VAR ID EQUAL exp assignation : VAR ID COLON type assignation : ID EQUAL exp \n                   | ID PLUS_EQUAL exp \n                   | ID MINUS_EQUAL exp type : NUMBER\n            | FLOAT\n            | STRING\n            | CHAR\n            | BOOLexp : exp PLUS exp\n            | exp MINUS exp\n            | exp TIMES exp\n            | exp DIVIDE exp\n            | exp MOD expexp : MINUS exp %prec UMINUS\n            | NOT exp %prec UNOTexp : exp COMPARASION exp\n            | exp DIFFERENT exp\n    exp : exp GREATER exp\n            | exp LESS exp\n            | exp GREATER_EQUAL exp\n            | exp LESS_EQUAL exp\n    exp : exp AND exp\n            | exp OR exp\n    exp : NUMBER_LEX\n            | FLOAT_LEX\n            | STRING_LEX\n            | CHAR_LEX\n            | TRUE\n            | FALSE\n            | IDexp : LPAREN exp RPARENexp : exp QUESTION exp COLON expexp : ID DOT IDempty :'
    
_lr_action_items = {'VAR':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,35,36,37,39,62,115,117,118,119,128,129,133,134,135,140,141,],[14,14,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,61,-20,-21,-23,-22,-27,-14,14,-17,14,14,-15,-16,-24,-19,-18,]),'ID':([0,1,2,3,6,7,8,9,10,11,12,13,14,16,17,23,24,25,26,28,29,30,33,34,35,36,37,39,40,41,49,51,56,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,79,94,112,113,115,116,117,118,119,121,122,128,129,133,134,135,140,141,],[15,15,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,27,31,32,48,-1,-4,-5,48,48,48,48,48,15,-20,-21,-23,48,48,48,48,48,90,95,-22,48,48,48,48,48,48,48,48,48,48,48,48,48,48,110,48,48,48,-27,126,-14,15,-17,130,48,15,15,-15,-16,-24,-19,-18,]),'CONST':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,36,37,39,62,115,117,118,119,128,133,134,135,140,141,],[16,16,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-20,-21,-23,-22,-27,-14,16,-17,16,-15,-16,-24,-19,-18,]),'INTERFACE':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,36,37,39,62,115,117,118,119,128,133,134,135,140,141,],[17,17,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-20,-21,-23,-22,-27,-14,17,-17,17,-15,-16,-24,-19,-18,]),'IF':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,36,37,39,62,115,117,118,119,127,128,133,134,135,140,141,],[18,18,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-20,-21,-23,-22,-27,-14,18,-17,18,18,-15,-16,-24,-19,-18,]),'WHILE':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,36,37,39,62,115,117,118,119,128,133,134,135,140,141,],[19,19,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-20,-21,-23,-22,-27,-14,19,-17,19,-15,-16,-24,-19,-18,]),'FOR':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,36,37,39,62,115,117,118,119,128,133,134,135,140,141,],[20,20,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-20,-21,-23,-22,-27,-14,20,-17,20,-15,-16,-24,-19,-18,]),'BREAK':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,36,37,39,62,115,117,118,119,128,133,134,135,140,141,],[21,21,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-20,-21,-23,-22,-27,-14,21,-17,21,-15,-16,-24,-19,-18,]),'CONTINUE':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,36,37,39,62,115,117,118,119,128,133,134,135,140,141,],[22,22,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-20,-21,-23,-22,-27,-14,22,-17,22,-15,-16,-24,-19,-18,]),'RETURN':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,36,37,39,62,115,117,118,119,128,133,134,135,140,141,],[23,23,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-20,-21,-23,-22,-27,-14,23,-17,23,-15,-16,-24,-19,-18,]),'$end':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,36,37,39,62,115,117,119,133,134,135,140,141,],[-66,0,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-20,-21,-23,-22,-27,-14,-17,-15,-16,-24,-19,-18,]),'RBRACE':([2,3,6,7,8,9,10,11,12,13,24,25,26,36,37,39,62,82,83,84,85,86,91,115,117,118,119,125,128,133,134,135,138,140,141,],[-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-20,-21,-23,-22,-36,-37,-38,-39,-40,115,-27,-14,-66,-17,-29,135,-15,-16,-24,-28,-19,-18,]),'SEMICOLON':([4,5,21,22,23,38,42,43,44,45,46,47,48,52,53,54,60,77,78,81,82,83,84,85,86,87,89,91,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,120,123,124,125,131,138,],[25,26,36,37,39,62,-56,-57,-58,-59,-60,-61,-62,-33,-34,-35,94,-46,-47,-32,-36,-37,-38,-39,-40,-31,-26,116,-41,-42,-43,-44,-45,-48,-49,-50,-51,-52,-53,-54,-55,-65,-63,129,-30,-25,-29,-64,-28,]),'EQUAL':([15,27,31,81,82,83,84,85,86,88,95,],[28,51,56,112,-36,-37,-38,-39,-40,113,51,]),'PLUS_EQUAL':([15,],[29,]),'MINUS_EQUAL':([15,],[30,]),'LPAREN':([18,19,20,23,28,29,30,33,34,40,41,49,51,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,94,112,113,122,],[33,34,35,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'MINUS':([23,28,29,30,33,34,38,40,41,42,43,44,45,46,47,48,49,51,52,53,54,56,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,87,89,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,120,122,123,124,131,],[40,40,40,40,40,40,64,40,40,-56,-57,-58,-59,-60,-61,-62,40,40,64,64,64,40,64,64,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-46,-47,64,64,64,40,-41,-42,-43,-44,-45,64,64,64,64,64,64,64,64,64,-65,-63,40,40,64,40,64,64,64,]),'NOT':([23,28,29,30,33,34,40,41,49,51,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,94,112,113,122,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'NUMBER_LEX':([23,28,29,30,33,34,40,41,49,51,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,94,112,113,122,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'FLOAT_LEX':([23,28,29,30,33,34,40,41,49,51,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,94,112,113,122,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'STRING_LEX':([23,28,29,30,33,34,40,41,49,51,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,94,112,113,122,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'CHAR_LEX':([23,28,29,30,33,34,40,41,49,51,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,94,112,113,122,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'TRUE':([23,28,29,30,33,34,40,41,49,51,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,94,112,113,122,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'FALSE':([23,28,29,30,33,34,40,41,49,51,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,94,112,113,122,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'COLON':([27,31,42,43,44,45,46,47,48,77,78,90,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,126,131,],[50,55,-56,-57,-58,-59,-60,-61,-62,-46,-47,114,50,-41,-42,-43,-44,-45,-48,-49,-50,-51,-52,-53,-54,-55,122,-65,-63,132,-64,]),'LBRACE':([32,92,93,127,137,139,],[57,118,118,118,118,118,]),'PLUS':([38,42,43,44,45,46,47,48,52,53,54,58,59,77,78,80,87,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,120,123,124,131,],[63,-56,-57,-58,-59,-60,-61,-62,63,63,63,63,63,-46,-47,63,63,63,-41,-42,-43,-44,-45,63,63,63,63,63,63,63,63,63,-65,-63,63,63,63,63,]),'TIMES':([38,42,43,44,45,46,47,48,52,53,54,58,59,77,78,80,87,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,120,123,124,131,],[65,-56,-57,-58,-59,-60,-61,-62,65,65,65,65,65,-46,-47,65,65,65,65,65,-43,-44,-45,65,65,65,65,65,65,65,65,65,-65,-63,65,65,65,65,]),'DIVIDE':([38,42,43,44,45,46,47,48,52,53,54,58,59,77,78,80,87,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,120,123,124,131,],[66,-56,-57,-58,-59,-60,-61,-62,66,66,66,66,66,-46,-47,66,66,66,66,66,-43,-44,-45,66,66,66,66,66,66,66,66,66,-65,-63,66,66,66,66,]),'MOD':([38,42,43,44,45,46,47,48,52,53,54,58,59,77,78,80,87,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,120,123,124,131,],[67,-56,-57,-58,-59,-60,-61,-62,67,67,67,67,67,-46,-47,67,67,67,67,67,-43,-44,-45,67,67,67,67,67,67,67,67,67,-65,-63,67,67,67,67,]),'COMPARASION':([38,42,43,44,45,46,47,48,52,53,54,58,59,77,78,80,87,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,120,123,124,131,],[68,-56,-57,-58,-59,-60,-61,-62,68,68,68,68,68,-46,-47,68,68,68,-41,-42,-43,-44,-45,-48,-49,-50,-51,-52,-53,68,68,68,-65,-63,68,68,68,68,]),'DIFFERENT':([38,42,43,44,45,46,47,48,52,53,54,58,59,77,78,80,87,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,120,123,124,131,],[69,-56,-57,-58,-59,-60,-61,-62,69,69,69,69,69,-46,-47,69,69,69,-41,-42,-43,-44,-45,-48,-49,-50,-51,-52,-53,69,69,69,-65,-63,69,69,69,69,]),'GREATER':([38,42,43,44,45,46,47,48,52,53,54,58,59,77,78,80,87,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,120,123,124,131,],[70,-56,-57,-58,-59,-60,-61,-62,70,70,70,70,70,-46,-47,70,70,70,-41,-42,-43,-44,-45,70,70,-50,-51,-52,-53,70,70,70,-65,-63,70,70,70,70,]),'LESS':([38,42,43,44,45,46,47,48,52,53,54,58,59,77,78,80,87,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,120,123,124,131,],[71,-56,-57,-58,-59,-60,-61,-62,71,71,71,71,71,-46,-47,71,71,71,-41,-42,-43,-44,-45,71,71,-50,-51,-52,-53,71,71,71,-65,-63,71,71,71,71,]),'GREATER_EQUAL':([38,42,43,44,45,46,47,48,52,53,54,58,59,77,78,80,87,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,120,123,124,131,],[72,-56,-57,-58,-59,-60,-61,-62,72,72,72,72,72,-46,-47,72,72,72,-41,-42,-43,-44,-45,72,72,-50,-51,-52,-53,72,72,72,-65,-63,72,72,72,72,]),'LESS_EQUAL':([38,42,43,44,45,46,47,48,52,53,54,58,59,77,78,80,87,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,120,123,124,131,],[73,-56,-57,-58,-59,-60,-61,-62,73,73,73,73,73,-46,-47,73,73,73,-41,-42,-43,-44,-45,73,73,-50,-51,-52,-53,73,73,73,-65,-63,73,73,73,73,]),'AND':([38,42,43,44,45,46,47,48,52,53,54,58,59,77,78,80,87,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,120,123,124,131,],[74,-56,-57,-58,-59,-60,-61,-62,74,74,74,74,74,-46,-47,74,74,74,-41,-42,-43,-44,-45,-48,-49,-50,-51,-52,-53,-54,74,74,-65,-63,74,74,74,74,]),'OR':([38,42,43,44,45,46,47,48,52,53,54,58,59,77,78,80,87,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,120,123,124,131,],[75,-56,-57,-58,-59,-60,-61,-62,75,75,75,75,75,-46,-47,75,75,75,-41,-42,-43,-44,-45,-48,-49,-50,-51,-52,-53,-54,-55,75,-65,-63,75,75,75,75,]),'QUESTION':([38,42,43,44,45,46,47,48,52,53,54,58,59,77,78,80,87,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,120,123,124,131,],[76,-56,-57,-58,-59,-60,-61,-62,76,76,76,76,76,-46,-47,76,76,76,-41,-42,-43,-44,-45,-48,-49,-50,-51,-52,-53,-54,-55,76,-65,-63,76,76,76,76,]),'RPAREN':([42,43,44,45,46,47,48,52,53,54,58,59,77,78,80,81,82,83,84,85,86,87,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,123,130,131,136,],[-56,-57,-58,-59,-60,-61,-62,-33,-34,-35,92,93,-46,-47,111,-32,-36,-37,-38,-39,-40,-31,-41,-42,-43,-44,-45,-48,-49,-50,-51,-52,-53,-54,-55,-65,-63,-30,137,-64,139,]),'DOT':([48,],[79,]),'NUMBER':([50,55,114,132,],[82,82,82,82,]),'FLOAT':([50,55,114,132,],[83,83,83,83,]),'STRING':([50,55,114,132,],[84,84,84,84,]),'CHAR':([50,55,114,132,],[85,85,85,85,]),'BOOL':([50,55,114,132,],[86,86,86,86,]),'OF':([95,],[121,]),'ELSE':([117,135,],[127,-24,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,118,],[1,128,]),'instruction':([0,1,118,128,],[2,24,2,24,]),'empty':([0,118,],[3,3,]),'assignation':([0,1,35,118,128,129,],[4,4,60,4,4,136,]),'assignation_const':([0,1,118,128,],[5,5,5,5,]),'interface':([0,1,118,128,],[6,6,6,6,]),'if':([0,1,118,127,128,],[7,7,7,134,7,]),'while':([0,1,118,128,],[8,8,8,8,]),'for':([0,1,118,128,],[9,9,9,9,]),'foreach':([0,1,118,128,],[10,10,10,10,]),'break':([0,1,118,128,],[11,11,11,11,]),'continue':([0,1,118,128,],[12,12,12,12,]),'return':([0,1,118,128,],[13,13,13,13,]),'exp':([23,28,29,30,33,34,40,41,49,51,56,63,64,65,66,67,68,69,70,71,72,73,74,75,76,94,112,113,122,],[38,52,53,54,58,59,77,78,80,87,89,96,97,98,99,100,101,102,103,104,105,106,107,108,109,120,123,124,131,]),'type':([50,55,114,132,],[81,88,125,138,]),'interface_body':([57,],[91,]),'block':([92,93,127,137,139,],[117,119,133,140,141,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> init instruction','init',2,'p_init','parser.py',17),
  ('init -> empty','init',1,'p_init','parser.py',18),
  ('init -> instruction','init',1,'p_init','parser.py',19),
  ('instruction -> assignation SEMICOLON','instruction',2,'p_instruction','parser.py',22),
  ('instruction -> assignation_const SEMICOLON','instruction',2,'p_instruction','parser.py',23),
  ('instruction -> interface','instruction',1,'p_instruction','parser.py',24),
  ('instruction -> if','instruction',1,'p_instruction','parser.py',25),
  ('instruction -> while','instruction',1,'p_instruction','parser.py',26),
  ('instruction -> for','instruction',1,'p_instruction','parser.py',27),
  ('instruction -> foreach','instruction',1,'p_instruction','parser.py',28),
  ('instruction -> break','instruction',1,'p_instruction','parser.py',29),
  ('instruction -> continue','instruction',1,'p_instruction','parser.py',30),
  ('instruction -> return','instruction',1,'p_instruction','parser.py',31),
  ('if -> IF LPAREN exp RPAREN block','if',5,'p_if','parser.py',36),
  ('if -> IF LPAREN exp RPAREN block ELSE block','if',7,'p_if','parser.py',37),
  ('if -> IF LPAREN exp RPAREN block ELSE if','if',7,'p_if','parser.py',38),
  ('while -> WHILE LPAREN exp RPAREN block','while',5,'p_while','parser.py',42),
  ('for -> FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block','for',9,'p_for','parser.py',46),
  ('foreach -> FOR LPAREN VAR ID OF ID RPAREN block','foreach',8,'p_foreach','parser.py',50),
  ('break -> BREAK SEMICOLON','break',2,'p_break','parser.py',54),
  ('continue -> CONTINUE SEMICOLON','continue',2,'p_continue','parser.py',58),
  ('return -> RETURN exp SEMICOLON','return',3,'p_return','parser.py',62),
  ('return -> RETURN SEMICOLON','return',2,'p_return','parser.py',63),
  ('block -> LBRACE init RBRACE','block',3,'p_block','parser.py',67),
  ('assignation_const -> CONST ID COLON type EQUAL exp','assignation_const',6,'p_assignation_const','parser.py',74),
  ('assignation_const -> CONST ID EQUAL exp','assignation_const',4,'p_assignation_const2','parser.py',76),
  ('interface -> INTERFACE ID LBRACE interface_body RBRACE','interface',5,'p_interface','parser.py',94),
  ('interface_body -> interface_body SEMICOLON ID COLON type','interface_body',5,'p_interface_body','parser.py',96),
  ('interface_body -> ID COLON type','interface_body',3,'p_interface_body','parser.py',97),
  ('assignation -> VAR ID COLON type EQUAL exp','assignation',6,'p_assignation','parser.py',103),
  ('assignation -> VAR ID EQUAL exp','assignation',4,'p_assignation2','parser.py',106),
  ('assignation -> VAR ID COLON type','assignation',4,'p_assignation3','parser.py',109),
  ('assignation -> ID EQUAL exp','assignation',3,'p_assignation4','parser.py',111),
  ('assignation -> ID PLUS_EQUAL exp','assignation',3,'p_assignation4','parser.py',112),
  ('assignation -> ID MINUS_EQUAL exp','assignation',3,'p_assignation4','parser.py',113),
  ('type -> NUMBER','type',1,'p_type','parser.py',118),
  ('type -> FLOAT','type',1,'p_type','parser.py',119),
  ('type -> STRING','type',1,'p_type','parser.py',120),
  ('type -> CHAR','type',1,'p_type','parser.py',121),
  ('type -> BOOL','type',1,'p_type','parser.py',122),
  ('exp -> exp PLUS exp','exp',3,'p_exp_plus','parser.py',128),
  ('exp -> exp MINUS exp','exp',3,'p_exp_plus','parser.py',129),
  ('exp -> exp TIMES exp','exp',3,'p_exp_plus','parser.py',130),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp_plus','parser.py',131),
  ('exp -> exp MOD exp','exp',3,'p_exp_plus','parser.py',132),
  ('exp -> MINUS exp','exp',2,'p_exp_unary','parser.py',134),
  ('exp -> NOT exp','exp',2,'p_exp_unary','parser.py',135),
  ('exp -> exp COMPARASION exp','exp',3,'p_exp_comparation','parser.py',138),
  ('exp -> exp DIFFERENT exp','exp',3,'p_exp_comparation','parser.py',139),
  ('exp -> exp GREATER exp','exp',3,'p_exp_relation','parser.py',142),
  ('exp -> exp LESS exp','exp',3,'p_exp_relation','parser.py',143),
  ('exp -> exp GREATER_EQUAL exp','exp',3,'p_exp_relation','parser.py',144),
  ('exp -> exp LESS_EQUAL exp','exp',3,'p_exp_relation','parser.py',145),
  ('exp -> exp AND exp','exp',3,'p_exp_logic','parser.py',148),
  ('exp -> exp OR exp','exp',3,'p_exp_logic','parser.py',149),
  ('exp -> NUMBER_LEX','exp',1,'p_exp_literals','parser.py',152),
  ('exp -> FLOAT_LEX','exp',1,'p_exp_literals','parser.py',153),
  ('exp -> STRING_LEX','exp',1,'p_exp_literals','parser.py',154),
  ('exp -> CHAR_LEX','exp',1,'p_exp_literals','parser.py',155),
  ('exp -> TRUE','exp',1,'p_exp_literals','parser.py',156),
  ('exp -> FALSE','exp',1,'p_exp_literals','parser.py',157),
  ('exp -> ID','exp',1,'p_exp_literals','parser.py',158),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_exp_group','parser.py',160),
  ('exp -> exp QUESTION exp COLON exp','exp',5,'p_exp_ternary','parser.py',162),
  ('exp -> ID DOT ID','exp',3,'p_access_attribute','parser.py',164),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',168),
]
