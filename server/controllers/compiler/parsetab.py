
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftCOMPARASIONDIFFERENTleftGREATERLESSGREATER_EQUALLESS_EQUALleftPLUSMINUSleftDIVIDEMODTIMESrightUNOTUMINUSAND BOOL BREAK CASE CHAR CHAR_LEX COLON COMMA COMMENT COMMENT2 COMPARASION CONSOLE CONST CONTINUE DEFAULT DIFFERENT DIVIDE DOT ELSE EQUAL FALSE FLOAT FLOAT_LEX FOR FUNCTION GREATER GREATER_EQUAL ID IF INDEXOF INTERFACE JOIN KEYS LBRACE LBRACKET LENGTH LESS LESS_EQUAL LOG LPAREN MINUS MINUS_EQUAL MOD NOT NULL NUMBER NUMBER_LEX OBJECT OF OR PARSEFLOAT PARSEINT PLUS PLUS_EQUAL POP PUSH QUESTION RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STRING_LEX SWITCH TIMES TOLOWERCASE TOSTRING TOUPPERCASE TRUE TYPEOF VALUES VAR WHILEinit : init instruction\n            | empty\n            | instructioninstruction  : assignation SEMICOLON\n                    | assignation_const SEMICOLON\n                    | interface\n                    | if\n                    | while\n                    | for\n                    | foreach\n                    | break\n                    | continue\n                    | return\n    if : IF LPAREN exp RPAREN block\n          | IF LPAREN exp RPAREN block ELSE block\n          | IF LPAREN exp RPAREN block ELSE ifif : IF error while : WHILE LPAREN exp RPAREN blockfor : FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN blockforeach : FOR LPAREN VAR ID OF ID RPAREN blockbreak : BREAK SEMICOLONcontinue : CONTINUE SEMICOLONreturn : RETURN exp SEMICOLON\n              | RETURN SEMICOLONblock : LBRACE init RBRACEassignation_const : CONST ID COLON type EQUAL exp assignation_const : CONST ID EQUAL exp interface : INTERFACE ID LBRACE interface_body RBRACEinterface_body : interface_body SEMICOLON ID COLON type\n                      | ID COLON typeassignation : VAR ID COLON type EQUAL exp assignation : VAR ID EQUAL exp assignation : VAR ID COLON type assignation : ID EQUAL exp \n                   | ID PLUS_EQUAL exp \n                   | ID MINUS_EQUAL exp assignation : VAR error \n    type : NUMBER\n            | FLOAT\n            | STRING\n            | CHAR\n            | BOOLexp : exp PLUS exp\n            | exp MINUS exp\n            | exp TIMES exp\n            | exp DIVIDE exp\n            | exp MOD expexp : MINUS exp %prec UMINUS\n            | NOT exp %prec UNOTexp : exp COMPARASION exp\n            | exp DIFFERENT exp\n    exp : exp GREATER exp\n            | exp LESS exp\n            | exp GREATER_EQUAL exp\n            | exp LESS_EQUAL exp\n    exp : exp AND exp\n            | exp OR exp\n    exp : NUMBER_LEX\n            | FLOAT_LEX\n            | STRING_LEX\n            | CHAR_LEX\n            | TRUE\n            | FALSE\n            | IDexp : LPAREN exp RPARENexp : exp QUESTION exp COLON expexp : ID DOT IDempty :'
    
_lr_action_items = {'VAR':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,35,37,38,39,41,64,117,119,120,121,130,131,135,136,137,142,143,],[14,14,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-17,63,-21,-22,-24,-23,-28,-14,14,-18,14,14,-15,-16,-25,-20,-19,]),'ID':([0,1,2,3,6,7,8,9,10,11,12,13,14,16,17,23,24,25,26,29,30,31,34,35,36,37,38,39,41,42,43,51,53,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,96,114,115,117,118,119,120,121,123,124,130,131,135,136,137,142,143,],[15,15,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,27,32,33,50,-1,-4,-5,50,50,50,50,-17,50,15,-21,-22,-24,50,50,50,50,50,92,97,-23,50,50,50,50,50,50,50,50,50,50,50,50,50,50,112,50,50,50,-28,128,-14,15,-18,132,50,15,15,-15,-16,-25,-20,-19,]),'CONST':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,35,38,39,41,64,117,119,120,121,130,135,136,137,142,143,],[16,16,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-17,-21,-22,-24,-23,-28,-14,16,-18,16,-15,-16,-25,-20,-19,]),'INTERFACE':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,35,38,39,41,64,117,119,120,121,130,135,136,137,142,143,],[17,17,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-17,-21,-22,-24,-23,-28,-14,17,-18,17,-15,-16,-25,-20,-19,]),'IF':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,35,38,39,41,64,117,119,120,121,129,130,135,136,137,142,143,],[18,18,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-17,-21,-22,-24,-23,-28,-14,18,-18,18,18,-15,-16,-25,-20,-19,]),'WHILE':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,35,38,39,41,64,117,119,120,121,130,135,136,137,142,143,],[19,19,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-17,-21,-22,-24,-23,-28,-14,19,-18,19,-15,-16,-25,-20,-19,]),'FOR':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,35,38,39,41,64,117,119,120,121,130,135,136,137,142,143,],[20,20,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-17,-21,-22,-24,-23,-28,-14,20,-18,20,-15,-16,-25,-20,-19,]),'BREAK':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,35,38,39,41,64,117,119,120,121,130,135,136,137,142,143,],[21,21,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-17,-21,-22,-24,-23,-28,-14,21,-18,21,-15,-16,-25,-20,-19,]),'CONTINUE':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,35,38,39,41,64,117,119,120,121,130,135,136,137,142,143,],[22,22,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-17,-21,-22,-24,-23,-28,-14,22,-18,22,-15,-16,-25,-20,-19,]),'RETURN':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,35,38,39,41,64,117,119,120,121,130,135,136,137,142,143,],[23,23,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-17,-21,-22,-24,-23,-28,-14,23,-18,23,-15,-16,-25,-20,-19,]),'$end':([0,1,2,3,6,7,8,9,10,11,12,13,24,25,26,35,38,39,41,64,117,119,121,135,136,137,142,143,],[-68,0,-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-17,-21,-22,-24,-23,-28,-14,-18,-15,-16,-25,-20,-19,]),'RBRACE':([2,3,6,7,8,9,10,11,12,13,24,25,26,35,38,39,41,64,84,85,86,87,88,93,117,119,120,121,127,130,135,136,137,140,142,143,],[-3,-2,-6,-7,-8,-9,-10,-11,-12,-13,-1,-4,-5,-17,-21,-22,-24,-23,-38,-39,-40,-41,-42,117,-28,-14,-68,-18,-30,137,-15,-16,-25,-29,-20,-19,]),'SEMICOLON':([4,5,21,22,23,28,40,44,45,46,47,48,49,50,54,55,56,62,79,80,83,84,85,86,87,88,89,91,93,98,99,100,101,102,103,104,105,106,107,108,109,110,112,113,122,125,126,127,133,140,],[25,26,38,39,41,-37,64,-58,-59,-60,-61,-62,-63,-64,-34,-35,-36,96,-48,-49,-33,-38,-39,-40,-41,-42,-32,-27,118,-43,-44,-45,-46,-47,-50,-51,-52,-53,-54,-55,-56,-57,-67,-65,131,-31,-26,-30,-66,-29,]),'error':([14,18,63,],[28,35,28,]),'EQUAL':([15,27,32,83,84,85,86,87,88,90,97,],[29,53,58,114,-38,-39,-40,-41,-42,115,53,]),'PLUS_EQUAL':([15,],[30,]),'MINUS_EQUAL':([15,],[31,]),'LPAREN':([18,19,20,23,29,30,31,34,36,42,43,51,53,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,96,114,115,124,],[34,36,37,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'MINUS':([23,29,30,31,34,36,40,42,43,44,45,46,47,48,49,50,51,53,54,55,56,58,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,89,91,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,122,124,125,126,133,],[42,42,42,42,42,42,66,42,42,-58,-59,-60,-61,-62,-63,-64,42,42,66,66,66,42,66,66,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-48,-49,66,66,66,42,-43,-44,-45,-46,-47,66,66,66,66,66,66,66,66,66,-67,-65,42,42,66,42,66,66,66,]),'NOT':([23,29,30,31,34,36,42,43,51,53,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,96,114,115,124,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'NUMBER_LEX':([23,29,30,31,34,36,42,43,51,53,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,96,114,115,124,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'FLOAT_LEX':([23,29,30,31,34,36,42,43,51,53,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,96,114,115,124,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'STRING_LEX':([23,29,30,31,34,36,42,43,51,53,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,96,114,115,124,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'CHAR_LEX':([23,29,30,31,34,36,42,43,51,53,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,96,114,115,124,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'TRUE':([23,29,30,31,34,36,42,43,51,53,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,96,114,115,124,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'FALSE':([23,29,30,31,34,36,42,43,51,53,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,96,114,115,124,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'COLON':([27,32,44,45,46,47,48,49,50,79,80,92,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,128,133,],[52,57,-58,-59,-60,-61,-62,-63,-64,-48,-49,116,52,-43,-44,-45,-46,-47,-50,-51,-52,-53,-54,-55,-56,-57,124,-67,-65,134,-66,]),'RPAREN':([28,44,45,46,47,48,49,50,54,55,56,60,61,79,80,82,83,84,85,86,87,88,89,98,99,100,101,102,103,104,105,106,107,108,109,110,112,113,125,132,133,138,],[-37,-58,-59,-60,-61,-62,-63,-64,-34,-35,-36,94,95,-48,-49,113,-33,-38,-39,-40,-41,-42,-32,-43,-44,-45,-46,-47,-50,-51,-52,-53,-54,-55,-56,-57,-67,-65,-31,139,-66,141,]),'LBRACE':([33,94,95,129,139,141,],[59,120,120,120,120,120,]),'PLUS':([40,44,45,46,47,48,49,50,54,55,56,60,61,79,80,82,89,91,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,125,126,133,],[65,-58,-59,-60,-61,-62,-63,-64,65,65,65,65,65,-48,-49,65,65,65,-43,-44,-45,-46,-47,65,65,65,65,65,65,65,65,65,-67,-65,65,65,65,65,]),'TIMES':([40,44,45,46,47,48,49,50,54,55,56,60,61,79,80,82,89,91,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,125,126,133,],[67,-58,-59,-60,-61,-62,-63,-64,67,67,67,67,67,-48,-49,67,67,67,67,67,-45,-46,-47,67,67,67,67,67,67,67,67,67,-67,-65,67,67,67,67,]),'DIVIDE':([40,44,45,46,47,48,49,50,54,55,56,60,61,79,80,82,89,91,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,125,126,133,],[68,-58,-59,-60,-61,-62,-63,-64,68,68,68,68,68,-48,-49,68,68,68,68,68,-45,-46,-47,68,68,68,68,68,68,68,68,68,-67,-65,68,68,68,68,]),'MOD':([40,44,45,46,47,48,49,50,54,55,56,60,61,79,80,82,89,91,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,125,126,133,],[69,-58,-59,-60,-61,-62,-63,-64,69,69,69,69,69,-48,-49,69,69,69,69,69,-45,-46,-47,69,69,69,69,69,69,69,69,69,-67,-65,69,69,69,69,]),'COMPARASION':([40,44,45,46,47,48,49,50,54,55,56,60,61,79,80,82,89,91,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,125,126,133,],[70,-58,-59,-60,-61,-62,-63,-64,70,70,70,70,70,-48,-49,70,70,70,-43,-44,-45,-46,-47,-50,-51,-52,-53,-54,-55,70,70,70,-67,-65,70,70,70,70,]),'DIFFERENT':([40,44,45,46,47,48,49,50,54,55,56,60,61,79,80,82,89,91,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,125,126,133,],[71,-58,-59,-60,-61,-62,-63,-64,71,71,71,71,71,-48,-49,71,71,71,-43,-44,-45,-46,-47,-50,-51,-52,-53,-54,-55,71,71,71,-67,-65,71,71,71,71,]),'GREATER':([40,44,45,46,47,48,49,50,54,55,56,60,61,79,80,82,89,91,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,125,126,133,],[72,-58,-59,-60,-61,-62,-63,-64,72,72,72,72,72,-48,-49,72,72,72,-43,-44,-45,-46,-47,72,72,-52,-53,-54,-55,72,72,72,-67,-65,72,72,72,72,]),'LESS':([40,44,45,46,47,48,49,50,54,55,56,60,61,79,80,82,89,91,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,125,126,133,],[73,-58,-59,-60,-61,-62,-63,-64,73,73,73,73,73,-48,-49,73,73,73,-43,-44,-45,-46,-47,73,73,-52,-53,-54,-55,73,73,73,-67,-65,73,73,73,73,]),'GREATER_EQUAL':([40,44,45,46,47,48,49,50,54,55,56,60,61,79,80,82,89,91,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,125,126,133,],[74,-58,-59,-60,-61,-62,-63,-64,74,74,74,74,74,-48,-49,74,74,74,-43,-44,-45,-46,-47,74,74,-52,-53,-54,-55,74,74,74,-67,-65,74,74,74,74,]),'LESS_EQUAL':([40,44,45,46,47,48,49,50,54,55,56,60,61,79,80,82,89,91,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,125,126,133,],[75,-58,-59,-60,-61,-62,-63,-64,75,75,75,75,75,-48,-49,75,75,75,-43,-44,-45,-46,-47,75,75,-52,-53,-54,-55,75,75,75,-67,-65,75,75,75,75,]),'AND':([40,44,45,46,47,48,49,50,54,55,56,60,61,79,80,82,89,91,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,125,126,133,],[76,-58,-59,-60,-61,-62,-63,-64,76,76,76,76,76,-48,-49,76,76,76,-43,-44,-45,-46,-47,-50,-51,-52,-53,-54,-55,-56,76,76,-67,-65,76,76,76,76,]),'OR':([40,44,45,46,47,48,49,50,54,55,56,60,61,79,80,82,89,91,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,125,126,133,],[77,-58,-59,-60,-61,-62,-63,-64,77,77,77,77,77,-48,-49,77,77,77,-43,-44,-45,-46,-47,-50,-51,-52,-53,-54,-55,-56,-57,77,-67,-65,77,77,77,77,]),'QUESTION':([40,44,45,46,47,48,49,50,54,55,56,60,61,79,80,82,89,91,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,122,125,126,133,],[78,-58,-59,-60,-61,-62,-63,-64,78,78,78,78,78,-48,-49,78,78,78,-43,-44,-45,-46,-47,-50,-51,-52,-53,-54,-55,-56,-57,78,-67,-65,78,78,78,78,]),'DOT':([50,],[81,]),'NUMBER':([52,57,116,134,],[84,84,84,84,]),'FLOAT':([52,57,116,134,],[85,85,85,85,]),'STRING':([52,57,116,134,],[86,86,86,86,]),'CHAR':([52,57,116,134,],[87,87,87,87,]),'BOOL':([52,57,116,134,],[88,88,88,88,]),'OF':([97,],[123,]),'ELSE':([119,137,],[129,-25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,120,],[1,130,]),'instruction':([0,1,120,130,],[2,24,2,24,]),'empty':([0,120,],[3,3,]),'assignation':([0,1,37,120,130,131,],[4,4,62,4,4,138,]),'assignation_const':([0,1,120,130,],[5,5,5,5,]),'interface':([0,1,120,130,],[6,6,6,6,]),'if':([0,1,120,129,130,],[7,7,7,136,7,]),'while':([0,1,120,130,],[8,8,8,8,]),'for':([0,1,120,130,],[9,9,9,9,]),'foreach':([0,1,120,130,],[10,10,10,10,]),'break':([0,1,120,130,],[11,11,11,11,]),'continue':([0,1,120,130,],[12,12,12,12,]),'return':([0,1,120,130,],[13,13,13,13,]),'exp':([23,29,30,31,34,36,42,43,51,53,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,96,114,115,124,],[40,54,55,56,60,61,79,80,82,89,91,98,99,100,101,102,103,104,105,106,107,108,109,110,111,122,125,126,133,]),'type':([52,57,116,134,],[83,90,127,140,]),'interface_body':([59,],[93,]),'block':([94,95,129,139,141,],[119,121,135,142,143,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> init instruction','init',2,'p_init','parser.py',17),
  ('init -> empty','init',1,'p_init','parser.py',18),
  ('init -> instruction','init',1,'p_init','parser.py',19),
  ('instruction -> assignation SEMICOLON','instruction',2,'p_instruction','parser.py',22),
  ('instruction -> assignation_const SEMICOLON','instruction',2,'p_instruction','parser.py',23),
  ('instruction -> interface','instruction',1,'p_instruction','parser.py',24),
  ('instruction -> if','instruction',1,'p_instruction','parser.py',25),
  ('instruction -> while','instruction',1,'p_instruction','parser.py',26),
  ('instruction -> for','instruction',1,'p_instruction','parser.py',27),
  ('instruction -> foreach','instruction',1,'p_instruction','parser.py',28),
  ('instruction -> break','instruction',1,'p_instruction','parser.py',29),
  ('instruction -> continue','instruction',1,'p_instruction','parser.py',30),
  ('instruction -> return','instruction',1,'p_instruction','parser.py',31),
  ('if -> IF LPAREN exp RPAREN block','if',5,'p_if','parser.py',36),
  ('if -> IF LPAREN exp RPAREN block ELSE block','if',7,'p_if','parser.py',37),
  ('if -> IF LPAREN exp RPAREN block ELSE if','if',7,'p_if','parser.py',38),
  ('if -> IF error','if',2,'p_if_error','parser.py',41),
  ('while -> WHILE LPAREN exp RPAREN block','while',5,'p_while','parser.py',47),
  ('for -> FOR LPAREN assignation SEMICOLON exp SEMICOLON assignation RPAREN block','for',9,'p_for','parser.py',51),
  ('foreach -> FOR LPAREN VAR ID OF ID RPAREN block','foreach',8,'p_foreach','parser.py',55),
  ('break -> BREAK SEMICOLON','break',2,'p_break','parser.py',59),
  ('continue -> CONTINUE SEMICOLON','continue',2,'p_continue','parser.py',63),
  ('return -> RETURN exp SEMICOLON','return',3,'p_return','parser.py',67),
  ('return -> RETURN SEMICOLON','return',2,'p_return','parser.py',68),
  ('block -> LBRACE init RBRACE','block',3,'p_block','parser.py',72),
  ('assignation_const -> CONST ID COLON type EQUAL exp','assignation_const',6,'p_assignation_const','parser.py',79),
  ('assignation_const -> CONST ID EQUAL exp','assignation_const',4,'p_assignation_const2','parser.py',81),
  ('interface -> INTERFACE ID LBRACE interface_body RBRACE','interface',5,'p_interface','parser.py',99),
  ('interface_body -> interface_body SEMICOLON ID COLON type','interface_body',5,'p_interface_body','parser.py',101),
  ('interface_body -> ID COLON type','interface_body',3,'p_interface_body','parser.py',102),
  ('assignation -> VAR ID COLON type EQUAL exp','assignation',6,'p_assignation','parser.py',108),
  ('assignation -> VAR ID EQUAL exp','assignation',4,'p_assignation2','parser.py',111),
  ('assignation -> VAR ID COLON type','assignation',4,'p_assignation3','parser.py',114),
  ('assignation -> ID EQUAL exp','assignation',3,'p_assignation4','parser.py',116),
  ('assignation -> ID PLUS_EQUAL exp','assignation',3,'p_assignation4','parser.py',117),
  ('assignation -> ID MINUS_EQUAL exp','assignation',3,'p_assignation4','parser.py',118),
  ('assignation -> VAR error','assignation',2,'p_assignation5','parser.py',120),
  ('type -> NUMBER','type',1,'p_type','parser.py',127),
  ('type -> FLOAT','type',1,'p_type','parser.py',128),
  ('type -> STRING','type',1,'p_type','parser.py',129),
  ('type -> CHAR','type',1,'p_type','parser.py',130),
  ('type -> BOOL','type',1,'p_type','parser.py',131),
  ('exp -> exp PLUS exp','exp',3,'p_exp_plus','parser.py',137),
  ('exp -> exp MINUS exp','exp',3,'p_exp_plus','parser.py',138),
  ('exp -> exp TIMES exp','exp',3,'p_exp_plus','parser.py',139),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp_plus','parser.py',140),
  ('exp -> exp MOD exp','exp',3,'p_exp_plus','parser.py',141),
  ('exp -> MINUS exp','exp',2,'p_exp_unary','parser.py',143),
  ('exp -> NOT exp','exp',2,'p_exp_unary','parser.py',144),
  ('exp -> exp COMPARASION exp','exp',3,'p_exp_comparation','parser.py',147),
  ('exp -> exp DIFFERENT exp','exp',3,'p_exp_comparation','parser.py',148),
  ('exp -> exp GREATER exp','exp',3,'p_exp_relation','parser.py',151),
  ('exp -> exp LESS exp','exp',3,'p_exp_relation','parser.py',152),
  ('exp -> exp GREATER_EQUAL exp','exp',3,'p_exp_relation','parser.py',153),
  ('exp -> exp LESS_EQUAL exp','exp',3,'p_exp_relation','parser.py',154),
  ('exp -> exp AND exp','exp',3,'p_exp_logic','parser.py',157),
  ('exp -> exp OR exp','exp',3,'p_exp_logic','parser.py',158),
  ('exp -> NUMBER_LEX','exp',1,'p_exp_literals','parser.py',161),
  ('exp -> FLOAT_LEX','exp',1,'p_exp_literals','parser.py',162),
  ('exp -> STRING_LEX','exp',1,'p_exp_literals','parser.py',163),
  ('exp -> CHAR_LEX','exp',1,'p_exp_literals','parser.py',164),
  ('exp -> TRUE','exp',1,'p_exp_literals','parser.py',165),
  ('exp -> FALSE','exp',1,'p_exp_literals','parser.py',166),
  ('exp -> ID','exp',1,'p_exp_literals','parser.py',167),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_exp_group','parser.py',169),
  ('exp -> exp QUESTION exp COLON exp','exp',5,'p_exp_ternary','parser.py',171),
  ('exp -> ID DOT ID','exp',3,'p_access_attribute','parser.py',173),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',177),
]
